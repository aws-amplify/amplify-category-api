// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for endswith validation: filename endswith validation 1`] = `
"## [Start] Validations for field filename. **
#if( !$util.isNull($ctx.args.input.filename) )
  #set($endswithValidationPassed = $ctx.args.input.filename.endsWith('.pdf'))
  #if(!$endswithValidationPassed)
    $util.error('File must be a PDF')
  #end
#end
## [End] Validations for field filename. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for gt validation: age gt validation 1`] = `
"## [Start] Validations for field age. **
#if( !$util.isNull($ctx.args.input.age) )
  #set($gtValidationPassed = $ctx.args.input.age > 18)
  #if(!$gtValidationPassed)
    $util.error('Age must be greater than 18')
  #end
#end
## [End] Validations for field age. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for gte validation: quantity gte validation 1`] = `
"## [Start] Validations for field quantity. **
#if( !$util.isNull($ctx.args.input.quantity) )
  #set($gteValidationPassed = $ctx.args.input.quantity >= 0)
  #if(!$gteValidationPassed)
    $util.error('Quantity must be non-negative')
  #end
#end
## [End] Validations for field quantity. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for lt validation: price lt validation 1`] = `
"## [Start] Validations for field price. **
#if( !$util.isNull($ctx.args.input.price) )
  #set($ltValidationPassed = $ctx.args.input.price < 1000)
  #if(!$ltValidationPassed)
    $util.error('Price must be less than 1000')
  #end
#end
## [End] Validations for field price. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for lte validation: rating lte validation 1`] = `
"## [Start] Validations for field rating. **
#if( !$util.isNull($ctx.args.input.rating) )
  #set($lteValidationPassed = $ctx.args.input.rating <= 5)
  #if(!$lteValidationPassed)
    $util.error('Rating must be at most 5')
  #end
#end
## [End] Validations for field rating. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for matches validation: email matches validation 1`] = `
"## [Start] Validations for field email. **
#if( !$util.isNull($ctx.args.input.email) )
  #set($matchesValidationPassed = $util.matches('^[A-Za-z0-9+_.-]+@(.+)$', $ctx.args.input.email))
  #if(!$matchesValidationPassed)
    $util.error('Invalid email format')
  #end
#end
## [End] Validations for field email. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for maxlength validation: bio maxlength validation 1`] = `
"## [Start] Validations for field bio. **
#if( !$util.isNull($ctx.args.input.bio) )
  #set($maxlengthValidationPassed = $ctx.args.input.bio.length() <= 500)
  #if(!$maxlengthValidationPassed)
    $util.error('Bio must not exceed 500 characters')
  #end
#end
## [End] Validations for field bio. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for minlength validation: name minlength validation 1`] = `
"## [Start] Validations for field name. **
#if( !$util.isNull($ctx.args.input.name) )
  #set($minlengthValidationPassed = $ctx.args.input.name.length() >= 3)
  #if(!$minlengthValidationPassed)
    $util.error('Name must be at least 3 characters')
  #end
#end
## [End] Validations for field name. **"
`;

exports[`vtl-generator Test \`generateFieldValidationSnippet\` generates correct VTL for startswith validation: url startswith validation 1`] = `
"## [Start] Validations for field url. **
#if( !$util.isNull($ctx.args.input.url) )
  #set($startswithValidationPassed = $ctx.args.input.url.startsWith('https://'))
  #if(!$startswithValidationPassed)
    $util.error('URL must start with https://')
  #end
#end
## [End] Validations for field url. **"
`;

exports[`vtl-generator Test \`generateTypeValidationSnippet\` generates correct VTL for all validations in a type Post: all validations in a type Post 1`] = `
"## [Start] Validations for type Post **. **
## [Start] Validations for field title. **
#if( !$util.isNull($ctx.args.input.title) )
  #set($minLengthValidationPassed = $ctx.args.input.title.length() >= 3)
  #if(!$minLengthValidationPassed)
    $util.error('Title must be at least 3 characters')
  #end
#end
## [End] Validations for field title. **
## [Start] Validations for field content. **
#if( !$util.isNull($ctx.args.input.content) )
  #set($maxLengthValidationPassed = $ctx.args.input.content.length() <= 500)
  #if(!$maxLengthValidationPassed)
    $util.error('Content must not exceed 500 characters')
  #end
#end
## [End] Validations for field content. **
## [Start] Validations for field url. **
#if( !$util.isNull($ctx.args.input.url) )
  #set($startsWithValidationPassed = $ctx.args.input.url.startsWith('https://'))
  #if(!$startsWithValidationPassed)
    $util.error('URL must start with https://')
  #end
#end
## [End] Validations for field url. **
## [Start] Validations for field filename. **
#if( !$util.isNull($ctx.args.input.filename) )
  #set($endsWithValidationPassed = $ctx.args.input.filename.endsWith('.pdf'))
  #if(!$endsWithValidationPassed)
    $util.error('File must be a PDF')
  #end
#end
## [End] Validations for field filename. **
## [Start] Validations for field email. **
#if( !$util.isNull($ctx.args.input.email) )
  #set($matchesValidationPassed = $util.matches('^[A-Za-z0-9+_.-]+@(.+)$', $ctx.args.input.email))
  #if(!$matchesValidationPassed)
    $util.error('Invalid email format')
  #end
#end
## [End] Validations for field email. **
## [End] Validations for type Post **. **"
`;

exports[`vtl-generator Test \`generateTypeValidationSnippet\` generates correct VTL for all validations in a type Product: all validations in a type Product 1`] = `
"## [Start] Validations for type Product **. **
## [Start] Validations for field count. **
#if( !$util.isNull($ctx.args.input.count) )
  #set($gtValidationPassed = $ctx.args.input.count > 18)
  #if(!$gtValidationPassed)
    $util.error('error')
  #end
#end
## [End] Validations for field count. **
## [Start] Validations for field price. **
#if( !$util.isNull($ctx.args.input.price) )
  #set($ltValidationPassed = $ctx.args.input.price < 1000)
  #if(!$ltValidationPassed)
    $util.error('Price must be less than 1000')
  #end
#end
## [End] Validations for field price. **
## [Start] Validations for field quantity. **
#if( !$util.isNull($ctx.args.input.quantity) )
  #set($gteValidationPassed = $ctx.args.input.quantity >= 0)
  #if(!$gteValidationPassed)
    $util.error('Quantity must be non-negative')
  #end
#end
## [End] Validations for field quantity. **
## [Start] Validations for field rating. **
#if( !$util.isNull($ctx.args.input.rating) )
  #set($lteValidationPassed = $ctx.args.input.rating <= 5)
  #if(!$lteValidationPassed)
    $util.error('Rating must be at most 5')
  #end
#end
## [End] Validations for field rating. **
## [End] Validations for type Product **. **"
`;

exports[`vtl-generator Test \`generateTypeValidationSnippet\` generates correct VTL for all validations in a type User: all validations in a type User 1`] = `
"## [Start] Validations for type User **. **
## [Start] Validations for field age. **
#if( !$util.isNull($ctx.args.input.age) )
  #set($gtValidationPassed = $ctx.args.input.age > 13)
  #if(!$gtValidationPassed)
    $util.error('Must be over 13')
  #end
  #set($ltValidationPassed = $ctx.args.input.age < 150)
  #if(!$ltValidationPassed)
    $util.error('Must be under 150')
  #end
#end
## [End] Validations for field age. **
## [Start] Validations for field score. **
#if( !$util.isNull($ctx.args.input.score) )
  #set($gteValidationPassed = $ctx.args.input.score >= 0)
  #if(!$gteValidationPassed)
    $util.error('Cannot be negative')
  #end
  #set($lteValidationPassed = $ctx.args.input.score <= 100)
  #if(!$lteValidationPassed)
    $util.error('Cannot exceed 100')
  #end
#end
## [End] Validations for field score. **
## [Start] Validations for field email. **
#if( !$util.isNull($ctx.args.input.email) )
  #set($minLengthValidationPassed = $ctx.args.input.email.length() >= 10)
  #if(!$minLengthValidationPassed)
    $util.error('Email too short')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.email.length() <= 50)
  #if(!$maxLengthValidationPassed)
    $util.error('Email too long')
  #end
  #set($startsWithValidationPassed = $ctx.args.input.email.startsWith('user_'))
  #if(!$startsWithValidationPassed)
    $util.error('Must start with user_')
  #end
  #set($endsWithValidationPassed = $ctx.args.input.email.endsWith('.com'))
  #if(!$endsWithValidationPassed)
    $util.error('Must end with .com')
  #end
  #set($matchesValidationPassed = $util.matches('^user_[a-z]+.com$', $ctx.args.input.email))
  #if(!$matchesValidationPassed)
    $util.error('Invalid format')
  #end
#end
## [End] Validations for field email. **
## [End] Validations for type User **. **"
`;
