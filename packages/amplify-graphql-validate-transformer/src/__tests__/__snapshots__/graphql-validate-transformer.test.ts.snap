// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: create comment author maxLength validation 1`] = `
"## [Start] Validating \\"author\\" with type \\"maxLength\\" and value \\"20\\". **
#if( !$util.isNull($ctx.args.input.author) )
      #set($validationPassed = $$ctx.args.input.author.length() <= 20)
      #if(!$validationPassed)
        $util.error(\\"Author too long\\")
      #end
    #end
## [End] Validating \\"author\\" with type \\"maxLength\\" and value \\"20\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: create comment author minLength validation 1`] = `
"## [Start] Validating \\"author\\" with type \\"minLength\\" and value \\"3\\". **
#if( !$util.isNull($ctx.args.input.author) )
      #set($validationPassed = $$ctx.args.input.author.length() >= 3)
      #if(!$validationPassed)
        $util.error(\\"Author too short\\")
      #end
    #end
## [End] Validating \\"author\\" with type \\"minLength\\" and value \\"3\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: create comment content maxLength validation 1`] = `
"## [Start] Validating \\"content\\" with type \\"maxLength\\" and value \\"1000\\". **
#if( !$util.isNull($ctx.args.input.content) )
      #set($validationPassed = $$ctx.args.input.content.length() <= 1000)
      #if(!$validationPassed)
        $util.error(\\"Content too long\\")
      #end
    #end
## [End] Validating \\"content\\" with type \\"maxLength\\" and value \\"1000\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: create comment content minLength validation 1`] = `
"## [Start] Validating \\"content\\" with type \\"minLength\\" and value \\"1\\". **
#if( !$util.isNull($ctx.args.input.content) )
      #set($validationPassed = $$ctx.args.input.content.length() >= 1)
      #if(!$validationPassed)
        $util.error(\\"Content cannot be empty\\")
      #end
    #end
## [End] Validating \\"content\\" with type \\"minLength\\" and value \\"1\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: create comment rating gte validation 1`] = `
"## [Start] Validating \\"rating\\" with type \\"gte\\" and value \\"0\\". **
#if( !$util.isNull($ctx.args.input.rating) )
      #set($validationPassed = $$ctx.args.input.rating >= 0)
      #if(!$validationPassed)
        $util.error(\\"Rating cannot be negative\\")
      #end
    #end
## [End] Validating \\"rating\\" with type \\"gte\\" and value \\"0\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: create comment rating lte validation 1`] = `
"## [Start] Validating \\"rating\\" with type \\"lte\\" and value \\"5\\". **
#if( !$util.isNull($ctx.args.input.rating) )
      #set($validationPassed = $$ctx.args.input.rating <= 5)
      #if(!$validationPassed)
        $util.error(\\"Rating cannot exceed 5\\")
      #end
    #end
## [End] Validating \\"rating\\" with type \\"lte\\" and value \\"5\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: update comment author maxLength validation 1`] = `
"## [Start] Validating \\"author\\" with type \\"maxLength\\" and value \\"20\\". **
#if( !$util.isNull($ctx.args.input.author) )
      #set($validationPassed = $$ctx.args.input.author.length() <= 20)
      #if(!$validationPassed)
        $util.error(\\"Author too long\\")
      #end
    #end
## [End] Validating \\"author\\" with type \\"maxLength\\" and value \\"20\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: update comment author minLength validation 1`] = `
"## [Start] Validating \\"author\\" with type \\"minLength\\" and value \\"3\\". **
#if( !$util.isNull($ctx.args.input.author) )
      #set($validationPassed = $$ctx.args.input.author.length() >= 3)
      #if(!$validationPassed)
        $util.error(\\"Author too short\\")
      #end
    #end
## [End] Validating \\"author\\" with type \\"minLength\\" and value \\"3\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: update comment content maxLength validation 1`] = `
"## [Start] Validating \\"content\\" with type \\"maxLength\\" and value \\"1000\\". **
#if( !$util.isNull($ctx.args.input.content) )
      #set($validationPassed = $$ctx.args.input.content.length() <= 1000)
      #if(!$validationPassed)
        $util.error(\\"Content too long\\")
      #end
    #end
## [End] Validating \\"content\\" with type \\"maxLength\\" and value \\"1000\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: update comment content minLength validation 1`] = `
"## [Start] Validating \\"content\\" with type \\"minLength\\" and value \\"1\\". **
#if( !$util.isNull($ctx.args.input.content) )
      #set($validationPassed = $$ctx.args.input.content.length() >= 1)
      #if(!$validationPassed)
        $util.error(\\"Content cannot be empty\\")
      #end
    #end
## [End] Validating \\"content\\" with type \\"minLength\\" and value \\"1\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: update comment rating gte validation 1`] = `
"## [Start] Validating \\"rating\\" with type \\"gte\\" and value \\"0\\". **
#if( !$util.isNull($ctx.args.input.rating) )
      #set($validationPassed = $$ctx.args.input.rating >= 0)
      #if(!$validationPassed)
        $util.error(\\"Rating cannot be negative\\")
      #end
    #end
## [End] Validating \\"rating\\" with type \\"gte\\" and value \\"0\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple fields: update comment rating lte validation 1`] = `
"## [Start] Validating \\"rating\\" with type \\"lte\\" and value \\"5\\". **
#if( !$util.isNull($ctx.args.input.rating) )
      #set($validationPassed = $$ctx.args.input.rating <= 5)
      #if(!$validationPassed)
        $util.error(\\"Rating cannot exceed 5\\")
      #end
    #end
## [End] Validating \\"rating\\" with type \\"lte\\" and value \\"5\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: create post title endsWith validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"endsWith\\" and value \\"suffix\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.endsWith(\\"suffix\\"))
      #if(!$validationPassed)
        $util.error(\\"Title must end with suffix\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"endsWith\\" and value \\"suffix\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: create post title matches validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"matches\\" and value \\"^[A-Za-z0-9 ]+$\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $util.matches($$ctx.args.input.title, \\"^[A-Za-z0-9 ]+$\\"))
      #if(!$validationPassed)
        $util.error(\\"Title can only contain letters, numbers and spaces\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"matches\\" and value \\"^[A-Za-z0-9 ]+$\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: create post title maxLength validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"maxLength\\" and value \\"100\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.length() <= 100)
      #if(!$validationPassed)
        $util.error(\\"Title too long\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"maxLength\\" and value \\"100\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: create post title minLength validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"minLength\\" and value \\"5\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.length() >= 5)
      #if(!$validationPassed)
        $util.error(\\"Title too short\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"minLength\\" and value \\"5\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: create post title startsWith validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"startsWith\\" and value \\"prefix\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.startsWith(\\"prefix\\"))
      #if(!$validationPassed)
        $util.error(\\"Title must start with prefix\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"startsWith\\" and value \\"prefix\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: update post title endsWith validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"endsWith\\" and value \\"suffix\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.endsWith(\\"suffix\\"))
      #if(!$validationPassed)
        $util.error(\\"Title must end with suffix\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"endsWith\\" and value \\"suffix\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: update post title matches validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"matches\\" and value \\"^[A-Za-z0-9 ]+$\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $util.matches($$ctx.args.input.title, \\"^[A-Za-z0-9 ]+$\\"))
      #if(!$validationPassed)
        $util.error(\\"Title can only contain letters, numbers and spaces\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"matches\\" and value \\"^[A-Za-z0-9 ]+$\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: update post title maxLength validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"maxLength\\" and value \\"100\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.length() <= 100)
      #if(!$validationPassed)
        $util.error(\\"Title too long\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"maxLength\\" and value \\"100\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: update post title minLength validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"minLength\\" and value \\"5\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.length() >= 5)
      #if(!$validationPassed)
        $util.error(\\"Title too short\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"minLength\\" and value \\"5\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for multiple validations on the same field: update post title startsWith validation 1`] = `
"## [Start] Validating \\"title\\" with type \\"startsWith\\" and value \\"prefix\\". **
#if( !$util.isNull($ctx.args.input.title) )
      #set($validationPassed = $$ctx.args.input.title.startsWith(\\"prefix\\"))
      #if(!$validationPassed)
        $util.error(\\"Title must start with prefix\\")
      #end
    #end
## [End] Validating \\"title\\" with type \\"startsWith\\" and value \\"prefix\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: create product price gt validation 1`] = `
"## [Start] Validating \\"price\\" with type \\"gt\\" and value \\"0\\". **
#if( !$util.isNull($ctx.args.input.price) )
      #set($validationPassed = $$ctx.args.input.price > 0)
      #if(!$validationPassed)
        $util.error(\\"Price must be positive\\")
      #end
    #end
## [End] Validating \\"price\\" with type \\"gt\\" and value \\"0\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: create product price lt validation 1`] = `
"## [Start] Validating \\"price\\" with type \\"lt\\" and value \\"1000000\\". **
#if( !$util.isNull($ctx.args.input.price) )
      #set($validationPassed = $$ctx.args.input.price < 1000000)
      #if(!$validationPassed)
        $util.error(\\"Price must be less than 1,000,000\\")
      #end
    #end
## [End] Validating \\"price\\" with type \\"lt\\" and value \\"1000000\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: create product quantity gte validation 1`] = `
"## [Start] Validating \\"quantity\\" with type \\"gte\\" and value \\"0\\". **
#if( !$util.isNull($ctx.args.input.quantity) )
      #set($validationPassed = $$ctx.args.input.quantity >= 0)
      #if(!$validationPassed)
        $util.error(\\"Quantity cannot be negative\\")
      #end
    #end
## [End] Validating \\"quantity\\" with type \\"gte\\" and value \\"0\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: create product quantity lte validation 1`] = `
"## [Start] Validating \\"quantity\\" with type \\"lte\\" and value \\"100\\". **
#if( !$util.isNull($ctx.args.input.quantity) )
      #set($validationPassed = $$ctx.args.input.quantity <= 100)
      #if(!$validationPassed)
        $util.error(\\"Quantity cannot exceed 100\\")
      #end
    #end
## [End] Validating \\"quantity\\" with type \\"lte\\" and value \\"100\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: update product price gt validation 1`] = `
"## [Start] Validating \\"price\\" with type \\"gt\\" and value \\"0\\". **
#if( !$util.isNull($ctx.args.input.price) )
      #set($validationPassed = $$ctx.args.input.price > 0)
      #if(!$validationPassed)
        $util.error(\\"Price must be positive\\")
      #end
    #end
## [End] Validating \\"price\\" with type \\"gt\\" and value \\"0\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: update product price lt validation 1`] = `
"## [Start] Validating \\"price\\" with type \\"lt\\" and value \\"1000000\\". **
#if( !$util.isNull($ctx.args.input.price) )
      #set($validationPassed = $$ctx.args.input.price < 1000000)
      #if(!$validationPassed)
        $util.error(\\"Price must be less than 1,000,000\\")
      #end
    #end
## [End] Validating \\"price\\" with type \\"lt\\" and value \\"1000000\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: update product quantity gte validation 1`] = `
"## [Start] Validating \\"quantity\\" with type \\"gte\\" and value \\"0\\". **
#if( !$util.isNull($ctx.args.input.quantity) )
      #set($validationPassed = $$ctx.args.input.quantity >= 0)
      #if(!$validationPassed)
        $util.error(\\"Quantity cannot be negative\\")
      #end
    #end
## [End] Validating \\"quantity\\" with type \\"gte\\" and value \\"0\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for numeric validations: update product quantity lte validation 1`] = `
"## [Start] Validating \\"quantity\\" with type \\"lte\\" and value \\"100\\". **
#if( !$util.isNull($ctx.args.input.quantity) )
      #set($validationPassed = $$ctx.args.input.quantity <= 100)
      #if(!$validationPassed)
        $util.error(\\"Quantity cannot exceed 100\\")
      #end
    #end
## [End] Validating \\"quantity\\" with type \\"lte\\" and value \\"100\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: create user email matches validation 1`] = `
"## [Start] Validating \\"email\\" with type \\"matches\\" and value \\"^[A-Za-z0-9+_.-]+@(.+)$\\". **
#if( !$util.isNull($ctx.args.input.email) )
      #set($validationPassed = $util.matches($$ctx.args.input.email, \\"^[A-Za-z0-9+_.-]+@(.+)$\\"))
      #if(!$validationPassed)
        $util.error(\\"Invalid email format\\")
      #end
    #end
## [End] Validating \\"email\\" with type \\"matches\\" and value \\"^[A-Za-z0-9+_.-]+@(.+)$\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: create user url endsWith validation 1`] = `
"## [Start] Validating \\"url\\" with type \\"endsWith\\" and value \\".com\\". **
#if( !$util.isNull($ctx.args.input.url) )
      #set($validationPassed = $$ctx.args.input.url.endsWith(\\".com\\"))
      #if(!$validationPassed)
        $util.error(\\"URL must end with .com\\")
      #end
    #end
## [End] Validating \\"url\\" with type \\"endsWith\\" and value \\".com\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: create user url startsWith validation 1`] = `
"## [Start] Validating \\"url\\" with type \\"startsWith\\" and value \\"https://\\". **
#if( !$util.isNull($ctx.args.input.url) )
      #set($validationPassed = $$ctx.args.input.url.startsWith(\\"https://\\"))
      #if(!$validationPassed)
        $util.error(\\"URL must start with https://\\")
      #end
    #end
## [End] Validating \\"url\\" with type \\"startsWith\\" and value \\"https://\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: create user username maxLength validation 1`] = `
"## [Start] Validating \\"username\\" with type \\"maxLength\\" and value \\"20\\". **
#if( !$util.isNull($ctx.args.input.username) )
      #set($validationPassed = $$ctx.args.input.username.length() <= 20)
      #if(!$validationPassed)
        $util.error(\\"Username too long\\")
      #end
    #end
## [End] Validating \\"username\\" with type \\"maxLength\\" and value \\"20\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: create user username minLength validation 1`] = `
"## [Start] Validating \\"username\\" with type \\"minLength\\" and value \\"3\\". **
#if( !$util.isNull($ctx.args.input.username) )
      #set($validationPassed = $$ctx.args.input.username.length() >= 3)
      #if(!$validationPassed)
        $util.error(\\"Username too short\\")
      #end
    #end
## [End] Validating \\"username\\" with type \\"minLength\\" and value \\"3\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: update user email matches validation 1`] = `
"## [Start] Validating \\"email\\" with type \\"matches\\" and value \\"^[A-Za-z0-9+_.-]+@(.+)$\\". **
#if( !$util.isNull($ctx.args.input.email) )
      #set($validationPassed = $util.matches($$ctx.args.input.email, \\"^[A-Za-z0-9+_.-]+@(.+)$\\"))
      #if(!$validationPassed)
        $util.error(\\"Invalid email format\\")
      #end
    #end
## [End] Validating \\"email\\" with type \\"matches\\" and value \\"^[A-Za-z0-9+_.-]+@(.+)$\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: update user url endsWith validation 1`] = `
"## [Start] Validating \\"url\\" with type \\"endsWith\\" and value \\".com\\". **
#if( !$util.isNull($ctx.args.input.url) )
      #set($validationPassed = $$ctx.args.input.url.endsWith(\\".com\\"))
      #if(!$validationPassed)
        $util.error(\\"URL must end with .com\\")
      #end
    #end
## [End] Validating \\"url\\" with type \\"endsWith\\" and value \\".com\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: update user url startsWith validation 1`] = `
"## [Start] Validating \\"url\\" with type \\"startsWith\\" and value \\"https://\\". **
#if( !$util.isNull($ctx.args.input.url) )
      #set($validationPassed = $$ctx.args.input.url.startsWith(\\"https://\\"))
      #if(!$validationPassed)
        $util.error(\\"URL must start with https://\\")
      #end
    #end
## [End] Validating \\"url\\" with type \\"startsWith\\" and value \\"https://\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: update user username maxLength validation 1`] = `
"## [Start] Validating \\"username\\" with type \\"maxLength\\" and value \\"20\\". **
#if( !$util.isNull($ctx.args.input.username) )
      #set($validationPassed = $$ctx.args.input.username.length() <= 20)
      #if(!$validationPassed)
        $util.error(\\"Username too long\\")
      #end
    #end
## [End] Validating \\"username\\" with type \\"maxLength\\" and value \\"20\\". **"
`;

exports[`ValidateTransformer should generate correct validation resolvers for string validations: update user username minLength validation 1`] = `
"## [Start] Validating \\"username\\" with type \\"minLength\\" and value \\"3\\". **
#if( !$util.isNull($ctx.args.input.username) )
      #set($validationPassed = $$ctx.args.input.username.length() >= 3)
      #if(!$validationPassed)
        $util.error(\\"Username too short\\")
      #end
    #end
## [End] Validating \\"username\\" with type \\"minLength\\" and value \\"3\\". **"
`;
