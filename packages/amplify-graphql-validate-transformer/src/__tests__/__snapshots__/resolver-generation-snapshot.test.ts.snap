// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for multiple fields: create comment combined validations 1`] = `
"## [Start] Validations for type Comment. **

## [Start] Validations for field content. **
#if(!$util.isNull($ctx.args.input.content) )
  #set($minLengthValidationPassed = $ctx.args.input.content.length() >= 1)
  #if(!$minLengthValidationPassed)
    $util.error('Content cannot be empty')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.content.length() <= 1000)
  #if(!$maxLengthValidationPassed)
    $util.error('Content too long')
  #end
#end
## [End] Validations for field content. **

## [Start] Validations for field author. **
#if(!$util.isNull($ctx.args.input.author) )
  #set($minLengthValidationPassed = $ctx.args.input.author.length() >= 3)
  #if(!$minLengthValidationPassed)
    $util.error('Author too short')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.author.length() <= 20)
  #if(!$maxLengthValidationPassed)
    $util.error('Author too long')
  #end
#end
## [End] Validations for field author. **

## [Start] Validations for field rating. **
#if(!$util.isNull($ctx.args.input.rating) )
  #set($gteValidationPassed = $ctx.args.input.rating >= 0)
  #if(!$gteValidationPassed)
    $util.error('Rating cannot be negative')
  #end
  #set($lteValidationPassed = $ctx.args.input.rating <= 5)
  #if(!$lteValidationPassed)
    $util.error('Rating cannot exceed 5')
  #end
#end
## [End] Validations for field rating. **

## [End] Validations for type Comment. **

$util.toJson({})"
`;

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for multiple fields: update comment combined validations 1`] = `
"## [Start] Validations for type Comment. **

## [Start] Validations for field content. **
#if(!$util.isNull($ctx.args.input.content) )
  #set($minLengthValidationPassed = $ctx.args.input.content.length() >= 1)
  #if(!$minLengthValidationPassed)
    $util.error('Content cannot be empty')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.content.length() <= 1000)
  #if(!$maxLengthValidationPassed)
    $util.error('Content too long')
  #end
#end
## [End] Validations for field content. **

## [Start] Validations for field author. **
#if(!$util.isNull($ctx.args.input.author) )
  #set($minLengthValidationPassed = $ctx.args.input.author.length() >= 3)
  #if(!$minLengthValidationPassed)
    $util.error('Author too short')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.author.length() <= 20)
  #if(!$maxLengthValidationPassed)
    $util.error('Author too long')
  #end
#end
## [End] Validations for field author. **

## [Start] Validations for field rating. **
#if(!$util.isNull($ctx.args.input.rating) )
  #set($gteValidationPassed = $ctx.args.input.rating >= 0)
  #if(!$gteValidationPassed)
    $util.error('Rating cannot be negative')
  #end
  #set($lteValidationPassed = $ctx.args.input.rating <= 5)
  #if(!$lteValidationPassed)
    $util.error('Rating cannot exceed 5')
  #end
#end
## [End] Validations for field rating. **

## [End] Validations for type Comment. **

$util.toJson({})"
`;

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for multiple validations on the same field: create post combined validations 1`] = `
"## [Start] Validations for type Post. **

## [Start] Validations for field title. **
#if(!$util.isNull($ctx.args.input.title) )
  #set($minLengthValidationPassed = $ctx.args.input.title.length() >= 5)
  #if(!$minLengthValidationPassed)
    $util.error('Title too short')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.title.length() <= 100)
  #if(!$maxLengthValidationPassed)
    $util.error('Title too long')
  #end
  #set($startsWithValidationPassed = $ctx.args.input.title.startsWith('prefix'))
  #if(!$startsWithValidationPassed)
    $util.error('Title must start with prefix')
  #end
  #set($endsWithValidationPassed = $ctx.args.input.title.endsWith('suffix'))
  #if(!$endsWithValidationPassed)
    $util.error('Title must end with suffix')
  #end
  #set($matchesValidationPassed = $util.matches('^[A-Za-z0-9 ]+$', $ctx.args.input.title))
  #if(!$matchesValidationPassed)
    $util.error('Title can only contain letters, numbers and spaces')
  #end
#end
## [End] Validations for field title. **

## [End] Validations for type Post. **

$util.toJson({})"
`;

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for multiple validations on the same field: update post combined validations 1`] = `
"## [Start] Validations for type Post. **

## [Start] Validations for field title. **
#if(!$util.isNull($ctx.args.input.title) )
  #set($minLengthValidationPassed = $ctx.args.input.title.length() >= 5)
  #if(!$minLengthValidationPassed)
    $util.error('Title too short')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.title.length() <= 100)
  #if(!$maxLengthValidationPassed)
    $util.error('Title too long')
  #end
  #set($startsWithValidationPassed = $ctx.args.input.title.startsWith('prefix'))
  #if(!$startsWithValidationPassed)
    $util.error('Title must start with prefix')
  #end
  #set($endsWithValidationPassed = $ctx.args.input.title.endsWith('suffix'))
  #if(!$endsWithValidationPassed)
    $util.error('Title must end with suffix')
  #end
  #set($matchesValidationPassed = $util.matches('^[A-Za-z0-9 ]+$', $ctx.args.input.title))
  #if(!$matchesValidationPassed)
    $util.error('Title can only contain letters, numbers and spaces')
  #end
#end
## [End] Validations for field title. **

## [End] Validations for type Post. **

$util.toJson({})"
`;

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for numeric validations: create product combined validations 1`] = `
"## [Start] Validations for type Product. **

## [Start] Validations for field price. **
#if(!$util.isNull($ctx.args.input.price) )
  #set($gtValidationPassed = $ctx.args.input.price > 0)
  #if(!$gtValidationPassed)
    $util.error('Price must be positive')
  #end
  #set($ltValidationPassed = $ctx.args.input.price < 1000000)
  #if(!$ltValidationPassed)
    $util.error('Price must be less than 1,000,000')
  #end
#end
## [End] Validations for field price. **

## [Start] Validations for field quantity. **
#if(!$util.isNull($ctx.args.input.quantity) )
  #set($gteValidationPassed = $ctx.args.input.quantity >= 0)
  #if(!$gteValidationPassed)
    $util.error('Quantity cannot be negative')
  #end
  #set($lteValidationPassed = $ctx.args.input.quantity <= 100)
  #if(!$lteValidationPassed)
    $util.error('Quantity cannot exceed 100')
  #end
#end
## [End] Validations for field quantity. **

## [End] Validations for type Product. **

$util.toJson({})"
`;

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for numeric validations: update product combined validations 1`] = `
"## [Start] Validations for type Product. **

## [Start] Validations for field price. **
#if(!$util.isNull($ctx.args.input.price) )
  #set($gtValidationPassed = $ctx.args.input.price > 0)
  #if(!$gtValidationPassed)
    $util.error('Price must be positive')
  #end
  #set($ltValidationPassed = $ctx.args.input.price < 1000000)
  #if(!$ltValidationPassed)
    $util.error('Price must be less than 1,000,000')
  #end
#end
## [End] Validations for field price. **

## [Start] Validations for field quantity. **
#if(!$util.isNull($ctx.args.input.quantity) )
  #set($gteValidationPassed = $ctx.args.input.quantity >= 0)
  #if(!$gteValidationPassed)
    $util.error('Quantity cannot be negative')
  #end
  #set($lteValidationPassed = $ctx.args.input.quantity <= 100)
  #if(!$lteValidationPassed)
    $util.error('Quantity cannot exceed 100')
  #end
#end
## [End] Validations for field quantity. **

## [End] Validations for type Product. **

$util.toJson({})"
`;

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for string validations: create user combined validations 1`] = `
"## [Start] Validations for type User. **

## [Start] Validations for field email. **
#if(!$util.isNull($ctx.args.input.email) )
  #set($matchesValidationPassed = $util.matches('^[A-Za-z0-9+_.-]+@(.+)$', $ctx.args.input.email))
  #if(!$matchesValidationPassed)
    $util.error('Invalid email format')
  #end
#end
## [End] Validations for field email. **

## [Start] Validations for field username. **
#if(!$util.isNull($ctx.args.input.username) )
  #set($minLengthValidationPassed = $ctx.args.input.username.length() >= 3)
  #if(!$minLengthValidationPassed)
    $util.error('Username too short')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.username.length() <= 20)
  #if(!$maxLengthValidationPassed)
    $util.error('Username too long')
  #end
#end
## [End] Validations for field username. **

## [Start] Validations for field url. **
#if(!$util.isNull($ctx.args.input.url) )
  #set($startsWithValidationPassed = $ctx.args.input.url.startsWith('https://'))
  #if(!$startsWithValidationPassed)
    $util.error('URL must start with https://')
  #end
  #set($endsWithValidationPassed = $ctx.args.input.url.endsWith('.com'))
  #if(!$endsWithValidationPassed)
    $util.error('URL must end with .com')
  #end
#end
## [End] Validations for field url. **

## [End] Validations for type User. **

$util.toJson({})"
`;

exports[`Resolver Generation Snapshot should generate correct combined validation resolver for string validations: update user combined validations 1`] = `
"## [Start] Validations for type User. **

## [Start] Validations for field email. **
#if(!$util.isNull($ctx.args.input.email) )
  #set($matchesValidationPassed = $util.matches('^[A-Za-z0-9+_.-]+@(.+)$', $ctx.args.input.email))
  #if(!$matchesValidationPassed)
    $util.error('Invalid email format')
  #end
#end
## [End] Validations for field email. **

## [Start] Validations for field username. **
#if(!$util.isNull($ctx.args.input.username) )
  #set($minLengthValidationPassed = $ctx.args.input.username.length() >= 3)
  #if(!$minLengthValidationPassed)
    $util.error('Username too short')
  #end
  #set($maxLengthValidationPassed = $ctx.args.input.username.length() <= 20)
  #if(!$maxLengthValidationPassed)
    $util.error('Username too long')
  #end
#end
## [End] Validations for field username. **

## [Start] Validations for field url. **
#if(!$util.isNull($ctx.args.input.url) )
  #set($startsWithValidationPassed = $ctx.args.input.url.startsWith('https://'))
  #if(!$startsWithValidationPassed)
    $util.error('URL must start with https://')
  #end
  #set($endsWithValidationPassed = $ctx.args.input.url.endsWith('.com'))
  #if(!$endsWithValidationPassed)
    $util.error('URL must end with .com')
  #end
#end
## [End] Validations for field url. **

## [End] Validations for type User. **

$util.toJson({})"
`;
