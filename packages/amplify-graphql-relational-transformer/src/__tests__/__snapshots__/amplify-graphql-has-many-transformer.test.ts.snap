// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`many to many query 1`] = `
Object {
  "definitions": Array [
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 21,
            "start": 14,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 16,
              "start": 14,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 21,
              "start": 18,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 20,
                "start": 18,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 20,
                  "start": 18,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 38,
            "start": 24,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 29,
              "start": 24,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 38,
              "start": 31,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 37,
                "start": 31,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 37,
                  "start": 31,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 83,
                "start": 49,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 57,
                  "start": 49,
                },
                "value": "editorID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 83,
                  "start": 59,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 83,
                    "start": 59,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 119,
                "start": 85,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 91,
                  "start": 85,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 119,
                  "start": 93,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 119,
                    "start": 93,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 154,
                "start": 121,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 134,
                  "start": 121,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 154,
                  "start": 136,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 154,
                    "start": 136,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 166,
                "start": 156,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 161,
                  "start": 156,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 166,
                  "start": 163,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 166,
                    "start": 163,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 185,
                "start": 168,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 177,
                  "start": 168,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 185,
                  "start": 179,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 185,
                    "start": 179,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 213,
            "start": 41,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 48,
              "start": 41,
            },
            "value": "editors",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 213,
              "start": 188,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 213,
                "start": 188,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 239,
            "start": 216,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 225,
              "start": 216,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 239,
              "start": 227,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 238,
                "start": 227,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 238,
                  "start": 227,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 265,
            "start": 242,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 251,
              "start": 242,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 265,
              "start": 253,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 264,
                "start": 253,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 264,
                  "start": 253,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 267,
        "start": 0,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 9,
          "start": 5,
        },
        "value": "Post",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 296,
            "start": 289,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 291,
              "start": 289,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 296,
              "start": 293,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 295,
                "start": 293,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 295,
                  "start": 293,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 310,
            "start": 299,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 305,
              "start": 299,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 310,
              "start": 307,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 309,
                "start": 307,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 309,
                  "start": 307,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 326,
            "start": 313,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 321,
              "start": 313,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 326,
              "start": 323,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 325,
                "start": 323,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 325,
                  "start": 323,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 340,
            "start": 329,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 333,
              "start": 329,
            },
            "value": "post",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 340,
              "start": 335,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 339,
                "start": 335,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 339,
                  "start": 335,
                },
                "value": "Post",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 356,
            "start": 343,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 349,
              "start": 343,
            },
            "value": "editor",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 356,
              "start": 351,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 355,
                "start": 351,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 355,
                  "start": 351,
                },
                "value": "User",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 382,
            "start": 359,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 368,
              "start": 359,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 382,
              "start": 370,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 381,
                "start": 370,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 381,
                  "start": 370,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 408,
            "start": 385,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 394,
              "start": 385,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 408,
              "start": 396,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 407,
                "start": 396,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 407,
                  "start": 396,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 410,
        "start": 269,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 284,
          "start": 274,
        },
        "value": "PostEditor",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 433,
            "start": 426,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 428,
              "start": 426,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 433,
              "start": 430,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 432,
                "start": 430,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 432,
                  "start": 430,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 453,
            "start": 436,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 444,
              "start": 436,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 453,
              "start": 446,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 452,
                "start": 446,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 452,
                  "start": 446,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 494,
                "start": 462,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 468,
                  "start": 462,
                },
                "value": "postID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 494,
                  "start": 470,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 494,
                    "start": 470,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 530,
                "start": 496,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 502,
                  "start": 496,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 530,
                  "start": 504,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 530,
                    "start": 504,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 565,
                "start": 532,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 545,
                  "start": 532,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 565,
                  "start": 547,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 565,
                    "start": 547,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 577,
                "start": 567,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 572,
                  "start": 567,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 577,
                  "start": 574,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 577,
                    "start": 574,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 596,
                "start": 579,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 588,
                  "start": 579,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 596,
                  "start": 590,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 596,
                    "start": 590,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 624,
            "start": 456,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 461,
              "start": 456,
            },
            "value": "posts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 624,
              "start": 599,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 624,
                "start": 599,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 650,
            "start": 627,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 636,
              "start": 627,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 650,
              "start": 638,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 649,
                "start": 638,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 649,
                  "start": 638,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 676,
            "start": 653,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 662,
              "start": 653,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 676,
              "start": 664,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 675,
                "start": 664,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 675,
                  "start": 664,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 678,
        "start": 412,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 421,
          "start": 417,
        },
        "value": "User",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 717,
            "start": 707,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 709,
              "start": 707,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 717,
              "start": 711,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 717,
                "start": 711,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 730,
            "start": 720,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 722,
              "start": 720,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 730,
              "start": 724,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 730,
                "start": 724,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 743,
            "start": 733,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 735,
              "start": 733,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 743,
              "start": 737,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 743,
                "start": 737,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 756,
            "start": 746,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 748,
              "start": 746,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 756,
              "start": 750,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 756,
                "start": 750,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 769,
            "start": 759,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 761,
              "start": 759,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 769,
              "start": 763,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 769,
                "start": 763,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 782,
            "start": 772,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 774,
              "start": 772,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 782,
              "start": 776,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 782,
                "start": 776,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 801,
            "start": 785,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 793,
              "start": 785,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 801,
              "start": 795,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 801,
                "start": 795,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 823,
            "start": 804,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 815,
              "start": 804,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 823,
              "start": 817,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 823,
                "start": 817,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 843,
            "start": 826,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 833,
              "start": 826,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 843,
              "start": 835,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 842,
                "start": 836,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 842,
                  "start": 836,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 864,
            "start": 846,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 856,
              "start": 846,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 864,
              "start": 858,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 864,
                "start": 858,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 891,
            "start": 867,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 882,
              "start": 867,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 891,
              "start": 884,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 891,
                "start": 884,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 928,
            "start": 894,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 907,
              "start": 894,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 928,
              "start": 909,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 928,
                "start": 909,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 951,
            "start": 931,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 935,
              "start": 931,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 951,
              "start": 937,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 951,
                "start": 937,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 953,
        "start": 680,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 702,
          "start": 686,
        },
        "value": "ModelStringInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 986,
            "start": 979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 981,
              "start": 979,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 986,
              "start": 983,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 986,
                "start": 983,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 996,
            "start": 989,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 991,
              "start": 989,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 996,
              "start": 993,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 996,
                "start": 993,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1006,
            "start": 999,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1001,
              "start": 999,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1006,
              "start": 1003,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1006,
                "start": 1003,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1016,
            "start": 1009,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1011,
              "start": 1009,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1016,
              "start": 1013,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1016,
                "start": 1013,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1026,
            "start": 1019,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1021,
              "start": 1019,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1026,
              "start": 1023,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1026,
                "start": 1023,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1036,
            "start": 1029,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1031,
              "start": 1029,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1036,
              "start": 1033,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1036,
                "start": 1033,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1053,
            "start": 1039,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1046,
              "start": 1039,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1053,
              "start": 1048,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1052,
                "start": 1049,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1052,
                  "start": 1049,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1080,
            "start": 1056,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1071,
              "start": 1056,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1080,
              "start": 1073,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1080,
                "start": 1073,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1117,
            "start": 1083,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1096,
              "start": 1083,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1117,
              "start": 1098,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1117,
                "start": 1098,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1119,
        "start": 955,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 974,
          "start": 961,
        },
        "value": "ModelIntInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1156,
            "start": 1147,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1149,
              "start": 1147,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1156,
              "start": 1151,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1156,
                "start": 1151,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1168,
            "start": 1159,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1161,
              "start": 1159,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1168,
              "start": 1163,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1168,
                "start": 1163,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1180,
            "start": 1171,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1173,
              "start": 1171,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1180,
              "start": 1175,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1180,
                "start": 1175,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1192,
            "start": 1183,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1185,
              "start": 1183,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1192,
              "start": 1187,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1192,
                "start": 1187,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1204,
            "start": 1195,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1197,
              "start": 1195,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1204,
              "start": 1199,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1204,
                "start": 1199,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1216,
            "start": 1207,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1209,
              "start": 1207,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1216,
              "start": 1211,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1216,
                "start": 1211,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1235,
            "start": 1219,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1226,
              "start": 1219,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1235,
              "start": 1228,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1234,
                "start": 1229,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1234,
                  "start": 1229,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1262,
            "start": 1238,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1253,
              "start": 1238,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1262,
              "start": 1255,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1262,
                "start": 1255,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1299,
            "start": 1265,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1278,
              "start": 1265,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1299,
              "start": 1280,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1299,
                "start": 1280,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1301,
        "start": 1121,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1142,
          "start": 1127,
        },
        "value": "ModelFloatInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1342,
            "start": 1331,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1333,
              "start": 1331,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1342,
              "start": 1335,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1342,
                "start": 1335,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1356,
            "start": 1345,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1347,
              "start": 1345,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1356,
              "start": 1349,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1356,
                "start": 1349,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1383,
            "start": 1359,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1374,
              "start": 1359,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1383,
              "start": 1376,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1383,
                "start": 1376,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1420,
            "start": 1386,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1399,
              "start": 1386,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1420,
              "start": 1401,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1420,
                "start": 1401,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1422,
        "start": 1303,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1326,
          "start": 1309,
        },
        "value": "ModelBooleanInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1453,
            "start": 1447,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1449,
              "start": 1447,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1453,
              "start": 1451,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1453,
                "start": 1451,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1462,
            "start": 1456,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1458,
              "start": 1456,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1462,
              "start": 1460,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1462,
                "start": 1460,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1471,
            "start": 1465,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1467,
              "start": 1465,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1471,
              "start": 1469,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1471,
                "start": 1469,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1480,
            "start": 1474,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1476,
              "start": 1474,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1480,
              "start": 1478,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1480,
                "start": 1478,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1489,
            "start": 1483,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1485,
              "start": 1483,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1489,
              "start": 1487,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1489,
                "start": 1487,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1498,
            "start": 1492,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1494,
              "start": 1492,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1498,
              "start": 1496,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1498,
                "start": 1496,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1513,
            "start": 1501,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1509,
              "start": 1501,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1513,
              "start": 1511,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1513,
                "start": 1511,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1531,
            "start": 1516,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1527,
              "start": 1516,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1531,
              "start": 1529,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1531,
                "start": 1529,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1547,
            "start": 1534,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1541,
              "start": 1534,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1547,
              "start": 1543,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1546,
                "start": 1544,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1546,
                  "start": 1544,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1564,
            "start": 1550,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1560,
              "start": 1550,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1564,
              "start": 1562,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1564,
                "start": 1562,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1591,
            "start": 1567,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1582,
              "start": 1567,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1591,
              "start": 1584,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1591,
                "start": 1584,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1628,
            "start": 1594,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1607,
              "start": 1594,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1628,
              "start": 1609,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1628,
                "start": 1609,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1651,
            "start": 1631,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1635,
              "start": 1631,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1651,
              "start": 1637,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1651,
                "start": 1637,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1653,
        "start": 1424,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1442,
          "start": 1430,
        },
        "value": "ModelIDInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1704,
            "start": 1694,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1696,
              "start": 1694,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1704,
              "start": 1698,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1704,
                "start": 1698,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1717,
            "start": 1707,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1709,
              "start": 1707,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1717,
              "start": 1711,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1717,
                "start": 1711,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1730,
            "start": 1720,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1722,
              "start": 1720,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1730,
              "start": 1724,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1730,
                "start": 1724,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1743,
            "start": 1733,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1735,
              "start": 1733,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1743,
              "start": 1737,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1743,
                "start": 1737,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1756,
            "start": 1746,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1748,
              "start": 1746,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1756,
              "start": 1750,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1756,
                "start": 1750,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1769,
            "start": 1759,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1761,
              "start": 1759,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1769,
              "start": 1763,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1769,
                "start": 1763,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1788,
            "start": 1772,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1780,
              "start": 1772,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1788,
              "start": 1782,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1788,
                "start": 1782,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1810,
            "start": 1791,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1802,
              "start": 1791,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1810,
              "start": 1804,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1810,
                "start": 1804,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1830,
            "start": 1813,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1820,
              "start": 1813,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1830,
              "start": 1822,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1829,
                "start": 1823,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1829,
                  "start": 1823,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1851,
            "start": 1833,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1843,
              "start": 1833,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1851,
              "start": 1845,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1851,
                "start": 1845,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1866,
            "start": 1854,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1856,
              "start": 1854,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1866,
              "start": 1858,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1865,
                "start": 1859,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1865,
                  "start": 1859,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1884,
            "start": 1869,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1874,
              "start": 1869,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1884,
              "start": 1876,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1883,
                "start": 1877,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1883,
                  "start": 1877,
                },
                "value": "String",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1886,
        "start": 1655,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1689,
          "start": 1661,
        },
        "value": "ModelSubscriptionStringInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1931,
            "start": 1924,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1926,
              "start": 1924,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1931,
              "start": 1928,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1931,
                "start": 1928,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1941,
            "start": 1934,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1936,
              "start": 1934,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1941,
              "start": 1938,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1941,
                "start": 1938,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1951,
            "start": 1944,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1946,
              "start": 1944,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1951,
              "start": 1948,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1951,
                "start": 1948,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1961,
            "start": 1954,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1956,
              "start": 1954,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1961,
              "start": 1958,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1961,
                "start": 1958,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1971,
            "start": 1964,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1966,
              "start": 1964,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1971,
              "start": 1968,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1971,
                "start": 1968,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1981,
            "start": 1974,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1976,
              "start": 1974,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1981,
              "start": 1978,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1981,
                "start": 1978,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1998,
            "start": 1984,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1991,
              "start": 1984,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1998,
              "start": 1993,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1997,
                "start": 1994,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1997,
                  "start": 1994,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2010,
            "start": 2001,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2003,
              "start": 2001,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2010,
              "start": 2005,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2009,
                "start": 2006,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2009,
                  "start": 2006,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2025,
            "start": 2013,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2018,
              "start": 2013,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2025,
              "start": 2020,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2024,
                "start": 2021,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2024,
                  "start": 2021,
                },
                "value": "Int",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2027,
        "start": 1888,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1919,
          "start": 1894,
        },
        "value": "ModelSubscriptionIntInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2076,
            "start": 2067,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2069,
              "start": 2067,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2076,
              "start": 2071,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2076,
                "start": 2071,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2088,
            "start": 2079,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2081,
              "start": 2079,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2088,
              "start": 2083,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2088,
                "start": 2083,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2100,
            "start": 2091,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2093,
              "start": 2091,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2100,
              "start": 2095,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2100,
                "start": 2095,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2112,
            "start": 2103,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2105,
              "start": 2103,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2112,
              "start": 2107,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2112,
                "start": 2107,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2124,
            "start": 2115,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2117,
              "start": 2115,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2124,
              "start": 2119,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2124,
                "start": 2119,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2136,
            "start": 2127,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2129,
              "start": 2127,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2136,
              "start": 2131,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2136,
                "start": 2131,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2155,
            "start": 2139,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2146,
              "start": 2139,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2155,
              "start": 2148,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2154,
                "start": 2149,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2154,
                  "start": 2149,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2169,
            "start": 2158,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2160,
              "start": 2158,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2169,
              "start": 2162,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2168,
                "start": 2163,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2168,
                  "start": 2163,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2186,
            "start": 2172,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2177,
              "start": 2172,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2186,
              "start": 2179,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2185,
                "start": 2180,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2185,
                  "start": 2180,
                },
                "value": "Float",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2188,
        "start": 2029,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2062,
          "start": 2035,
        },
        "value": "ModelSubscriptionFloatInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2241,
            "start": 2230,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2232,
              "start": 2230,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2241,
              "start": 2234,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2241,
                "start": 2234,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2255,
            "start": 2244,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2246,
              "start": 2244,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2255,
              "start": 2248,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2255,
                "start": 2248,
              },
              "value": "Boolean",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2257,
        "start": 2190,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2225,
          "start": 2196,
        },
        "value": "ModelSubscriptionBooleanInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2300,
            "start": 2294,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2296,
              "start": 2294,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2300,
              "start": 2298,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2300,
                "start": 2298,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2309,
            "start": 2303,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2305,
              "start": 2303,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2309,
              "start": 2307,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2309,
                "start": 2307,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2318,
            "start": 2312,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2314,
              "start": 2312,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2318,
              "start": 2316,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2318,
                "start": 2316,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2327,
            "start": 2321,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2323,
              "start": 2321,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2327,
              "start": 2325,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2327,
                "start": 2325,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2336,
            "start": 2330,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2332,
              "start": 2330,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2336,
              "start": 2334,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2336,
                "start": 2334,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2345,
            "start": 2339,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2341,
              "start": 2339,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2345,
              "start": 2343,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2345,
                "start": 2343,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2360,
            "start": 2348,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2356,
              "start": 2348,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2360,
              "start": 2358,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2360,
                "start": 2358,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2378,
            "start": 2363,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2374,
              "start": 2363,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2378,
              "start": 2376,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2378,
                "start": 2376,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2394,
            "start": 2381,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2388,
              "start": 2381,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2394,
              "start": 2390,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2393,
                "start": 2391,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2393,
                  "start": 2391,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2411,
            "start": 2397,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2407,
              "start": 2397,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2411,
              "start": 2409,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2411,
                "start": 2409,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2422,
            "start": 2414,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2416,
              "start": 2414,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2422,
              "start": 2418,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2421,
                "start": 2419,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2421,
                  "start": 2419,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2436,
            "start": 2425,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2430,
              "start": 2425,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2436,
              "start": 2432,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2435,
                "start": 2433,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2435,
                  "start": 2433,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2438,
        "start": 2259,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2289,
          "start": 2265,
        },
        "value": "ModelSubscriptionIDInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 2559,
        "start": 2440,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2464,
          "start": 2445,
        },
        "value": "ModelAttributeTypes",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2475,
            "start": 2469,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2475,
              "start": 2469,
            },
            "value": "binary",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2487,
            "start": 2478,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2487,
              "start": 2478,
            },
            "value": "binarySet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2494,
            "start": 2490,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2494,
              "start": 2490,
            },
            "value": "bool",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2501,
            "start": 2497,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2501,
              "start": 2497,
            },
            "value": "list",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2507,
            "start": 2504,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2507,
              "start": 2504,
            },
            "value": "map",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2516,
            "start": 2510,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2516,
              "start": 2510,
            },
            "value": "number",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2528,
            "start": 2519,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2528,
              "start": 2519,
            },
            "value": "numberSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2537,
            "start": 2531,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2537,
              "start": 2531,
            },
            "value": "string",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2549,
            "start": 2540,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2549,
              "start": 2540,
            },
            "value": "stringSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2557,
            "start": 2552,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2557,
              "start": 2552,
            },
            "value": "_null",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2593,
            "start": 2586,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2588,
              "start": 2586,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2593,
              "start": 2590,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2593,
                "start": 2590,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2603,
            "start": 2596,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2598,
              "start": 2596,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2603,
              "start": 2600,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2603,
                "start": 2600,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2613,
            "start": 2606,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2608,
              "start": 2606,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2613,
              "start": 2610,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2613,
                "start": 2610,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2623,
            "start": 2616,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2618,
              "start": 2616,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2623,
              "start": 2620,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2623,
                "start": 2620,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2633,
            "start": 2626,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2628,
              "start": 2626,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2633,
              "start": 2630,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2633,
                "start": 2630,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2643,
            "start": 2636,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2638,
              "start": 2636,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2643,
              "start": 2640,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2643,
                "start": 2640,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2660,
            "start": 2646,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2653,
              "start": 2646,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2660,
              "start": 2655,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2659,
                "start": 2656,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2659,
                  "start": 2656,
                },
                "value": "Int",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2662,
        "start": 2561,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2581,
          "start": 2567,
        },
        "value": "ModelSizeInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 2704,
        "start": 2664,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2687,
          "start": 2669,
        },
        "value": "ModelSortDirection",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2695,
            "start": 2692,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2695,
              "start": 2692,
            },
            "value": "ASC",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2702,
            "start": 2698,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2702,
              "start": 2698,
            },
            "value": "DESC",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2749,
            "start": 2735,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2740,
              "start": 2735,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 2749,
              "start": 2742,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 2748,
                "start": 2742,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2747,
                  "start": 2743,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2747,
                    "start": 2743,
                  },
                  "value": "Post",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2769,
            "start": 2752,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2761,
              "start": 2752,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2769,
              "start": 2763,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2769,
                "start": 2763,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 2771,
        "start": 2706,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2730,
          "start": 2711,
        },
        "value": "ModelPostConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2820,
            "start": 2804,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2806,
              "start": 2804,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2820,
              "start": 2808,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2820,
                "start": 2808,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2846,
            "start": 2823,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2828,
              "start": 2823,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2846,
              "start": 2830,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2846,
                "start": 2830,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2876,
            "start": 2849,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2852,
              "start": 2849,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2876,
              "start": 2854,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2875,
                "start": 2855,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2875,
                  "start": 2855,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2905,
            "start": 2879,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2881,
              "start": 2879,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2905,
              "start": 2883,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2904,
                "start": 2884,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2904,
                  "start": 2884,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2933,
            "start": 2908,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2911,
              "start": 2908,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2933,
              "start": 2913,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2933,
                "start": 2913,
              },
              "value": "ModelPostFilterInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2935,
        "start": 2773,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2799,
          "start": 2779,
        },
        "value": "ModelPostFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 2967,
                "start": 2960,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2962,
                  "start": 2960,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 2967,
                  "start": 2964,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 2966,
                    "start": 2964,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 2966,
                      "start": 2964,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2974,
            "start": 2952,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2959,
              "start": 2952,
            },
            "value": "getPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2974,
              "start": 2970,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2974,
                "start": 2970,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3015,
                "start": 2987,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2993,
                  "start": 2987,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3015,
                  "start": 2995,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3015,
                    "start": 2995,
                  },
                  "value": "ModelPostFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3027,
                "start": 3017,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3022,
                  "start": 3017,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3027,
                  "start": 3024,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3027,
                    "start": 3024,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3046,
                "start": 3029,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3038,
                  "start": 3029,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3046,
                  "start": 3040,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3046,
                    "start": 3040,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3068,
            "start": 2977,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2986,
              "start": 2977,
            },
            "value": "listPosts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3068,
              "start": 3049,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3068,
                "start": 3049,
              },
              "value": "ModelPostConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3086,
                "start": 3079,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3081,
                  "start": 3079,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3086,
                  "start": 3083,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3085,
                    "start": 3083,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3085,
                      "start": 3083,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3093,
            "start": 3071,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3078,
              "start": 3071,
            },
            "value": "getUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3093,
              "start": 3089,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3093,
                "start": 3089,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3134,
                "start": 3106,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3112,
                  "start": 3106,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3134,
                  "start": 3114,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3134,
                    "start": 3114,
                  },
                  "value": "ModelUserFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3146,
                "start": 3136,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3141,
                  "start": 3136,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3146,
                  "start": 3143,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3146,
                    "start": 3143,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3165,
                "start": 3148,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3157,
                  "start": 3148,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3165,
                  "start": 3159,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3165,
                    "start": 3159,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3187,
            "start": 3096,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3105,
              "start": 3096,
            },
            "value": "listUsers",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3187,
              "start": 3168,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3187,
                "start": 3168,
              },
              "value": "ModelUserConnection",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 3189,
        "start": 2937,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2947,
          "start": 2942,
        },
        "value": "Query",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3248,
            "start": 3225,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3230,
              "start": 3225,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3248,
              "start": 3232,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3248,
                "start": 3232,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3281,
            "start": 3251,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3254,
              "start": 3251,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3281,
              "start": 3256,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3280,
                "start": 3257,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3280,
                  "start": 3257,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3313,
            "start": 3284,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3286,
              "start": 3284,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3313,
              "start": 3288,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3312,
                "start": 3289,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3312,
                  "start": 3289,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3344,
            "start": 3316,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3319,
              "start": 3316,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3344,
              "start": 3321,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3344,
                "start": 3321,
              },
              "value": "ModelPostConditionInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3346,
        "start": 3191,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3220,
          "start": 3197,
        },
        "value": "ModelPostConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3380,
            "start": 3374,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3376,
              "start": 3374,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3380,
              "start": 3378,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3380,
                "start": 3378,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3397,
            "start": 3383,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3388,
              "start": 3383,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 3397,
              "start": 3390,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3396,
                "start": 3390,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3396,
                  "start": 3390,
                },
                "value": "String",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3399,
        "start": 3348,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3369,
          "start": 3354,
        },
        "value": "CreatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3434,
            "start": 3427,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3429,
              "start": 3427,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 3434,
              "start": 3431,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3433,
                "start": 3431,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3433,
                  "start": 3431,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3450,
            "start": 3437,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3442,
              "start": 3437,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3450,
              "start": 3444,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3450,
                "start": 3444,
              },
              "value": "String",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3452,
        "start": 3401,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3422,
          "start": 3407,
        },
        "value": "UpdatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3487,
            "start": 3480,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3482,
              "start": 3480,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 3487,
              "start": 3484,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3486,
                "start": 3484,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3486,
                  "start": 3484,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3489,
        "start": 3454,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3475,
          "start": 3460,
        },
        "value": "DeletePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3543,
                "start": 3520,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3525,
                  "start": 3520,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3543,
                  "start": 3527,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3542,
                    "start": 3527,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3542,
                      "start": 3527,
                    },
                    "value": "CreatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3579,
                "start": 3545,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3554,
                  "start": 3545,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3579,
                  "start": 3556,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3579,
                    "start": 3556,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3586,
            "start": 3509,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3519,
              "start": 3509,
            },
            "value": "createPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3586,
              "start": 3582,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3586,
                "start": 3582,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3623,
                "start": 3600,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3605,
                  "start": 3600,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3623,
                  "start": 3607,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3622,
                    "start": 3607,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3622,
                      "start": 3607,
                    },
                    "value": "UpdatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3659,
                "start": 3625,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3634,
                  "start": 3625,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3659,
                  "start": 3636,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3659,
                    "start": 3636,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3666,
            "start": 3589,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3599,
              "start": 3589,
            },
            "value": "updatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3666,
              "start": 3662,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3666,
                "start": 3662,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3703,
                "start": 3680,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3685,
                  "start": 3680,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3703,
                  "start": 3687,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3702,
                    "start": 3687,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3702,
                      "start": 3687,
                    },
                    "value": "DeletePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3739,
                "start": 3705,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3714,
                  "start": 3705,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3739,
                  "start": 3716,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3739,
                    "start": 3716,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3746,
            "start": 3669,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3679,
              "start": 3669,
            },
            "value": "deletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3746,
              "start": 3742,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3746,
                "start": 3742,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3795,
                "start": 3766,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3771,
                  "start": 3766,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3795,
                  "start": 3773,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3794,
                    "start": 3773,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3794,
                      "start": 3773,
                    },
                    "value": "CreatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3837,
                "start": 3797,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3806,
                  "start": 3797,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3837,
                  "start": 3808,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3837,
                    "start": 3808,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3850,
            "start": 3749,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3765,
              "start": 3749,
            },
            "value": "createPostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3850,
              "start": 3840,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3850,
                "start": 3840,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3899,
                "start": 3870,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3875,
                  "start": 3870,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3899,
                  "start": 3877,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3898,
                    "start": 3877,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3898,
                      "start": 3877,
                    },
                    "value": "UpdatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3941,
                "start": 3901,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3910,
                  "start": 3901,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3941,
                  "start": 3912,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3941,
                    "start": 3912,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3954,
            "start": 3853,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3869,
              "start": 3853,
            },
            "value": "updatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3954,
              "start": 3944,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3954,
                "start": 3944,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4003,
                "start": 3974,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3979,
                  "start": 3974,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4003,
                  "start": 3981,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4002,
                    "start": 3981,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4002,
                      "start": 3981,
                    },
                    "value": "DeletePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4045,
                "start": 4005,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4014,
                  "start": 4005,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4045,
                  "start": 4016,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4045,
                    "start": 4016,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4058,
            "start": 3957,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3973,
              "start": 3957,
            },
            "value": "deletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4058,
              "start": 4048,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4058,
                "start": 4048,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4095,
                "start": 4072,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4077,
                  "start": 4072,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4095,
                  "start": 4079,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4094,
                    "start": 4079,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4094,
                      "start": 4079,
                    },
                    "value": "CreateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4131,
                "start": 4097,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4106,
                  "start": 4097,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4131,
                  "start": 4108,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4131,
                    "start": 4108,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4138,
            "start": 4061,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4071,
              "start": 4061,
            },
            "value": "createUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4138,
              "start": 4134,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4138,
                "start": 4134,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4175,
                "start": 4152,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4157,
                  "start": 4152,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4175,
                  "start": 4159,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4174,
                    "start": 4159,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4174,
                      "start": 4159,
                    },
                    "value": "UpdateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4211,
                "start": 4177,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4186,
                  "start": 4177,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4211,
                  "start": 4188,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4211,
                    "start": 4188,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4218,
            "start": 4141,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4151,
              "start": 4141,
            },
            "value": "updateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4218,
              "start": 4214,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4218,
                "start": 4214,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4255,
                "start": 4232,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4237,
                  "start": 4232,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4255,
                  "start": 4239,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4254,
                    "start": 4239,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4254,
                      "start": 4239,
                    },
                    "value": "DeleteUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4291,
                "start": 4257,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4266,
                  "start": 4257,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4291,
                  "start": 4268,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4291,
                    "start": 4268,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4298,
            "start": 4221,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4231,
              "start": 4221,
            },
            "value": "deleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4298,
              "start": 4294,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4298,
                "start": 4294,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 4300,
        "start": 3491,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3504,
          "start": 3496,
        },
        "value": "Mutation",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4373,
            "start": 4345,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4347,
              "start": 4345,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4373,
              "start": 4349,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4373,
                "start": 4349,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4411,
            "start": 4376,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4381,
              "start": 4376,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4411,
              "start": 4383,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4411,
                "start": 4383,
              },
              "value": "ModelSubscriptionStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4453,
            "start": 4414,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4417,
              "start": 4414,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4453,
              "start": 4419,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4452,
                "start": 4420,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4452,
                  "start": 4420,
                },
                "value": "ModelSubscriptionPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4494,
            "start": 4456,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4458,
              "start": 4456,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 4494,
              "start": 4460,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4493,
                "start": 4461,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4493,
                  "start": 4461,
                },
                "value": "ModelSubscriptionPostFilterInput",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4496,
        "start": 4302,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4340,
          "start": 4308,
        },
        "value": "ModelSubscriptionPostFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4573,
                "start": 4533,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4539,
                  "start": 4533,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4573,
                  "start": 4541,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4573,
                    "start": 4541,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 4621,
                    "start": 4596,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4605,
                      "start": 4596,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 4621,
                      "start": 4607,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 4620,
                          "start": 4608,
                        },
                        "value": "createPost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 4622,
                "start": 4581,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4595,
                  "start": 4582,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4622,
            "start": 4520,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4532,
              "start": 4520,
            },
            "value": "onCreatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4580,
              "start": 4576,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4580,
                "start": 4576,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4678,
                "start": 4638,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4644,
                  "start": 4638,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4678,
                  "start": 4646,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4678,
                    "start": 4646,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 4726,
                    "start": 4701,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4710,
                      "start": 4701,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 4726,
                      "start": 4712,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 4725,
                          "start": 4713,
                        },
                        "value": "updatePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 4727,
                "start": 4686,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4700,
                  "start": 4687,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4727,
            "start": 4625,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4637,
              "start": 4625,
            },
            "value": "onUpdatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4685,
              "start": 4681,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4685,
                "start": 4681,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4783,
                "start": 4743,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4749,
                  "start": 4743,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4783,
                  "start": 4751,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4783,
                    "start": 4751,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 4831,
                    "start": 4806,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4815,
                      "start": 4806,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 4831,
                      "start": 4817,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 4830,
                          "start": 4818,
                        },
                        "value": "deletePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 4832,
                "start": 4791,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4805,
                  "start": 4792,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4832,
            "start": 4730,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4742,
              "start": 4730,
            },
            "value": "onDeletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4790,
              "start": 4786,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4790,
                "start": 4786,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4900,
                "start": 4854,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4860,
                  "start": 4854,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4900,
                  "start": 4862,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4900,
                    "start": 4862,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 4960,
                    "start": 4929,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4938,
                      "start": 4929,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 4960,
                      "start": 4940,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 4959,
                          "start": 4941,
                        },
                        "value": "createPostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 4961,
                "start": 4914,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4928,
                  "start": 4915,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4961,
            "start": 4835,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4853,
              "start": 4835,
            },
            "value": "onCreatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4913,
              "start": 4903,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4913,
                "start": 4903,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5029,
                "start": 4983,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4989,
                  "start": 4983,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5029,
                  "start": 4991,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5029,
                    "start": 4991,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5089,
                    "start": 5058,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5067,
                      "start": 5058,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5089,
                      "start": 5069,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5088,
                          "start": 5070,
                        },
                        "value": "updatePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5090,
                "start": 5043,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5057,
                  "start": 5044,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5090,
            "start": 4964,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4982,
              "start": 4964,
            },
            "value": "onUpdatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5042,
              "start": 5032,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5042,
                "start": 5032,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5158,
                "start": 5112,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5118,
                  "start": 5112,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5158,
                  "start": 5120,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5158,
                    "start": 5120,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5218,
                    "start": 5187,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5196,
                      "start": 5187,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5218,
                      "start": 5198,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5217,
                          "start": 5199,
                        },
                        "value": "deletePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5219,
                "start": 5172,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5186,
                  "start": 5173,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5219,
            "start": 5093,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5111,
              "start": 5093,
            },
            "value": "onDeletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5171,
              "start": 5161,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5171,
                "start": 5161,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5275,
                "start": 5235,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5241,
                  "start": 5235,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5275,
                  "start": 5243,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5275,
                    "start": 5243,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5323,
                    "start": 5298,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5307,
                      "start": 5298,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5323,
                      "start": 5309,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5322,
                          "start": 5310,
                        },
                        "value": "createUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5324,
                "start": 5283,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5297,
                  "start": 5284,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5324,
            "start": 5222,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5234,
              "start": 5222,
            },
            "value": "onCreateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5282,
              "start": 5278,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5282,
                "start": 5278,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5380,
                "start": 5340,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5346,
                  "start": 5340,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5380,
                  "start": 5348,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5380,
                    "start": 5348,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5428,
                    "start": 5403,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5412,
                      "start": 5403,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5428,
                      "start": 5414,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5427,
                          "start": 5415,
                        },
                        "value": "updateUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5429,
                "start": 5388,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5402,
                  "start": 5389,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5429,
            "start": 5327,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5339,
              "start": 5327,
            },
            "value": "onUpdateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5387,
              "start": 5383,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5387,
                "start": 5383,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5485,
                "start": 5445,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5451,
                  "start": 5445,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5485,
                  "start": 5453,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5485,
                    "start": 5453,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5533,
                    "start": 5508,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5517,
                      "start": 5508,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5533,
                      "start": 5519,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5532,
                          "start": 5520,
                        },
                        "value": "deleteUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5534,
                "start": 5493,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5507,
                  "start": 5494,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5534,
            "start": 5432,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5444,
              "start": 5432,
            },
            "value": "onDeleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5492,
              "start": 5488,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5492,
                "start": 5488,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 5536,
        "start": 4498,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4515,
          "start": 4503,
        },
        "value": "Subscription",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5598,
            "start": 5578,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5584,
              "start": 5578,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5598,
              "start": 5586,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5598,
                "start": 5586,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5623,
            "start": 5601,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5609,
              "start": 5601,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5623,
              "start": 5611,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5623,
                "start": 5611,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5662,
            "start": 5626,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5629,
              "start": 5626,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5662,
              "start": 5631,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5661,
                "start": 5632,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5661,
                  "start": 5632,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5700,
            "start": 5665,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5667,
              "start": 5665,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5700,
              "start": 5669,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5699,
                "start": 5670,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5699,
                  "start": 5670,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5737,
            "start": 5703,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5706,
              "start": 5703,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5737,
              "start": 5708,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5737,
                "start": 5708,
              },
              "value": "ModelPostEditorConditionInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5739,
        "start": 5538,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5573,
          "start": 5544,
        },
        "value": "ModelPostEditorConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5779,
            "start": 5773,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5775,
              "start": 5773,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5779,
              "start": 5777,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5779,
                "start": 5777,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5793,
            "start": 5782,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5788,
              "start": 5782,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 5793,
              "start": 5790,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5792,
                "start": 5790,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5792,
                  "start": 5790,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5809,
            "start": 5796,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5804,
              "start": 5796,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 5809,
              "start": 5806,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5808,
                "start": 5806,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5808,
                  "start": 5806,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5811,
        "start": 5741,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5768,
          "start": 5747,
        },
        "value": "CreatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5852,
            "start": 5845,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5847,
              "start": 5845,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 5852,
              "start": 5849,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5851,
                "start": 5849,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5851,
                  "start": 5849,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5865,
            "start": 5855,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5861,
              "start": 5855,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5865,
              "start": 5863,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5865,
                "start": 5863,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5880,
            "start": 5868,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5876,
              "start": 5868,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5880,
              "start": 5878,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5880,
                "start": 5878,
              },
              "value": "ID",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5882,
        "start": 5813,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5840,
          "start": 5819,
        },
        "value": "UpdatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5923,
            "start": 5916,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5918,
              "start": 5916,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 5923,
              "start": 5920,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5922,
                "start": 5920,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5922,
                  "start": 5920,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5925,
        "start": 5884,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5911,
          "start": 5890,
        },
        "value": "DeletePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6004,
            "start": 5976,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5978,
              "start": 5976,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6004,
              "start": 5980,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6004,
                "start": 5980,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6039,
            "start": 6007,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6013,
              "start": 6007,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6039,
              "start": 6015,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6039,
                "start": 6015,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6076,
            "start": 6042,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6050,
              "start": 6042,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6076,
              "start": 6052,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6076,
                "start": 6052,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6124,
            "start": 6079,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6082,
              "start": 6079,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6124,
              "start": 6084,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6123,
                "start": 6085,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6123,
                  "start": 6085,
                },
                "value": "ModelSubscriptionPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6171,
            "start": 6127,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6129,
              "start": 6127,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6171,
              "start": 6131,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6170,
                "start": 6132,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6170,
                  "start": 6132,
                },
                "value": "ModelSubscriptionPostEditorFilterInput",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6173,
        "start": 5927,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5971,
          "start": 5933,
        },
        "value": "ModelSubscriptionPostEditorFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6218,
            "start": 6204,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6209,
              "start": 6204,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6218,
              "start": 6211,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 6217,
                "start": 6211,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 6216,
                  "start": 6212,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 6216,
                    "start": 6212,
                  },
                  "value": "User",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6238,
            "start": 6221,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6230,
              "start": 6221,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6238,
              "start": 6232,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6238,
                "start": 6232,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 6240,
        "start": 6175,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6199,
          "start": 6180,
        },
        "value": "ModelUserConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6289,
            "start": 6273,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6275,
              "start": 6273,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6289,
              "start": 6277,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6289,
                "start": 6277,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6318,
            "start": 6292,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6300,
              "start": 6292,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6318,
              "start": 6302,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6318,
                "start": 6302,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6348,
            "start": 6321,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6324,
              "start": 6321,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6348,
              "start": 6326,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6347,
                "start": 6327,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6347,
                  "start": 6327,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6377,
            "start": 6351,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6353,
              "start": 6351,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6377,
              "start": 6355,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6376,
                "start": 6356,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6376,
                  "start": 6356,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6405,
            "start": 6380,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6383,
              "start": 6380,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6405,
              "start": 6385,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6405,
                "start": 6385,
              },
              "value": "ModelUserFilterInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6407,
        "start": 6242,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6268,
          "start": 6248,
        },
        "value": "ModelUserFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6469,
            "start": 6443,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6451,
              "start": 6443,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6469,
              "start": 6453,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6469,
                "start": 6453,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6502,
            "start": 6472,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6475,
              "start": 6472,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6502,
              "start": 6477,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6501,
                "start": 6478,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6501,
                  "start": 6478,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6534,
            "start": 6505,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6507,
              "start": 6505,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6534,
              "start": 6509,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6533,
                "start": 6510,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6533,
                  "start": 6510,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6565,
            "start": 6537,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6540,
              "start": 6537,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6565,
              "start": 6542,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6565,
                "start": 6542,
              },
              "value": "ModelUserConditionInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6567,
        "start": 6409,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6438,
          "start": 6415,
        },
        "value": "ModelUserConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6601,
            "start": 6595,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6597,
              "start": 6595,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6601,
              "start": 6599,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6601,
                "start": 6599,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6621,
            "start": 6604,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6612,
              "start": 6604,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6621,
              "start": 6614,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6620,
                "start": 6614,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6620,
                  "start": 6614,
                },
                "value": "String",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6623,
        "start": 6569,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6590,
          "start": 6575,
        },
        "value": "CreateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6658,
            "start": 6651,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6653,
              "start": 6651,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6658,
              "start": 6655,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6657,
                "start": 6655,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6657,
                  "start": 6655,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6677,
            "start": 6661,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6669,
              "start": 6661,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6677,
              "start": 6671,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6677,
                "start": 6671,
              },
              "value": "String",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6679,
        "start": 6625,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6646,
          "start": 6631,
        },
        "value": "UpdateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6714,
            "start": 6707,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6709,
              "start": 6707,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6714,
              "start": 6711,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6713,
                "start": 6711,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6713,
                  "start": 6711,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6716,
        "start": 6681,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6702,
          "start": 6687,
        },
        "value": "DeleteUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6789,
            "start": 6761,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6763,
              "start": 6761,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6789,
              "start": 6765,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6789,
                "start": 6765,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6830,
            "start": 6792,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6800,
              "start": 6792,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6830,
              "start": 6802,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6830,
                "start": 6802,
              },
              "value": "ModelSubscriptionStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6872,
            "start": 6833,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6836,
              "start": 6833,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6872,
              "start": 6838,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6871,
                "start": 6839,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6871,
                  "start": 6839,
                },
                "value": "ModelSubscriptionUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6913,
            "start": 6875,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6877,
              "start": 6875,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6913,
              "start": 6879,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6912,
                "start": 6880,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6912,
                  "start": 6880,
                },
                "value": "ModelSubscriptionUserFilterInput",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6915,
        "start": 6718,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6756,
          "start": 6724,
        },
        "value": "ModelSubscriptionUserFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6958,
            "start": 6952,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6954,
              "start": 6952,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6958,
              "start": 6956,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6958,
                "start": 6956,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6967,
            "start": 6961,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6963,
              "start": 6961,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6967,
              "start": 6965,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6967,
                "start": 6965,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6976,
            "start": 6970,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6972,
              "start": 6970,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6976,
              "start": 6974,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6976,
                "start": 6974,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6985,
            "start": 6979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6981,
              "start": 6979,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6985,
              "start": 6983,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6985,
                "start": 6983,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6994,
            "start": 6988,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6990,
              "start": 6988,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6994,
              "start": 6992,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6994,
                "start": 6992,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7010,
            "start": 6997,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7004,
              "start": 6997,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7010,
              "start": 7006,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7009,
                "start": 7007,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7009,
                  "start": 7007,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7027,
            "start": 7013,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7023,
              "start": 7013,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7027,
              "start": 7025,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7027,
                "start": 7025,
              },
              "value": "ID",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7029,
        "start": 6917,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6947,
          "start": 6923,
        },
        "value": "ModelIDKeyConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 7086,
            "start": 7066,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7071,
              "start": 7066,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7086,
              "start": 7073,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 7085,
                "start": 7073,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 7084,
                  "start": 7074,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 7084,
                    "start": 7074,
                  },
                  "value": "PostEditor",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 7106,
            "start": 7089,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7098,
              "start": 7089,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7106,
              "start": 7100,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7106,
                "start": 7100,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 7108,
        "start": 7031,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7061,
          "start": 7036,
        },
        "value": "ModelPostEditorConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7163,
            "start": 7147,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7149,
              "start": 7147,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7163,
              "start": 7151,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7163,
                "start": 7151,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7186,
            "start": 7166,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7172,
              "start": 7166,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7186,
              "start": 7174,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7186,
                "start": 7174,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7211,
            "start": 7189,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7197,
              "start": 7189,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7211,
              "start": 7199,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7211,
                "start": 7199,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7247,
            "start": 7214,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7217,
              "start": 7214,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7247,
              "start": 7219,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7246,
                "start": 7220,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7246,
                  "start": 7220,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7282,
            "start": 7250,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7252,
              "start": 7250,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7282,
              "start": 7254,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7281,
                "start": 7255,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7281,
                  "start": 7255,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7316,
            "start": 7285,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7288,
              "start": 7285,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7316,
              "start": 7290,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7316,
                "start": 7290,
              },
              "value": "ModelPostEditorFilterInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7318,
        "start": 7110,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7142,
          "start": 7116,
        },
        "value": "ModelPostEditorFilterInput",
      },
    },
  ],
  "kind": "Document",
  "loc": Object {
    "end": 7319,
    "start": 0,
  },
}
`;

exports[`validates VTL of a complex schema 1`] = `
Object {
  "Child.parents.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"childID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.childName.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.childName.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byChild\\"
  }
#end",
  "Child.parents.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Friendship.friend.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.friendID) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.friendID)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Friendship.friend.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Mutation.createChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createChild.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Child\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createFriendship.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Friendship\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"userID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createParent.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Parent\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"childID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPost.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPostAuthor.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostAuthor\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"authorID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPostModel.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostModel\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.createUser.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"User\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate create mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $mergedValues.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$mergedValues.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When creating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate create mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.createUserModel.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"UserModel\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"id\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteChild.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteFriendship.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteParent.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePost.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePostAuthor.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePostModel.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUser.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.deleteUserModel.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateChild.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateFriendship.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateParent.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePost.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePostAuthor.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePostModel.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.updateUser.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate update mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $mergedValues.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$mergedValues.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When updating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate update mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.updateUserModel.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Parent.child.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.childID) || $util.isNull($ctx.source.childName) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue AND #sortKeyName = :sortKeyName\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKeyName\\": \\"name\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.childID, \\"___xamznone____\\"))),
      \\":sortKeyName\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.childName, \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "Parent.child.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "Post.authors.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.authorID) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 50) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.authorID)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Post.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostAuthor.post.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.postID) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.postID, \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "PostAuthor.post.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "PostModel.authors.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.authorID) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey AND #sortKey = :sortKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKey\\": \\"name#surname\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.authorID),
      \\":sortKey\\": $util.dynamodb.toDynamoDB(\\"\${context.source.authorName}#\${context.source.authorSurname}\\")
  }
} )
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"composite\\"
  }
#end",
  "PostModel.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostModel.singleAuthor.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.authorID) || $util.isNull($ctx.source.authorName) || $util.isNull($ctx.source.authorSurname) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue AND #sortKeyName = :sortKeyName\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKeyName\\": \\"name#surname\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.authorID, \\"___xamznone____\\"))),
      \\":sortKeyName\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank(\\"\${ctx.source.authorName}#\${ctx.source.authorSurname}\\", \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "PostModel.singleAuthor.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "Query.getChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getChild.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name\\": $util.dynamodb.toDynamoDB($ctx.args.name)
}))
## [End] Set the primary key. **
{}",
  "Query.getChild.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getChild.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getFriendship.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getFriendship.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getParent.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getParent.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPost.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPost.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPostAuthor.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostAuthor.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPostModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostModel.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getUser.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${ctx.args.name}#\${ctx.args.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Query.getUser.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUser.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getUserModel.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($ctx.args.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Query.getUserModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUserModel.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.listChildren.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listChildren.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.name) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'name' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.name.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.name.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.eq\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.lt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.le\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.gt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listChildren.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listChildren.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listFriendships.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listFriendships.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listFriendships.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listParents.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listParents.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listParents.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPostAuthors.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPostAuthors.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostAuthors.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPostModels.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPostModels.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostModels.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPosts.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listUserModels.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listUserModels.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.rollNumber) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'rollNumber' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"N\\": \\"$ctx.args.rollNumber.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"N\\": \\"$ctx.args.rollNumber.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.eq\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.lt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.le\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.gt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUserModels.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUserModels.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listUsers.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listUsers.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.nameSurname) && $util.isNullOrBlank($ctx.args.id) )
  $util.error(\\"When providing argument 'nameSurname' you must also provide 'id'.\\", \\"InvalidArgumentsError\\")
#end
#if( !$util.isNull($ctx.args.nameSurname) )
  #set( $sortKeyArgumentOperations = $ctx.args.nameSurname.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error(\\"Argument nameSurname must specify at most one key condition operation.\\", \\"InvalidArgumentsError\\")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == \\"between\\" )
      #if( $ctx.args.nameSurname.between.size() != 2 )
        $util.error(\\"Argument 'nameSurname.between' expects exactly two elements.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[0].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[0].name) )
        $util.error(\\"When providing argument 'nameSurname.between[0].surname' you must also provide 'nameSurname.between[0].name'.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[1].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[1].name) )
        $util.error(\\"When providing argument 'nameSurname.between[1].surname' you must also provide 'nameSurname.between[1].name'.\\", \\"InvalidArgumentsError\\")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").surname) && $util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").name) )
        $util.error(\\"When providing argument 'nameSurname.$operation.surname' you must also provide 'nameSurname.$operation.name'.\\", \\"InvalidArgumentsError\\")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = \\"\\" )
#set( $sortKeyValue2 = \\"\\" )
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
  #if( $ctx.args.nameSurname.between.size() != 2 )
    $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
  #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUsers.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUsers.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "User.friendships.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"userID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.friendID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.friendID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byUser\\"
  }
#end",
  "User.friendships.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "UserModel.authorPosts.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#if( $util.isNull($ctx.source.id) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"authorID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($context.source.id)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.postID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.postID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byAuthor\\"
  }
#end",
  "UserModel.authorPosts.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
}
`;
