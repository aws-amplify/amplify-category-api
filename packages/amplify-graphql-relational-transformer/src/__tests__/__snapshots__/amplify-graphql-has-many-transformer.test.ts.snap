// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@hasMany directive with RDS datasource composite key should generate correct resolvers 1`] = `
"type System {
  systemId: String!
  systemName: String!
  details: String
  parts(filter: ModelPartFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPartConnection
}

type Part {
  partId: String!
  partName: String
  systemId: String!
  systemName: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSystemConnection {
  items: [System]!
  nextToken: String
}

input ModelSystemFilterInput {
  systemId: ModelStringInput
  systemName: ModelStringInput
  details: ModelStringInput
  and: [ModelSystemFilterInput]
  or: [ModelSystemFilterInput]
  not: ModelSystemFilterInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

type Query {
  getSystem(systemId: String!, systemName: String!): System
  listSystems(systemId: String, filter: ModelSystemFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSystemConnection
  getPart(partId: String!): Part
  listParts(partId: String, filter: ModelPartFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPartConnection
}

input ModelSystemConditionInput {
  details: ModelStringInput
  and: [ModelSystemConditionInput]
  or: [ModelSystemConditionInput]
  not: ModelSystemConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateSystemInput {
  systemId: String!
  systemName: String!
  details: String
}

input UpdateSystemInput {
  systemId: String!
  systemName: String!
  details: String
}

input DeleteSystemInput {
  systemId: String!
  systemName: String!
}

type Mutation {
  createSystem(input: CreateSystemInput!, condition: ModelSystemConditionInput): System
  updateSystem(input: UpdateSystemInput!, condition: ModelSystemConditionInput): System
  deleteSystem(input: DeleteSystemInput!, condition: ModelSystemConditionInput): System
  createPart(input: CreatePartInput!, condition: ModelPartConditionInput): Part
  updatePart(input: UpdatePartInput!, condition: ModelPartConditionInput): Part
  deletePart(input: DeletePartInput!, condition: ModelPartConditionInput): Part
}

input ModelSubscriptionSystemFilterInput {
  systemId: ModelSubscriptionStringInput
  systemName: ModelSubscriptionStringInput
  details: ModelSubscriptionStringInput
  and: [ModelSubscriptionSystemFilterInput]
  or: [ModelSubscriptionSystemFilterInput]
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

type Subscription {
  onCreateSystem(filter: ModelSubscriptionSystemFilterInput): System @aws_subscribe(mutations: [\\"createSystem\\"])
  onUpdateSystem(filter: ModelSubscriptionSystemFilterInput): System @aws_subscribe(mutations: [\\"updateSystem\\"])
  onDeleteSystem(filter: ModelSubscriptionSystemFilterInput): System @aws_subscribe(mutations: [\\"deleteSystem\\"])
  onCreatePart(filter: ModelSubscriptionPartFilterInput): Part @aws_subscribe(mutations: [\\"createPart\\"])
  onUpdatePart(filter: ModelSubscriptionPartFilterInput): Part @aws_subscribe(mutations: [\\"updatePart\\"])
  onDeletePart(filter: ModelSubscriptionPartFilterInput): Part @aws_subscribe(mutations: [\\"deletePart\\"])
}

type ModelPartConnection {
  items: [Part]!
  nextToken: String
}

input ModelPartFilterInput {
  partId: ModelStringInput
  partName: ModelStringInput
  systemId: ModelStringInput
  systemName: ModelStringInput
  and: [ModelPartFilterInput]
  or: [ModelPartFilterInput]
  not: ModelPartFilterInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelPartConditionInput {
  partName: ModelStringInput
  systemId: ModelStringInput
  systemName: ModelStringInput
  and: [ModelPartConditionInput]
  or: [ModelPartConditionInput]
  not: ModelPartConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePartInput {
  partId: String!
  partName: String
  systemId: String!
  systemName: String!
}

input UpdatePartInput {
  partId: String!
  partName: String
  systemId: String
  systemName: String
}

input DeletePartInput {
  partId: String!
}

input ModelSubscriptionPartFilterInput {
  partId: ModelSubscriptionStringInput
  partName: ModelSubscriptionStringInput
  systemId: ModelSubscriptionStringInput
  systemName: ModelSubscriptionStringInput
  and: [ModelSubscriptionPartFilterInput]
  or: [ModelSubscriptionPartFilterInput]
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
"
`;

exports[`@hasMany directive with RDS datasource composite key should generate correct resolvers 2`] = `
"## [Start] Invoke RDS Lambda data source. **
#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Part\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"ConnectionQuery\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
#if( !$lambdaInput.args.filter )
  #set( $lambdaInput.args.filter = {} )
#end
$util.qr($lambdaInput.args.filter.put(\\"systemId\\", {
  \\"eq\\": $util.defaultIfNull($ctx.source.systemId, \\"\\")
}))
$util.qr($lambdaInput.args.filter.put(\\"systemName\\", {
  \\"eq\\": $util.defaultIfNull($ctx.source.systemName, \\"\\")
}))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@hasMany directive with RDS datasource composite key should generate correct resolvers 3`] = `
"## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **"
`;

exports[`@hasMany directive with RDS datasource happy case should generate correct resolvers 1`] = `
"type Blog {
  id: String!
  content: String
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
}

type Post {
  id: String!
  content: String
  blogId: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBlogConnection {
  items: [Blog]!
  nextToken: String
}

input ModelBlogFilterInput {
  id: ModelStringInput
  content: ModelStringInput
  and: [ModelBlogFilterInput]
  or: [ModelBlogFilterInput]
  not: ModelBlogFilterInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

type Query {
  getBlog(id: String!): Blog
  listBlogs(id: String, filter: ModelBlogFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelBlogConnection
  getPost(id: String!): Post
  listPosts(id: String, filter: ModelPostFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostConnection
}

input ModelBlogConditionInput {
  content: ModelStringInput
  and: [ModelBlogConditionInput]
  or: [ModelBlogConditionInput]
  not: ModelBlogConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateBlogInput {
  id: String
  content: String
}

input UpdateBlogInput {
  id: String!
  content: String
}

input DeleteBlogInput {
  id: String!
}

type Mutation {
  createBlog(input: CreateBlogInput!, condition: ModelBlogConditionInput): Blog
  updateBlog(input: UpdateBlogInput!, condition: ModelBlogConditionInput): Blog
  deleteBlog(input: DeleteBlogInput!, condition: ModelBlogConditionInput): Blog
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
}

input ModelSubscriptionBlogFilterInput {
  id: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionBlogFilterInput]
  or: [ModelSubscriptionBlogFilterInput]
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

type Subscription {
  onCreateBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: [\\"createBlog\\"])
  onUpdateBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: [\\"updateBlog\\"])
  onDeleteBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: [\\"deleteBlog\\"])
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"deletePost\\"])
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelStringInput
  content: ModelStringInput
  blogId: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input ModelPostConditionInput {
  content: ModelStringInput
  blogId: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePostInput {
  id: String
  content: String
  blogId: String
}

input UpdatePostInput {
  id: String!
  content: String
  blogId: String
}

input DeletePostInput {
  id: String!
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  blogId: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}
"
`;

exports[`@hasMany directive with RDS datasource happy case should generate correct resolvers 2`] = `
"## [Start] Invoke RDS Lambda data source. **
#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Post\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"ConnectionQuery\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
#if( !$lambdaInput.args.filter )
  #set( $lambdaInput.args.filter = {} )
#end
$util.qr($lambdaInput.args.filter.put(\\"blogId\\", {
  \\"eq\\": $util.defaultIfNull($ctx.source.id, \\"\\")
}))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@hasMany directive with RDS datasource happy case should generate correct resolvers 3`] = `
"## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **"
`;

exports[`many to many query 1`] = `
Object {
  "definitions": Array [
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 21,
            "start": 14,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 16,
              "start": 14,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 21,
              "start": 18,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 20,
                "start": 18,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 20,
                  "start": 18,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 38,
            "start": 24,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 29,
              "start": 24,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 38,
              "start": 31,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 37,
                "start": 31,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 37,
                  "start": 31,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 83,
                "start": 49,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 57,
                  "start": 49,
                },
                "value": "editorID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 83,
                  "start": 59,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 83,
                    "start": 59,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 119,
                "start": 85,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 91,
                  "start": 85,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 119,
                  "start": 93,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 119,
                    "start": 93,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 154,
                "start": 121,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 134,
                  "start": 121,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 154,
                  "start": 136,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 154,
                    "start": 136,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 166,
                "start": 156,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 161,
                  "start": 156,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 166,
                  "start": 163,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 166,
                    "start": 163,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 185,
                "start": 168,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 177,
                  "start": 168,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 185,
                  "start": 179,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 185,
                    "start": 179,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 213,
            "start": 41,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 48,
              "start": 41,
            },
            "value": "editors",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 213,
              "start": 188,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 213,
                "start": 188,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 239,
            "start": 216,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 225,
              "start": 216,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 239,
              "start": 227,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 238,
                "start": 227,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 238,
                  "start": 227,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 265,
            "start": 242,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 251,
              "start": 242,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 265,
              "start": 253,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 264,
                "start": 253,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 264,
                  "start": 253,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 282,
            "start": 268,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 276,
              "start": 268,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 282,
              "start": 278,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 281,
                "start": 278,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 281,
                  "start": 278,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 302,
            "start": 285,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 293,
              "start": 285,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 302,
              "start": 295,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 302,
                "start": 295,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 334,
            "start": 305,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 319,
              "start": 305,
            },
            "value": "_lastChangedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 334,
              "start": 321,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 333,
                "start": 321,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 333,
                  "start": 321,
                },
                "value": "AWSTimestamp",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 336,
        "start": 0,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 9,
          "start": 5,
        },
        "value": "Post",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 365,
            "start": 358,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 360,
              "start": 358,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 365,
              "start": 362,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 364,
                "start": 362,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 364,
                  "start": 362,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 379,
            "start": 368,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 374,
              "start": 368,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 379,
              "start": 376,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 378,
                "start": 376,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 378,
                  "start": 376,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 395,
            "start": 382,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 390,
              "start": 382,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 395,
              "start": 392,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 394,
                "start": 392,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 394,
                  "start": 392,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 409,
            "start": 398,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 402,
              "start": 398,
            },
            "value": "post",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 409,
              "start": 404,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 408,
                "start": 404,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 408,
                  "start": 404,
                },
                "value": "Post",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 425,
            "start": 412,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 418,
              "start": 412,
            },
            "value": "editor",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 425,
              "start": 420,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 424,
                "start": 420,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 424,
                  "start": 420,
                },
                "value": "User",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 451,
            "start": 428,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 437,
              "start": 428,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 451,
              "start": 439,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 450,
                "start": 439,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 450,
                  "start": 439,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 477,
            "start": 454,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 463,
              "start": 454,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 477,
              "start": 465,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 476,
                "start": 465,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 476,
                  "start": 465,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 494,
            "start": 480,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 488,
              "start": 480,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 494,
              "start": 490,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 493,
                "start": 490,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 493,
                  "start": 490,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 514,
            "start": 497,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 505,
              "start": 497,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 514,
              "start": 507,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 514,
                "start": 507,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 546,
            "start": 517,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 531,
              "start": 517,
            },
            "value": "_lastChangedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 546,
              "start": 533,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 545,
                "start": 533,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 545,
                  "start": 533,
                },
                "value": "AWSTimestamp",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 548,
        "start": 338,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 353,
          "start": 343,
        },
        "value": "PostEditor",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 571,
            "start": 564,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 566,
              "start": 564,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 571,
              "start": 568,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 570,
                "start": 568,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 570,
                  "start": 568,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 591,
            "start": 574,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 582,
              "start": 574,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 591,
              "start": 584,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 590,
                "start": 584,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 590,
                  "start": 584,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 632,
                "start": 600,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 606,
                  "start": 600,
                },
                "value": "postID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 632,
                  "start": 608,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 632,
                    "start": 608,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 668,
                "start": 634,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 640,
                  "start": 634,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 668,
                  "start": 642,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 668,
                    "start": 642,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 703,
                "start": 670,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 683,
                  "start": 670,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 703,
                  "start": 685,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 703,
                    "start": 685,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 715,
                "start": 705,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 710,
                  "start": 705,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 715,
                  "start": 712,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 715,
                    "start": 712,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 734,
                "start": 717,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 726,
                  "start": 717,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 734,
                  "start": 728,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 734,
                    "start": 728,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 762,
            "start": 594,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 599,
              "start": 594,
            },
            "value": "posts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 762,
              "start": 737,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 762,
                "start": 737,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 788,
            "start": 765,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 774,
              "start": 765,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 788,
              "start": 776,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 787,
                "start": 776,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 787,
                  "start": 776,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 814,
            "start": 791,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 800,
              "start": 791,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 814,
              "start": 802,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 813,
                "start": 802,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 813,
                  "start": 802,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 831,
            "start": 817,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 825,
              "start": 817,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 831,
              "start": 827,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 830,
                "start": 827,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 830,
                  "start": 827,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 851,
            "start": 834,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 842,
              "start": 834,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 851,
              "start": 844,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 851,
                "start": 844,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 883,
            "start": 854,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 868,
              "start": 854,
            },
            "value": "_lastChangedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 883,
              "start": 870,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 882,
                "start": 870,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 882,
                  "start": 870,
                },
                "value": "AWSTimestamp",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 885,
        "start": 550,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 559,
          "start": 555,
        },
        "value": "User",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 924,
            "start": 914,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 916,
              "start": 914,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 924,
              "start": 918,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 924,
                "start": 918,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 937,
            "start": 927,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 929,
              "start": 927,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 937,
              "start": 931,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 937,
                "start": 931,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 950,
            "start": 940,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 942,
              "start": 940,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 950,
              "start": 944,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 950,
                "start": 944,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 963,
            "start": 953,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 955,
              "start": 953,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 963,
              "start": 957,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 963,
                "start": 957,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 976,
            "start": 966,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 968,
              "start": 966,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 976,
              "start": 970,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 976,
                "start": 970,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 989,
            "start": 979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 981,
              "start": 979,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 989,
              "start": 983,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 989,
                "start": 983,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1008,
            "start": 992,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1000,
              "start": 992,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1008,
              "start": 1002,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1008,
                "start": 1002,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1030,
            "start": 1011,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1022,
              "start": 1011,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1030,
              "start": 1024,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1030,
                "start": 1024,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1050,
            "start": 1033,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1040,
              "start": 1033,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1050,
              "start": 1042,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1049,
                "start": 1043,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1049,
                  "start": 1043,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1071,
            "start": 1053,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1063,
              "start": 1053,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1071,
              "start": 1065,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1071,
                "start": 1065,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1098,
            "start": 1074,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1089,
              "start": 1074,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1098,
              "start": 1091,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1098,
                "start": 1091,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1135,
            "start": 1101,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1114,
              "start": 1101,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1135,
              "start": 1116,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1135,
                "start": 1116,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1158,
            "start": 1138,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1142,
              "start": 1138,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1158,
              "start": 1144,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1158,
                "start": 1144,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1160,
        "start": 887,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 909,
          "start": 893,
        },
        "value": "ModelStringInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1193,
            "start": 1186,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1188,
              "start": 1186,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1193,
              "start": 1190,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1193,
                "start": 1190,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1203,
            "start": 1196,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1198,
              "start": 1196,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1203,
              "start": 1200,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1203,
                "start": 1200,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1213,
            "start": 1206,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1208,
              "start": 1206,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1213,
              "start": 1210,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1213,
                "start": 1210,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1223,
            "start": 1216,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1218,
              "start": 1216,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1223,
              "start": 1220,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1223,
                "start": 1220,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1233,
            "start": 1226,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1228,
              "start": 1226,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1233,
              "start": 1230,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1233,
                "start": 1230,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1243,
            "start": 1236,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1238,
              "start": 1236,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1243,
              "start": 1240,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1243,
                "start": 1240,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1260,
            "start": 1246,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1253,
              "start": 1246,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1260,
              "start": 1255,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1259,
                "start": 1256,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1259,
                  "start": 1256,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1287,
            "start": 1263,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1278,
              "start": 1263,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1287,
              "start": 1280,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1287,
                "start": 1280,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1324,
            "start": 1290,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1303,
              "start": 1290,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1324,
              "start": 1305,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1324,
                "start": 1305,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1326,
        "start": 1162,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1181,
          "start": 1168,
        },
        "value": "ModelIntInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1363,
            "start": 1354,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1356,
              "start": 1354,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1363,
              "start": 1358,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1363,
                "start": 1358,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1375,
            "start": 1366,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1368,
              "start": 1366,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1375,
              "start": 1370,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1375,
                "start": 1370,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1387,
            "start": 1378,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1380,
              "start": 1378,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1387,
              "start": 1382,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1387,
                "start": 1382,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1399,
            "start": 1390,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1392,
              "start": 1390,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1399,
              "start": 1394,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1399,
                "start": 1394,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1411,
            "start": 1402,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1404,
              "start": 1402,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1411,
              "start": 1406,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1411,
                "start": 1406,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1423,
            "start": 1414,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1416,
              "start": 1414,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1423,
              "start": 1418,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1423,
                "start": 1418,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1442,
            "start": 1426,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1433,
              "start": 1426,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1442,
              "start": 1435,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1441,
                "start": 1436,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1441,
                  "start": 1436,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1469,
            "start": 1445,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1460,
              "start": 1445,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1469,
              "start": 1462,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1469,
                "start": 1462,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1506,
            "start": 1472,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1485,
              "start": 1472,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1506,
              "start": 1487,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1506,
                "start": 1487,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1508,
        "start": 1328,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1349,
          "start": 1334,
        },
        "value": "ModelFloatInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1549,
            "start": 1538,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1540,
              "start": 1538,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1549,
              "start": 1542,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1549,
                "start": 1542,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1563,
            "start": 1552,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1554,
              "start": 1552,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1563,
              "start": 1556,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1563,
                "start": 1556,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1590,
            "start": 1566,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1581,
              "start": 1566,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1590,
              "start": 1583,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1590,
                "start": 1583,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1627,
            "start": 1593,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1606,
              "start": 1593,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1627,
              "start": 1608,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1627,
                "start": 1608,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1629,
        "start": 1510,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1533,
          "start": 1516,
        },
        "value": "ModelBooleanInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1660,
            "start": 1654,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1656,
              "start": 1654,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1660,
              "start": 1658,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1660,
                "start": 1658,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1669,
            "start": 1663,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1665,
              "start": 1663,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1669,
              "start": 1667,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1669,
                "start": 1667,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1678,
            "start": 1672,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1674,
              "start": 1672,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1678,
              "start": 1676,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1678,
                "start": 1676,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1687,
            "start": 1681,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1683,
              "start": 1681,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1687,
              "start": 1685,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1687,
                "start": 1685,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1696,
            "start": 1690,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1692,
              "start": 1690,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1696,
              "start": 1694,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1696,
                "start": 1694,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1705,
            "start": 1699,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1701,
              "start": 1699,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1705,
              "start": 1703,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1705,
                "start": 1703,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1720,
            "start": 1708,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1716,
              "start": 1708,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1720,
              "start": 1718,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1720,
                "start": 1718,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1738,
            "start": 1723,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1734,
              "start": 1723,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1738,
              "start": 1736,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1738,
                "start": 1736,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1754,
            "start": 1741,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1748,
              "start": 1741,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1754,
              "start": 1750,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1753,
                "start": 1751,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1753,
                  "start": 1751,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1771,
            "start": 1757,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1767,
              "start": 1757,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1771,
              "start": 1769,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1771,
                "start": 1769,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1798,
            "start": 1774,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1789,
              "start": 1774,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1798,
              "start": 1791,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1798,
                "start": 1791,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1835,
            "start": 1801,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1814,
              "start": 1801,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1835,
              "start": 1816,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1835,
                "start": 1816,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1858,
            "start": 1838,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1842,
              "start": 1838,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1858,
              "start": 1844,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1858,
                "start": 1844,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1860,
        "start": 1631,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1649,
          "start": 1637,
        },
        "value": "ModelIDInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1911,
            "start": 1901,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1903,
              "start": 1901,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1911,
              "start": 1905,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1911,
                "start": 1905,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1924,
            "start": 1914,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1916,
              "start": 1914,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1924,
              "start": 1918,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1924,
                "start": 1918,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1937,
            "start": 1927,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1929,
              "start": 1927,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1937,
              "start": 1931,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1937,
                "start": 1931,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1950,
            "start": 1940,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1942,
              "start": 1940,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1950,
              "start": 1944,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1950,
                "start": 1944,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1963,
            "start": 1953,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1955,
              "start": 1953,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1963,
              "start": 1957,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1963,
                "start": 1957,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1976,
            "start": 1966,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1968,
              "start": 1966,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1976,
              "start": 1970,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1976,
                "start": 1970,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1995,
            "start": 1979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1987,
              "start": 1979,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1995,
              "start": 1989,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1995,
                "start": 1989,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2017,
            "start": 1998,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2009,
              "start": 1998,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2017,
              "start": 2011,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2017,
                "start": 2011,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2037,
            "start": 2020,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2027,
              "start": 2020,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2037,
              "start": 2029,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2036,
                "start": 2030,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2036,
                  "start": 2030,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2058,
            "start": 2040,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2050,
              "start": 2040,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2058,
              "start": 2052,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2058,
                "start": 2052,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2073,
            "start": 2061,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2063,
              "start": 2061,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2073,
              "start": 2065,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2072,
                "start": 2066,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2072,
                  "start": 2066,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2091,
            "start": 2076,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2081,
              "start": 2076,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2091,
              "start": 2083,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2090,
                "start": 2084,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2090,
                  "start": 2084,
                },
                "value": "String",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2093,
        "start": 1862,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1896,
          "start": 1868,
        },
        "value": "ModelSubscriptionStringInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2138,
            "start": 2131,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2133,
              "start": 2131,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2138,
              "start": 2135,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2138,
                "start": 2135,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2148,
            "start": 2141,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2143,
              "start": 2141,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2148,
              "start": 2145,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2148,
                "start": 2145,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2158,
            "start": 2151,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2153,
              "start": 2151,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2158,
              "start": 2155,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2158,
                "start": 2155,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2168,
            "start": 2161,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2163,
              "start": 2161,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2168,
              "start": 2165,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2168,
                "start": 2165,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2178,
            "start": 2171,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2173,
              "start": 2171,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2178,
              "start": 2175,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2178,
                "start": 2175,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2188,
            "start": 2181,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2183,
              "start": 2181,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2188,
              "start": 2185,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2188,
                "start": 2185,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2205,
            "start": 2191,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2198,
              "start": 2191,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2205,
              "start": 2200,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2204,
                "start": 2201,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2204,
                  "start": 2201,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2217,
            "start": 2208,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2210,
              "start": 2208,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2217,
              "start": 2212,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2216,
                "start": 2213,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2216,
                  "start": 2213,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2232,
            "start": 2220,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2225,
              "start": 2220,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2232,
              "start": 2227,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2231,
                "start": 2228,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2231,
                  "start": 2228,
                },
                "value": "Int",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2234,
        "start": 2095,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2126,
          "start": 2101,
        },
        "value": "ModelSubscriptionIntInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2283,
            "start": 2274,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2276,
              "start": 2274,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2283,
              "start": 2278,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2283,
                "start": 2278,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2295,
            "start": 2286,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2288,
              "start": 2286,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2295,
              "start": 2290,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2295,
                "start": 2290,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2307,
            "start": 2298,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2300,
              "start": 2298,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2307,
              "start": 2302,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2307,
                "start": 2302,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2319,
            "start": 2310,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2312,
              "start": 2310,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2319,
              "start": 2314,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2319,
                "start": 2314,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2331,
            "start": 2322,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2324,
              "start": 2322,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2331,
              "start": 2326,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2331,
                "start": 2326,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2343,
            "start": 2334,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2336,
              "start": 2334,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2343,
              "start": 2338,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2343,
                "start": 2338,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2362,
            "start": 2346,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2353,
              "start": 2346,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2362,
              "start": 2355,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2361,
                "start": 2356,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2361,
                  "start": 2356,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2376,
            "start": 2365,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2367,
              "start": 2365,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2376,
              "start": 2369,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2375,
                "start": 2370,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2375,
                  "start": 2370,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2393,
            "start": 2379,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2384,
              "start": 2379,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2393,
              "start": 2386,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2392,
                "start": 2387,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2392,
                  "start": 2387,
                },
                "value": "Float",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2395,
        "start": 2236,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2269,
          "start": 2242,
        },
        "value": "ModelSubscriptionFloatInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2448,
            "start": 2437,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2439,
              "start": 2437,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2448,
              "start": 2441,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2448,
                "start": 2441,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2462,
            "start": 2451,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2453,
              "start": 2451,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2462,
              "start": 2455,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2462,
                "start": 2455,
              },
              "value": "Boolean",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2464,
        "start": 2397,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2432,
          "start": 2403,
        },
        "value": "ModelSubscriptionBooleanInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2507,
            "start": 2501,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2503,
              "start": 2501,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2507,
              "start": 2505,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2507,
                "start": 2505,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2516,
            "start": 2510,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2512,
              "start": 2510,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2516,
              "start": 2514,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2516,
                "start": 2514,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2525,
            "start": 2519,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2521,
              "start": 2519,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2525,
              "start": 2523,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2525,
                "start": 2523,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2534,
            "start": 2528,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2530,
              "start": 2528,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2534,
              "start": 2532,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2534,
                "start": 2532,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2543,
            "start": 2537,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2539,
              "start": 2537,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2543,
              "start": 2541,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2543,
                "start": 2541,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2552,
            "start": 2546,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2548,
              "start": 2546,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2552,
              "start": 2550,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2552,
                "start": 2550,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2567,
            "start": 2555,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2563,
              "start": 2555,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2567,
              "start": 2565,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2567,
                "start": 2565,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2585,
            "start": 2570,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2581,
              "start": 2570,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2585,
              "start": 2583,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2585,
                "start": 2583,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2601,
            "start": 2588,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2595,
              "start": 2588,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2601,
              "start": 2597,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2600,
                "start": 2598,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2600,
                  "start": 2598,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2618,
            "start": 2604,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2614,
              "start": 2604,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2618,
              "start": 2616,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2618,
                "start": 2616,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2629,
            "start": 2621,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2623,
              "start": 2621,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2629,
              "start": 2625,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2628,
                "start": 2626,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2628,
                  "start": 2626,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2643,
            "start": 2632,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2637,
              "start": 2632,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2643,
              "start": 2639,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2642,
                "start": 2640,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2642,
                  "start": 2640,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2645,
        "start": 2466,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2496,
          "start": 2472,
        },
        "value": "ModelSubscriptionIDInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 2766,
        "start": 2647,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2671,
          "start": 2652,
        },
        "value": "ModelAttributeTypes",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2682,
            "start": 2676,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2682,
              "start": 2676,
            },
            "value": "binary",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2694,
            "start": 2685,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2694,
              "start": 2685,
            },
            "value": "binarySet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2701,
            "start": 2697,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2701,
              "start": 2697,
            },
            "value": "bool",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2708,
            "start": 2704,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2708,
              "start": 2704,
            },
            "value": "list",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2714,
            "start": 2711,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2714,
              "start": 2711,
            },
            "value": "map",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2723,
            "start": 2717,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2723,
              "start": 2717,
            },
            "value": "number",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2735,
            "start": 2726,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2735,
              "start": 2726,
            },
            "value": "numberSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2744,
            "start": 2738,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2744,
              "start": 2738,
            },
            "value": "string",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2756,
            "start": 2747,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2756,
              "start": 2747,
            },
            "value": "stringSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2764,
            "start": 2759,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2764,
              "start": 2759,
            },
            "value": "_null",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2800,
            "start": 2793,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2795,
              "start": 2793,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2800,
              "start": 2797,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2800,
                "start": 2797,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2810,
            "start": 2803,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2805,
              "start": 2803,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2810,
              "start": 2807,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2810,
                "start": 2807,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2820,
            "start": 2813,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2815,
              "start": 2813,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2820,
              "start": 2817,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2820,
                "start": 2817,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2830,
            "start": 2823,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2825,
              "start": 2823,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2830,
              "start": 2827,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2830,
                "start": 2827,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2840,
            "start": 2833,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2835,
              "start": 2833,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2840,
              "start": 2837,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2840,
                "start": 2837,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2850,
            "start": 2843,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2845,
              "start": 2843,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2850,
              "start": 2847,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2850,
                "start": 2847,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2867,
            "start": 2853,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2860,
              "start": 2853,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2867,
              "start": 2862,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2866,
                "start": 2863,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2866,
                  "start": 2863,
                },
                "value": "Int",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2869,
        "start": 2768,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2788,
          "start": 2774,
        },
        "value": "ModelSizeInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 2911,
        "start": 2871,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2894,
          "start": 2876,
        },
        "value": "ModelSortDirection",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2902,
            "start": 2899,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2902,
              "start": 2899,
            },
            "value": "ASC",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2909,
            "start": 2905,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2909,
              "start": 2905,
            },
            "value": "DESC",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2956,
            "start": 2942,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2947,
              "start": 2942,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 2956,
              "start": 2949,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 2955,
                "start": 2949,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2954,
                  "start": 2950,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2954,
                    "start": 2950,
                  },
                  "value": "Post",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2976,
            "start": 2959,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2968,
              "start": 2959,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2976,
              "start": 2970,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2976,
                "start": 2970,
              },
              "value": "String",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3002,
            "start": 2979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2988,
              "start": 2979,
            },
            "value": "startedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3002,
              "start": 2990,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3002,
                "start": 2990,
              },
              "value": "AWSTimestamp",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 3004,
        "start": 2913,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2937,
          "start": 2918,
        },
        "value": "ModelPostConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3053,
            "start": 3037,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3039,
              "start": 3037,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3053,
              "start": 3041,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3053,
                "start": 3041,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3079,
            "start": 3056,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3061,
              "start": 3056,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3079,
              "start": 3063,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3079,
                "start": 3063,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3109,
            "start": 3082,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3085,
              "start": 3082,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3109,
              "start": 3087,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3108,
                "start": 3088,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3108,
                  "start": 3088,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3138,
            "start": 3112,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3114,
              "start": 3112,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3138,
              "start": 3116,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3137,
                "start": 3117,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3137,
                  "start": 3117,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3166,
            "start": 3141,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3144,
              "start": 3141,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3166,
              "start": 3146,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3166,
                "start": 3146,
              },
              "value": "ModelPostFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3196,
            "start": 3169,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3177,
              "start": 3169,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3196,
              "start": 3179,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3196,
                "start": 3179,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3226,
            "start": 3199,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3208,
              "start": 3199,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3226,
              "start": 3210,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3226,
                "start": 3210,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3256,
            "start": 3229,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3238,
              "start": 3229,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3256,
              "start": 3240,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3256,
                "start": 3240,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3258,
        "start": 3006,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3032,
          "start": 3012,
        },
        "value": "ModelPostFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3290,
                "start": 3283,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3285,
                  "start": 3283,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3290,
                  "start": 3287,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3289,
                    "start": 3287,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3289,
                      "start": 3287,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3297,
            "start": 3275,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3282,
              "start": 3275,
            },
            "value": "getPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3297,
              "start": 3293,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3297,
                "start": 3293,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3338,
                "start": 3310,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3316,
                  "start": 3310,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3338,
                  "start": 3318,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3338,
                    "start": 3318,
                  },
                  "value": "ModelPostFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3350,
                "start": 3340,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3345,
                  "start": 3340,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3350,
                  "start": 3347,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3350,
                    "start": 3347,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3369,
                "start": 3352,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3361,
                  "start": 3352,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3369,
                  "start": 3363,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3369,
                    "start": 3363,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3391,
            "start": 3300,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3309,
              "start": 3300,
            },
            "value": "listPosts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3391,
              "start": 3372,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3391,
                "start": 3372,
              },
              "value": "ModelPostConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3432,
                "start": 3404,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3410,
                  "start": 3404,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3432,
                  "start": 3412,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3432,
                    "start": 3412,
                  },
                  "value": "ModelPostFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3444,
                "start": 3434,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3439,
                  "start": 3434,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3444,
                  "start": 3441,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3444,
                    "start": 3441,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3463,
                "start": 3446,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3455,
                  "start": 3446,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3463,
                  "start": 3457,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3463,
                    "start": 3457,
                  },
                  "value": "String",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3487,
                "start": 3465,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3473,
                  "start": 3465,
                },
                "value": "lastSync",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3487,
                  "start": 3475,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3487,
                    "start": 3475,
                  },
                  "value": "AWSTimestamp",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3509,
            "start": 3394,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3403,
              "start": 3394,
            },
            "value": "syncPosts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3509,
              "start": 3490,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3509,
                "start": 3490,
              },
              "value": "ModelPostConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3527,
                "start": 3520,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3522,
                  "start": 3520,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3527,
                  "start": 3524,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3526,
                    "start": 3524,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3526,
                      "start": 3524,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3534,
            "start": 3512,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3519,
              "start": 3512,
            },
            "value": "getUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3534,
              "start": 3530,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3534,
                "start": 3530,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3575,
                "start": 3547,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3553,
                  "start": 3547,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3575,
                  "start": 3555,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3575,
                    "start": 3555,
                  },
                  "value": "ModelUserFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3587,
                "start": 3577,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3582,
                  "start": 3577,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3587,
                  "start": 3584,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3587,
                    "start": 3584,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3606,
                "start": 3589,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3598,
                  "start": 3589,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3606,
                  "start": 3600,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3606,
                    "start": 3600,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3628,
            "start": 3537,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3546,
              "start": 3537,
            },
            "value": "listUsers",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3628,
              "start": 3609,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3628,
                "start": 3609,
              },
              "value": "ModelUserConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3669,
                "start": 3641,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3647,
                  "start": 3641,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3669,
                  "start": 3649,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3669,
                    "start": 3649,
                  },
                  "value": "ModelUserFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3681,
                "start": 3671,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3676,
                  "start": 3671,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3681,
                  "start": 3678,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3681,
                    "start": 3678,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3700,
                "start": 3683,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3692,
                  "start": 3683,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3700,
                  "start": 3694,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3700,
                    "start": 3694,
                  },
                  "value": "String",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3724,
                "start": 3702,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3710,
                  "start": 3702,
                },
                "value": "lastSync",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3724,
                  "start": 3712,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3724,
                    "start": 3712,
                  },
                  "value": "AWSTimestamp",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3746,
            "start": 3631,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3640,
              "start": 3631,
            },
            "value": "syncUsers",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3746,
              "start": 3727,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3746,
                "start": 3727,
              },
              "value": "ModelUserConnection",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 3748,
        "start": 3260,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3270,
          "start": 3265,
        },
        "value": "Query",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3807,
            "start": 3784,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3789,
              "start": 3784,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3807,
              "start": 3791,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3807,
                "start": 3791,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3840,
            "start": 3810,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3813,
              "start": 3810,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3840,
              "start": 3815,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3839,
                "start": 3816,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3839,
                  "start": 3816,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3872,
            "start": 3843,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3845,
              "start": 3843,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3872,
              "start": 3847,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3871,
                "start": 3848,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3871,
                  "start": 3848,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3903,
            "start": 3875,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3878,
              "start": 3875,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3903,
              "start": 3880,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3903,
                "start": 3880,
              },
              "value": "ModelPostConditionInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3933,
            "start": 3906,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3914,
              "start": 3906,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3933,
              "start": 3916,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3933,
                "start": 3916,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3963,
            "start": 3936,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3945,
              "start": 3936,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3963,
              "start": 3947,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3963,
                "start": 3947,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3993,
            "start": 3966,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3975,
              "start": 3966,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3993,
              "start": 3977,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3993,
                "start": 3977,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3995,
        "start": 3750,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3779,
          "start": 3756,
        },
        "value": "ModelPostConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4029,
            "start": 4023,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4025,
              "start": 4023,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4029,
              "start": 4027,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4029,
                "start": 4027,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4046,
            "start": 4032,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4037,
              "start": 4032,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4046,
              "start": 4039,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4045,
                "start": 4039,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4045,
                  "start": 4039,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4062,
            "start": 4049,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4057,
              "start": 4049,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4062,
              "start": 4059,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4062,
                "start": 4059,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4064,
        "start": 3997,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4018,
          "start": 4003,
        },
        "value": "CreatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4099,
            "start": 4092,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4094,
              "start": 4092,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4099,
              "start": 4096,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4098,
                "start": 4096,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4098,
                  "start": 4096,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4115,
            "start": 4102,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4107,
              "start": 4102,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4115,
              "start": 4109,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4115,
                "start": 4109,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4131,
            "start": 4118,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4126,
              "start": 4118,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4131,
              "start": 4128,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4131,
                "start": 4128,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4133,
        "start": 4066,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4087,
          "start": 4072,
        },
        "value": "UpdatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4168,
            "start": 4161,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4163,
              "start": 4161,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4168,
              "start": 4165,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4167,
                "start": 4165,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4167,
                  "start": 4165,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4184,
            "start": 4171,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4179,
              "start": 4171,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4184,
              "start": 4181,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4184,
                "start": 4181,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4186,
        "start": 4135,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4156,
          "start": 4141,
        },
        "value": "DeletePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4240,
                "start": 4217,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4222,
                  "start": 4217,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4240,
                  "start": 4224,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4239,
                    "start": 4224,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4239,
                      "start": 4224,
                    },
                    "value": "CreatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4276,
                "start": 4242,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4251,
                  "start": 4242,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4276,
                  "start": 4253,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4276,
                    "start": 4253,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4283,
            "start": 4206,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4216,
              "start": 4206,
            },
            "value": "createPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4283,
              "start": 4279,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4283,
                "start": 4279,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4320,
                "start": 4297,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4302,
                  "start": 4297,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4320,
                  "start": 4304,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4319,
                    "start": 4304,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4319,
                      "start": 4304,
                    },
                    "value": "UpdatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4356,
                "start": 4322,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4331,
                  "start": 4322,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4356,
                  "start": 4333,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4356,
                    "start": 4333,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4363,
            "start": 4286,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4296,
              "start": 4286,
            },
            "value": "updatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4363,
              "start": 4359,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4363,
                "start": 4359,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4400,
                "start": 4377,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4382,
                  "start": 4377,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4400,
                  "start": 4384,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4399,
                    "start": 4384,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4399,
                      "start": 4384,
                    },
                    "value": "DeletePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4436,
                "start": 4402,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4411,
                  "start": 4402,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4436,
                  "start": 4413,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4436,
                    "start": 4413,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4443,
            "start": 4366,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4376,
              "start": 4366,
            },
            "value": "deletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4443,
              "start": 4439,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4443,
                "start": 4439,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4492,
                "start": 4463,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4468,
                  "start": 4463,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4492,
                  "start": 4470,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4491,
                    "start": 4470,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4491,
                      "start": 4470,
                    },
                    "value": "CreatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4534,
                "start": 4494,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4503,
                  "start": 4494,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4534,
                  "start": 4505,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4534,
                    "start": 4505,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4547,
            "start": 4446,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4462,
              "start": 4446,
            },
            "value": "createPostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4547,
              "start": 4537,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4547,
                "start": 4537,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4596,
                "start": 4567,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4572,
                  "start": 4567,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4596,
                  "start": 4574,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4595,
                    "start": 4574,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4595,
                      "start": 4574,
                    },
                    "value": "UpdatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4638,
                "start": 4598,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4607,
                  "start": 4598,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4638,
                  "start": 4609,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4638,
                    "start": 4609,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4651,
            "start": 4550,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4566,
              "start": 4550,
            },
            "value": "updatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4651,
              "start": 4641,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4651,
                "start": 4641,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4700,
                "start": 4671,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4676,
                  "start": 4671,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4700,
                  "start": 4678,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4699,
                    "start": 4678,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4699,
                      "start": 4678,
                    },
                    "value": "DeletePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4742,
                "start": 4702,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4711,
                  "start": 4702,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4742,
                  "start": 4713,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4742,
                    "start": 4713,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4755,
            "start": 4654,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4670,
              "start": 4654,
            },
            "value": "deletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4755,
              "start": 4745,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4755,
                "start": 4745,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4792,
                "start": 4769,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4774,
                  "start": 4769,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4792,
                  "start": 4776,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4791,
                    "start": 4776,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4791,
                      "start": 4776,
                    },
                    "value": "CreateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4828,
                "start": 4794,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4803,
                  "start": 4794,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4828,
                  "start": 4805,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4828,
                    "start": 4805,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4835,
            "start": 4758,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4768,
              "start": 4758,
            },
            "value": "createUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4835,
              "start": 4831,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4835,
                "start": 4831,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4872,
                "start": 4849,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4854,
                  "start": 4849,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4872,
                  "start": 4856,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4871,
                    "start": 4856,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4871,
                      "start": 4856,
                    },
                    "value": "UpdateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4908,
                "start": 4874,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4883,
                  "start": 4874,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4908,
                  "start": 4885,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4908,
                    "start": 4885,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4915,
            "start": 4838,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4848,
              "start": 4838,
            },
            "value": "updateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4915,
              "start": 4911,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4915,
                "start": 4911,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4952,
                "start": 4929,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4934,
                  "start": 4929,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4952,
                  "start": 4936,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4951,
                    "start": 4936,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4951,
                      "start": 4936,
                    },
                    "value": "DeleteUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4988,
                "start": 4954,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4963,
                  "start": 4954,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4988,
                  "start": 4965,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4988,
                    "start": 4965,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4995,
            "start": 4918,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4928,
              "start": 4918,
            },
            "value": "deleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4995,
              "start": 4991,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4995,
                "start": 4991,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 4997,
        "start": 4188,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4201,
          "start": 4193,
        },
        "value": "Mutation",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5070,
            "start": 5042,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5044,
              "start": 5042,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5070,
              "start": 5046,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5070,
                "start": 5046,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5108,
            "start": 5073,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5078,
              "start": 5073,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5108,
              "start": 5080,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5108,
                "start": 5080,
              },
              "value": "ModelSubscriptionStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5150,
            "start": 5111,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5114,
              "start": 5111,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5150,
              "start": 5116,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5149,
                "start": 5117,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5149,
                  "start": 5117,
                },
                "value": "ModelSubscriptionPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5191,
            "start": 5153,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5155,
              "start": 5153,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5191,
              "start": 5157,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5190,
                "start": 5158,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5190,
                  "start": 5158,
                },
                "value": "ModelSubscriptionPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5221,
            "start": 5194,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5202,
              "start": 5194,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5221,
              "start": 5204,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5221,
                "start": 5204,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5251,
            "start": 5224,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5233,
              "start": 5224,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5251,
              "start": 5235,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5251,
                "start": 5235,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5281,
            "start": 5254,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5263,
              "start": 5254,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5281,
              "start": 5265,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5281,
                "start": 5265,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5283,
        "start": 4999,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5037,
          "start": 5005,
        },
        "value": "ModelSubscriptionPostFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5360,
                "start": 5320,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5326,
                  "start": 5320,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5360,
                  "start": 5328,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5360,
                    "start": 5328,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5408,
                    "start": 5383,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5392,
                      "start": 5383,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5408,
                      "start": 5394,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5407,
                          "start": 5395,
                        },
                        "value": "createPost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5409,
                "start": 5368,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5382,
                  "start": 5369,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5409,
            "start": 5307,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5319,
              "start": 5307,
            },
            "value": "onCreatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5367,
              "start": 5363,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5367,
                "start": 5363,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5465,
                "start": 5425,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5431,
                  "start": 5425,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5465,
                  "start": 5433,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5465,
                    "start": 5433,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5513,
                    "start": 5488,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5497,
                      "start": 5488,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5513,
                      "start": 5499,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5512,
                          "start": 5500,
                        },
                        "value": "updatePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5514,
                "start": 5473,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5487,
                  "start": 5474,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5514,
            "start": 5412,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5424,
              "start": 5412,
            },
            "value": "onUpdatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5472,
              "start": 5468,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5472,
                "start": 5468,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5570,
                "start": 5530,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5536,
                  "start": 5530,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5570,
                  "start": 5538,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5570,
                    "start": 5538,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5618,
                    "start": 5593,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5602,
                      "start": 5593,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5618,
                      "start": 5604,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5617,
                          "start": 5605,
                        },
                        "value": "deletePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5619,
                "start": 5578,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5592,
                  "start": 5579,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5619,
            "start": 5517,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5529,
              "start": 5517,
            },
            "value": "onDeletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5577,
              "start": 5573,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5577,
                "start": 5573,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5687,
                "start": 5641,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5647,
                  "start": 5641,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5687,
                  "start": 5649,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5687,
                    "start": 5649,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5747,
                    "start": 5716,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5725,
                      "start": 5716,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5747,
                      "start": 5727,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5746,
                          "start": 5728,
                        },
                        "value": "createPostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5748,
                "start": 5701,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5715,
                  "start": 5702,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5748,
            "start": 5622,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5640,
              "start": 5622,
            },
            "value": "onCreatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5700,
              "start": 5690,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5700,
                "start": 5690,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5816,
                "start": 5770,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5776,
                  "start": 5770,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5816,
                  "start": 5778,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5816,
                    "start": 5778,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5876,
                    "start": 5845,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5854,
                      "start": 5845,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5876,
                      "start": 5856,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5875,
                          "start": 5857,
                        },
                        "value": "updatePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5877,
                "start": 5830,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5844,
                  "start": 5831,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5877,
            "start": 5751,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5769,
              "start": 5751,
            },
            "value": "onUpdatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5829,
              "start": 5819,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5829,
                "start": 5819,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5945,
                "start": 5899,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5905,
                  "start": 5899,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5945,
                  "start": 5907,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5945,
                    "start": 5907,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 6005,
                    "start": 5974,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5983,
                      "start": 5974,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 6005,
                      "start": 5985,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 6004,
                          "start": 5986,
                        },
                        "value": "deletePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 6006,
                "start": 5959,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5973,
                  "start": 5960,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6006,
            "start": 5880,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5898,
              "start": 5880,
            },
            "value": "onDeletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5958,
              "start": 5948,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5958,
                "start": 5948,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 6062,
                "start": 6022,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6028,
                  "start": 6022,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 6062,
                  "start": 6030,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 6062,
                    "start": 6030,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 6110,
                    "start": 6085,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 6094,
                      "start": 6085,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 6110,
                      "start": 6096,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 6109,
                          "start": 6097,
                        },
                        "value": "createUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 6111,
                "start": 6070,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6084,
                  "start": 6071,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6111,
            "start": 6009,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6021,
              "start": 6009,
            },
            "value": "onCreateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6069,
              "start": 6065,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6069,
                "start": 6065,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 6167,
                "start": 6127,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6133,
                  "start": 6127,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 6167,
                  "start": 6135,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 6167,
                    "start": 6135,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 6215,
                    "start": 6190,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 6199,
                      "start": 6190,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 6215,
                      "start": 6201,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 6214,
                          "start": 6202,
                        },
                        "value": "updateUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 6216,
                "start": 6175,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6189,
                  "start": 6176,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6216,
            "start": 6114,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6126,
              "start": 6114,
            },
            "value": "onUpdateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6174,
              "start": 6170,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6174,
                "start": 6170,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 6272,
                "start": 6232,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6238,
                  "start": 6232,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 6272,
                  "start": 6240,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 6272,
                    "start": 6240,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 6320,
                    "start": 6295,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 6304,
                      "start": 6295,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 6320,
                      "start": 6306,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 6319,
                          "start": 6307,
                        },
                        "value": "deleteUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 6321,
                "start": 6280,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6294,
                  "start": 6281,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6321,
            "start": 6219,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6231,
              "start": 6219,
            },
            "value": "onDeleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6279,
              "start": 6275,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6279,
                "start": 6275,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 6323,
        "start": 5285,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5302,
          "start": 5290,
        },
        "value": "Subscription",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6385,
            "start": 6365,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6371,
              "start": 6365,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6385,
              "start": 6373,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6385,
                "start": 6373,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6410,
            "start": 6388,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6396,
              "start": 6388,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6410,
              "start": 6398,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6410,
                "start": 6398,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6449,
            "start": 6413,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6416,
              "start": 6413,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6449,
              "start": 6418,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6448,
                "start": 6419,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6448,
                  "start": 6419,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6487,
            "start": 6452,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6454,
              "start": 6452,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6487,
              "start": 6456,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6486,
                "start": 6457,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6486,
                  "start": 6457,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6524,
            "start": 6490,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6493,
              "start": 6490,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6524,
              "start": 6495,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6524,
                "start": 6495,
              },
              "value": "ModelPostEditorConditionInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6554,
            "start": 6527,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6535,
              "start": 6527,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6554,
              "start": 6537,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6554,
                "start": 6537,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6584,
            "start": 6557,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6566,
              "start": 6557,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6584,
              "start": 6568,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6584,
                "start": 6568,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6614,
            "start": 6587,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6596,
              "start": 6587,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6614,
              "start": 6598,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6614,
                "start": 6598,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6616,
        "start": 6325,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6360,
          "start": 6331,
        },
        "value": "ModelPostEditorConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6656,
            "start": 6650,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6652,
              "start": 6650,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6656,
              "start": 6654,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6656,
                "start": 6654,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6670,
            "start": 6659,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6665,
              "start": 6659,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6670,
              "start": 6667,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6669,
                "start": 6667,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6669,
                  "start": 6667,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6686,
            "start": 6673,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6681,
              "start": 6673,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6686,
              "start": 6683,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6685,
                "start": 6683,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6685,
                  "start": 6683,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6702,
            "start": 6689,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6697,
              "start": 6689,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6702,
              "start": 6699,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6702,
                "start": 6699,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6704,
        "start": 6618,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6645,
          "start": 6624,
        },
        "value": "CreatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6745,
            "start": 6738,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6740,
              "start": 6738,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6745,
              "start": 6742,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6744,
                "start": 6742,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6744,
                  "start": 6742,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6758,
            "start": 6748,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6754,
              "start": 6748,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6758,
              "start": 6756,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6758,
                "start": 6756,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6773,
            "start": 6761,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6769,
              "start": 6761,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6773,
              "start": 6771,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6773,
                "start": 6771,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6789,
            "start": 6776,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6784,
              "start": 6776,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6789,
              "start": 6786,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6789,
                "start": 6786,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6791,
        "start": 6706,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6733,
          "start": 6712,
        },
        "value": "UpdatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6832,
            "start": 6825,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6827,
              "start": 6825,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6832,
              "start": 6829,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6831,
                "start": 6829,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6831,
                  "start": 6829,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6848,
            "start": 6835,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6843,
              "start": 6835,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6848,
              "start": 6845,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6848,
                "start": 6845,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6850,
        "start": 6793,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6820,
          "start": 6799,
        },
        "value": "DeletePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6929,
            "start": 6901,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6903,
              "start": 6901,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6929,
              "start": 6905,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6929,
                "start": 6905,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6964,
            "start": 6932,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6938,
              "start": 6932,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6964,
              "start": 6940,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6964,
                "start": 6940,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7001,
            "start": 6967,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6975,
              "start": 6967,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7001,
              "start": 6977,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7001,
                "start": 6977,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7049,
            "start": 7004,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7007,
              "start": 7004,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7049,
              "start": 7009,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7048,
                "start": 7010,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7048,
                  "start": 7010,
                },
                "value": "ModelSubscriptionPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7096,
            "start": 7052,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7054,
              "start": 7052,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7096,
              "start": 7056,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7095,
                "start": 7057,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7095,
                  "start": 7057,
                },
                "value": "ModelSubscriptionPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7126,
            "start": 7099,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7107,
              "start": 7099,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7126,
              "start": 7109,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7126,
                "start": 7109,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7156,
            "start": 7129,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7138,
              "start": 7129,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7156,
              "start": 7140,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7156,
                "start": 7140,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7186,
            "start": 7159,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7168,
              "start": 7159,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7186,
              "start": 7170,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7186,
                "start": 7170,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7188,
        "start": 6852,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6896,
          "start": 6858,
        },
        "value": "ModelSubscriptionPostEditorFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 7233,
            "start": 7219,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7224,
              "start": 7219,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7233,
              "start": 7226,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 7232,
                "start": 7226,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 7231,
                  "start": 7227,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 7231,
                    "start": 7227,
                  },
                  "value": "User",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 7253,
            "start": 7236,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7245,
              "start": 7236,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7253,
              "start": 7247,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7253,
                "start": 7247,
              },
              "value": "String",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 7279,
            "start": 7256,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7265,
              "start": 7256,
            },
            "value": "startedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7279,
              "start": 7267,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7279,
                "start": 7267,
              },
              "value": "AWSTimestamp",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 7281,
        "start": 7190,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7214,
          "start": 7195,
        },
        "value": "ModelUserConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7330,
            "start": 7314,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7316,
              "start": 7314,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7330,
              "start": 7318,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7330,
                "start": 7318,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7359,
            "start": 7333,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7341,
              "start": 7333,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7359,
              "start": 7343,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7359,
                "start": 7343,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7389,
            "start": 7362,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7365,
              "start": 7362,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7389,
              "start": 7367,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7388,
                "start": 7368,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7388,
                  "start": 7368,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7418,
            "start": 7392,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7394,
              "start": 7392,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7418,
              "start": 7396,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7417,
                "start": 7397,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7417,
                  "start": 7397,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7446,
            "start": 7421,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7424,
              "start": 7421,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7446,
              "start": 7426,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7446,
                "start": 7426,
              },
              "value": "ModelUserFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7476,
            "start": 7449,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7457,
              "start": 7449,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7476,
              "start": 7459,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7476,
                "start": 7459,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7506,
            "start": 7479,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7488,
              "start": 7479,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7506,
              "start": 7490,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7506,
                "start": 7490,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7536,
            "start": 7509,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7518,
              "start": 7509,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7536,
              "start": 7520,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7536,
                "start": 7520,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7538,
        "start": 7283,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7309,
          "start": 7289,
        },
        "value": "ModelUserFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7600,
            "start": 7574,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7582,
              "start": 7574,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7600,
              "start": 7584,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7600,
                "start": 7584,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7633,
            "start": 7603,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7606,
              "start": 7603,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7633,
              "start": 7608,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7632,
                "start": 7609,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7632,
                  "start": 7609,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7665,
            "start": 7636,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7638,
              "start": 7636,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7665,
              "start": 7640,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7664,
                "start": 7641,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7664,
                  "start": 7641,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7696,
            "start": 7668,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7671,
              "start": 7668,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7696,
              "start": 7673,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7696,
                "start": 7673,
              },
              "value": "ModelUserConditionInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7726,
            "start": 7699,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7707,
              "start": 7699,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7726,
              "start": 7709,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7726,
                "start": 7709,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7756,
            "start": 7729,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7738,
              "start": 7729,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7756,
              "start": 7740,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7756,
                "start": 7740,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7786,
            "start": 7759,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7768,
              "start": 7759,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7786,
              "start": 7770,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7786,
                "start": 7770,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7788,
        "start": 7540,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7569,
          "start": 7546,
        },
        "value": "ModelUserConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7822,
            "start": 7816,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7818,
              "start": 7816,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7822,
              "start": 7820,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7822,
                "start": 7820,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7842,
            "start": 7825,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7833,
              "start": 7825,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7842,
              "start": 7835,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7841,
                "start": 7835,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7841,
                  "start": 7835,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7858,
            "start": 7845,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7853,
              "start": 7845,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7858,
              "start": 7855,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7858,
                "start": 7855,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7860,
        "start": 7790,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7811,
          "start": 7796,
        },
        "value": "CreateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7895,
            "start": 7888,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7890,
              "start": 7888,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7895,
              "start": 7892,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7894,
                "start": 7892,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7894,
                  "start": 7892,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7914,
            "start": 7898,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7906,
              "start": 7898,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7914,
              "start": 7908,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7914,
                "start": 7908,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7930,
            "start": 7917,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7925,
              "start": 7917,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7930,
              "start": 7927,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7930,
                "start": 7927,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7932,
        "start": 7862,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7883,
          "start": 7868,
        },
        "value": "UpdateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7967,
            "start": 7960,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7962,
              "start": 7960,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7967,
              "start": 7964,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7966,
                "start": 7964,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7966,
                  "start": 7964,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7983,
            "start": 7970,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7978,
              "start": 7970,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7983,
              "start": 7980,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7983,
                "start": 7980,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7985,
        "start": 7934,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7955,
          "start": 7940,
        },
        "value": "DeleteUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8058,
            "start": 8030,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8032,
              "start": 8030,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8058,
              "start": 8034,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8058,
                "start": 8034,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8099,
            "start": 8061,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8069,
              "start": 8061,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8099,
              "start": 8071,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8099,
                "start": 8071,
              },
              "value": "ModelSubscriptionStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8141,
            "start": 8102,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8105,
              "start": 8102,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 8141,
              "start": 8107,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 8140,
                "start": 8108,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 8140,
                  "start": 8108,
                },
                "value": "ModelSubscriptionUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8182,
            "start": 8144,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8146,
              "start": 8144,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 8182,
              "start": 8148,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 8181,
                "start": 8149,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 8181,
                  "start": 8149,
                },
                "value": "ModelSubscriptionUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8212,
            "start": 8185,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8193,
              "start": 8185,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8212,
              "start": 8195,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8212,
                "start": 8195,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8242,
            "start": 8215,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8224,
              "start": 8215,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8242,
              "start": 8226,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8242,
                "start": 8226,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8272,
            "start": 8245,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8254,
              "start": 8245,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8272,
              "start": 8256,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8272,
                "start": 8256,
              },
              "value": "ModelStringInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 8274,
        "start": 7987,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 8025,
          "start": 7993,
        },
        "value": "ModelSubscriptionUserFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8317,
            "start": 8311,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8313,
              "start": 8311,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8317,
              "start": 8315,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8317,
                "start": 8315,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8326,
            "start": 8320,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8322,
              "start": 8320,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8326,
              "start": 8324,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8326,
                "start": 8324,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8335,
            "start": 8329,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8331,
              "start": 8329,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8335,
              "start": 8333,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8335,
                "start": 8333,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8344,
            "start": 8338,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8340,
              "start": 8338,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8344,
              "start": 8342,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8344,
                "start": 8342,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8353,
            "start": 8347,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8349,
              "start": 8347,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8353,
              "start": 8351,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8353,
                "start": 8351,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8369,
            "start": 8356,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8363,
              "start": 8356,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 8369,
              "start": 8365,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 8368,
                "start": 8366,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 8368,
                  "start": 8366,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8386,
            "start": 8372,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8382,
              "start": 8372,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8386,
              "start": 8384,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8386,
                "start": 8384,
              },
              "value": "ID",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 8388,
        "start": 8276,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 8306,
          "start": 8282,
        },
        "value": "ModelIDKeyConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 8445,
            "start": 8425,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8430,
              "start": 8425,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 8445,
              "start": 8432,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 8444,
                "start": 8432,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 8443,
                  "start": 8433,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 8443,
                    "start": 8433,
                  },
                  "value": "PostEditor",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 8465,
            "start": 8448,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8457,
              "start": 8448,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8465,
              "start": 8459,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8465,
                "start": 8459,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 8467,
        "start": 8390,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 8420,
          "start": 8395,
        },
        "value": "ModelPostEditorConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8522,
            "start": 8506,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8508,
              "start": 8506,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8522,
              "start": 8510,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8522,
                "start": 8510,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8545,
            "start": 8525,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8531,
              "start": 8525,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8545,
              "start": 8533,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8545,
                "start": 8533,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8570,
            "start": 8548,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8556,
              "start": 8548,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8570,
              "start": 8558,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8570,
                "start": 8558,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8606,
            "start": 8573,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8576,
              "start": 8573,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 8606,
              "start": 8578,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 8605,
                "start": 8579,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 8605,
                  "start": 8579,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8641,
            "start": 8609,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8611,
              "start": 8609,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 8641,
              "start": 8613,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 8640,
                "start": 8614,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 8640,
                  "start": 8614,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8675,
            "start": 8644,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8647,
              "start": 8644,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8675,
              "start": 8649,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8675,
                "start": 8649,
              },
              "value": "ModelPostEditorFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8705,
            "start": 8678,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8686,
              "start": 8678,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8705,
              "start": 8688,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8705,
                "start": 8688,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 8707,
        "start": 8469,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 8501,
          "start": 8475,
        },
        "value": "ModelPostEditorFilterInput",
      },
    },
  ],
  "kind": "Document",
  "loc": Object {
    "end": 8708,
    "start": 0,
  },
}
`;

exports[`validates VTL of a complex schema 1`] = `
Object {
  "Child.parents.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"id\\"), $ctx.source.id) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"childID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.childName.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.childName.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byChild\\"
  }
#end",
  "Child.parents.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Friendship.friend.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"friendID\\"), $ctx.source.friendID) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Friendship.friend.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Mutation.createChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createChild.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Child\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createFriendship.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Friendship\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"userID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createParent.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Parent\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"childID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPost.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPostAuthor.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostAuthor\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"authorID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPostModel.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostModel\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.createUser.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"User\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate create mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $mergedValues.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$mergedValues.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When creating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate create mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.createUserModel.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"UserModel\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"id\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteChild.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteFriendship.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteParent.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePost.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePostAuthor.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePostModel.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUser.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.deleteUserModel.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateChild.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateFriendship.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateParent.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePost.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePostAuthor.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePostModel.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.updateUser.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate update mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $mergedValues.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$mergedValues.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When updating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate update mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.updateUserModel.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Parent.child.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"childID\\"), $ctx.source.childID) )
#if( $util.isNull($partitionKeyValue) || $util.isNull($ctx.source.childName) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue AND #sortKeyName = :sortKeyName\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKeyName\\": \\"name\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($partitionKeyValue, \\"___xamznone____\\"))),
      \\":sortKeyName\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.childName, \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "Parent.child.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "Post.authors.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"authorID\\"), $ctx.source.authorID) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 50) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Post.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostAuthor.post.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"postID\\"), $ctx.source.postID) )
#if( $util.isNull($partitionKeyValue) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($partitionKeyValue, \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "PostAuthor.post.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "PostModel.authors.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"authorID\\"), $ctx.source.authorID) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $sortKeyValue0 = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"authorName\\"), $ctx.source.authorName) )
  #set( $sortKeyValue1 = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"authorSurname\\"), $ctx.source.authorSurname) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey AND #sortKey = :sortKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKey\\": \\"name#surname\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue),
      \\":sortKey\\": $util.dynamodb.toDynamoDB(\\"\${sortKeyValue0}#\${sortKeyValue1}\\")
  }
} )
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"composite\\"
  }
#end",
  "PostModel.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostModel.singleAuthor.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"authorID\\"), $ctx.source.authorID) )
#if( $util.isNull($partitionKeyValue) || $util.isNull($ctx.source.authorName) || $util.isNull($ctx.source.authorSurname) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue AND #sortKeyName = :sortKeyName\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKeyName\\": \\"name#surname\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($partitionKeyValue, \\"___xamznone____\\"))),
      \\":sortKeyName\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank(\\"\${ctx.source.authorName}#\${ctx.source.authorSurname}\\", \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "PostModel.singleAuthor.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "Query.getChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getChild.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name\\": $util.dynamodb.toDynamoDB($ctx.args.name)
}))
## [End] Set the primary key. **
{}",
  "Query.getChild.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getChild.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getFriendship.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getFriendship.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getParent.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getParent.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPost.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPost.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPostAuthor.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostAuthor.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPostModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostModel.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getUser.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${ctx.args.name}#\${ctx.args.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Query.getUser.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUser.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getUserModel.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($ctx.args.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Query.getUserModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUserModel.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.listChildren.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listChildren.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.name) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'name' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.name.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.name.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.eq\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.lt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.le\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.gt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listChildren.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listChildren.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listFriendships.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listFriendships.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listFriendships.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listParents.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listParents.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listParents.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPostAuthors.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPostAuthors.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostAuthors.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPostModels.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPostModels.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostModels.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPosts.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listUserModels.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listUserModels.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.rollNumber) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'rollNumber' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"N\\": \\"$ctx.args.rollNumber.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"N\\": \\"$ctx.args.rollNumber.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.eq\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.lt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.le\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.gt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUserModels.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUserModels.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listUsers.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listUsers.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.nameSurname) && $util.isNullOrBlank($ctx.args.id) )
  $util.error(\\"When providing argument 'nameSurname' you must also provide 'id'.\\", \\"InvalidArgumentsError\\")
#end
#if( !$util.isNull($ctx.args.nameSurname) )
  #set( $sortKeyArgumentOperations = $ctx.args.nameSurname.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error(\\"Argument nameSurname must specify at most one key condition operation.\\", \\"InvalidArgumentsError\\")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == \\"between\\" )
      #if( $ctx.args.nameSurname.between.size() != 2 )
        $util.error(\\"Argument 'nameSurname.between' expects exactly two elements.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[0].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[0].name) )
        $util.error(\\"When providing argument 'nameSurname.between[0].surname' you must also provide 'nameSurname.between[0].name'.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[1].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[1].name) )
        $util.error(\\"When providing argument 'nameSurname.between[1].surname' you must also provide 'nameSurname.between[1].name'.\\", \\"InvalidArgumentsError\\")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").surname) && $util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").name) )
        $util.error(\\"When providing argument 'nameSurname.$operation.surname' you must also provide 'nameSurname.$operation.name'.\\", \\"InvalidArgumentsError\\")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = \\"\\" )
#set( $sortKeyValue2 = \\"\\" )
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
  #if( $ctx.args.nameSurname.between.size() != 2 )
    $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
  #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUsers.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUsers.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "User.friendships.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"id\\"), $ctx.source.id) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"userID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.friendID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.friendID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byUser\\"
  }
#end",
  "User.friendships.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "UserModel.authorPosts.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"id\\"), $ctx.source.id) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"authorID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.postID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.postID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byAuthor\\"
  }
#end",
  "UserModel.authorPosts.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
}
`;
