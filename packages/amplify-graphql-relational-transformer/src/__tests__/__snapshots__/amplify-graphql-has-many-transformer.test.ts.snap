// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@hasMany directive with RDS datasource composite key should generate correct resolvers 1`] = `
"type System {
  systemId: String!
  systemName: String!
  details: String
  parts(filter: ModelPartFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPartConnection
}

type Part {
  partId: String!
  partName: String
  systemId: String!
  systemName: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelSystemConnection {
  items: [System]!
  nextToken: String
}

input ModelSystemFilterInput {
  systemId: ModelStringInput
  systemName: ModelStringInput
  details: ModelStringInput
  and: [ModelSystemFilterInput]
  or: [ModelSystemFilterInput]
  not: ModelSystemFilterInput
}

type Query {
  getSystem(systemId: String!, systemName: String!): System
  listSystems(systemId: String, filter: ModelSystemFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelSystemConnection
  getPart(partId: String!): Part
  listParts(partId: String, filter: ModelPartFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPartConnection
}

input ModelSystemConditionInput {
  details: ModelStringInput
  and: [ModelSystemConditionInput]
  or: [ModelSystemConditionInput]
  not: ModelSystemConditionInput
}

input CreateSystemInput {
  systemId: String!
  systemName: String!
  details: String
}

input UpdateSystemInput {
  systemId: String!
  systemName: String!
  details: String
}

input DeleteSystemInput {
  systemId: String!
  systemName: String!
}

type Mutation {
  createSystem(input: CreateSystemInput!, condition: ModelSystemConditionInput): System
  updateSystem(input: UpdateSystemInput!, condition: ModelSystemConditionInput): System
  deleteSystem(input: DeleteSystemInput!, condition: ModelSystemConditionInput): System
  createPart(input: CreatePartInput!, condition: ModelPartConditionInput): Part
  updatePart(input: UpdatePartInput!, condition: ModelPartConditionInput): Part
  deletePart(input: DeletePartInput!, condition: ModelPartConditionInput): Part
}

input ModelSubscriptionSystemFilterInput {
  systemId: ModelSubscriptionStringInput
  systemName: ModelSubscriptionStringInput
  details: ModelSubscriptionStringInput
  and: [ModelSubscriptionSystemFilterInput]
  or: [ModelSubscriptionSystemFilterInput]
}

type Subscription {
  onCreateSystem(filter: ModelSubscriptionSystemFilterInput): System @aws_subscribe(mutations: [\\"createSystem\\"])
  onUpdateSystem(filter: ModelSubscriptionSystemFilterInput): System @aws_subscribe(mutations: [\\"updateSystem\\"])
  onDeleteSystem(filter: ModelSubscriptionSystemFilterInput): System @aws_subscribe(mutations: [\\"deleteSystem\\"])
  onCreatePart(filter: ModelSubscriptionPartFilterInput): Part @aws_subscribe(mutations: [\\"createPart\\"])
  onUpdatePart(filter: ModelSubscriptionPartFilterInput): Part @aws_subscribe(mutations: [\\"updatePart\\"])
  onDeletePart(filter: ModelSubscriptionPartFilterInput): Part @aws_subscribe(mutations: [\\"deletePart\\"])
}

type ModelPartConnection {
  items: [Part]!
  nextToken: String
}

input ModelPartFilterInput {
  partId: ModelStringInput
  partName: ModelStringInput
  systemId: ModelStringInput
  systemName: ModelStringInput
  and: [ModelPartFilterInput]
  or: [ModelPartFilterInput]
  not: ModelPartFilterInput
}

input ModelPartConditionInput {
  partName: ModelStringInput
  systemId: ModelStringInput
  systemName: ModelStringInput
  and: [ModelPartConditionInput]
  or: [ModelPartConditionInput]
  not: ModelPartConditionInput
}

input CreatePartInput {
  partId: String!
  partName: String
  systemId: String!
  systemName: String!
}

input UpdatePartInput {
  partId: String!
  partName: String
  systemId: String
  systemName: String
}

input DeletePartInput {
  partId: String!
}

input ModelSubscriptionPartFilterInput {
  partId: ModelSubscriptionStringInput
  partName: ModelSubscriptionStringInput
  systemId: ModelSubscriptionStringInput
  systemName: ModelSubscriptionStringInput
  and: [ModelSubscriptionPartFilterInput]
  or: [ModelSubscriptionPartFilterInput]
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
"
`;

exports[`@hasMany directive with RDS datasource composite key should generate correct resolvers 2`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Part\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"ConnectionQuery\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
#if( !$lambdaInput.args.filter )
  #set( $lambdaInput.args.filter = {} )
#end
$util.qr($lambdaInput.args.filter.put(\\"systemId\\", {
  \\"eq\\": $util.defaultIfNull($ctx.source.systemId, \\"\\")
}))
$util.qr($lambdaInput.args.filter.put(\\"systemName\\", {
  \\"eq\\": $util.defaultIfNull($ctx.source.systemName, \\"\\")
}))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@hasMany directive with RDS datasource composite key should generate correct resolvers 3`] = `
"## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **"
`;

exports[`@hasMany directive with RDS datasource happy case should generate correct resolvers 1`] = `
"type Blog {
  id: String!
  content: String
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
}

type Post {
  id: String!
  content: String
  blogId: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelBlogConnection {
  items: [Blog]!
  nextToken: String
}

input ModelBlogFilterInput {
  id: ModelStringInput
  content: ModelStringInput
  and: [ModelBlogFilterInput]
  or: [ModelBlogFilterInput]
  not: ModelBlogFilterInput
}

type Query {
  getBlog(id: String!): Blog
  listBlogs(id: String, filter: ModelBlogFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelBlogConnection
  getPost(id: String!): Post
  listPosts(id: String, filter: ModelPostFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelPostConnection
}

input ModelBlogConditionInput {
  content: ModelStringInput
  and: [ModelBlogConditionInput]
  or: [ModelBlogConditionInput]
  not: ModelBlogConditionInput
}

input CreateBlogInput {
  id: String
  content: String
}

input UpdateBlogInput {
  id: String!
  content: String
}

input DeleteBlogInput {
  id: String!
}

type Mutation {
  createBlog(input: CreateBlogInput!, condition: ModelBlogConditionInput): Blog
  updateBlog(input: UpdateBlogInput!, condition: ModelBlogConditionInput): Blog
  deleteBlog(input: DeleteBlogInput!, condition: ModelBlogConditionInput): Blog
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
}

input ModelSubscriptionBlogFilterInput {
  id: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  and: [ModelSubscriptionBlogFilterInput]
  or: [ModelSubscriptionBlogFilterInput]
}

type Subscription {
  onCreateBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: [\\"createBlog\\"])
  onUpdateBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: [\\"updateBlog\\"])
  onDeleteBlog(filter: ModelSubscriptionBlogFilterInput): Blog @aws_subscribe(mutations: [\\"deleteBlog\\"])
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"deletePost\\"])
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelStringInput
  content: ModelStringInput
  blogId: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input ModelPostConditionInput {
  content: ModelStringInput
  blogId: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
}

input CreatePostInput {
  id: String
  content: String
  blogId: String
}

input UpdatePostInput {
  id: String!
  content: String
  blogId: String
}

input DeletePostInput {
  id: String!
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  blogId: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
}
"
`;

exports[`@hasMany directive with RDS datasource happy case should generate correct resolvers 2`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Post\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"ConnectionQuery\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
#if( !$lambdaInput.args.filter )
  #set( $lambdaInput.args.filter = {} )
#end
$util.qr($lambdaInput.args.filter.put(\\"blogId\\", {
  \\"eq\\": $util.defaultIfNull($ctx.source.id, \\"\\")
}))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@hasMany directive with RDS datasource happy case should generate correct resolvers 3`] = `
"## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **"
`;

exports[`many to many query 1`] = `
Object {
  "definitions": Array [
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 21,
            "start": 14,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 16,
              "start": 14,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 21,
              "start": 18,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 20,
                "start": 18,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 20,
                  "start": 18,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 38,
            "start": 24,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 29,
              "start": 24,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 38,
              "start": 31,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 37,
                "start": 31,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 37,
                  "start": 31,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 83,
                "start": 49,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 57,
                  "start": 49,
                },
                "value": "editorID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 83,
                  "start": 59,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 83,
                    "start": 59,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 119,
                "start": 85,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 91,
                  "start": 85,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 119,
                  "start": 93,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 119,
                    "start": 93,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 154,
                "start": 121,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 134,
                  "start": 121,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 154,
                  "start": 136,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 154,
                    "start": 136,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 166,
                "start": 156,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 161,
                  "start": 156,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 166,
                  "start": 163,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 166,
                    "start": 163,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 185,
                "start": 168,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 177,
                  "start": 168,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 185,
                  "start": 179,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 185,
                    "start": 179,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 213,
            "start": 41,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 48,
              "start": 41,
            },
            "value": "editors",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 213,
              "start": 188,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 213,
                "start": 188,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 239,
            "start": 216,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 225,
              "start": 216,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 239,
              "start": 227,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 238,
                "start": 227,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 238,
                  "start": 227,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 265,
            "start": 242,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 251,
              "start": 242,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 265,
              "start": 253,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 264,
                "start": 253,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 264,
                  "start": 253,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 282,
            "start": 268,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 276,
              "start": 268,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 282,
              "start": 278,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 281,
                "start": 278,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 281,
                  "start": 278,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 302,
            "start": 285,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 293,
              "start": 285,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 302,
              "start": 295,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 302,
                "start": 295,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 334,
            "start": 305,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 319,
              "start": 305,
            },
            "value": "_lastChangedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 334,
              "start": 321,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 333,
                "start": 321,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 333,
                  "start": 321,
                },
                "value": "AWSTimestamp",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 336,
        "start": 0,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 9,
          "start": 5,
        },
        "value": "Post",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 365,
            "start": 358,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 360,
              "start": 358,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 365,
              "start": 362,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 364,
                "start": 362,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 364,
                  "start": 362,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 379,
            "start": 368,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 374,
              "start": 368,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 379,
              "start": 376,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 378,
                "start": 376,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 378,
                  "start": 376,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 395,
            "start": 382,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 390,
              "start": 382,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 395,
              "start": 392,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 394,
                "start": 392,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 394,
                  "start": 392,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 409,
            "start": 398,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 402,
              "start": 398,
            },
            "value": "post",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 409,
              "start": 404,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 408,
                "start": 404,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 408,
                  "start": 404,
                },
                "value": "Post",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 425,
            "start": 412,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 418,
              "start": 412,
            },
            "value": "editor",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 425,
              "start": 420,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 424,
                "start": 420,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 424,
                  "start": 420,
                },
                "value": "User",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 451,
            "start": 428,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 437,
              "start": 428,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 451,
              "start": 439,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 450,
                "start": 439,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 450,
                  "start": 439,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 477,
            "start": 454,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 463,
              "start": 454,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 477,
              "start": 465,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 476,
                "start": 465,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 476,
                  "start": 465,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 494,
            "start": 480,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 488,
              "start": 480,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 494,
              "start": 490,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 493,
                "start": 490,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 493,
                  "start": 490,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 514,
            "start": 497,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 505,
              "start": 497,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 514,
              "start": 507,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 514,
                "start": 507,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 546,
            "start": 517,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 531,
              "start": 517,
            },
            "value": "_lastChangedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 546,
              "start": 533,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 545,
                "start": 533,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 545,
                  "start": 533,
                },
                "value": "AWSTimestamp",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 548,
        "start": 338,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 353,
          "start": 343,
        },
        "value": "PostEditor",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 571,
            "start": 564,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 566,
              "start": 564,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 571,
              "start": 568,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 570,
                "start": 568,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 570,
                  "start": 568,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 591,
            "start": 574,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 582,
              "start": 574,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 591,
              "start": 584,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 590,
                "start": 584,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 590,
                  "start": 584,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 632,
                "start": 600,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 606,
                  "start": 600,
                },
                "value": "postID",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 632,
                  "start": 608,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 632,
                    "start": 608,
                  },
                  "value": "ModelIDKeyConditionInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 668,
                "start": 634,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 640,
                  "start": 634,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 668,
                  "start": 642,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 668,
                    "start": 642,
                  },
                  "value": "ModelPostEditorFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 703,
                "start": 670,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 683,
                  "start": 670,
                },
                "value": "sortDirection",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 703,
                  "start": 685,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 703,
                    "start": 685,
                  },
                  "value": "ModelSortDirection",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 715,
                "start": 705,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 710,
                  "start": 705,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 715,
                  "start": 712,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 715,
                    "start": 712,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 734,
                "start": 717,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 726,
                  "start": 717,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 734,
                  "start": 728,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 734,
                    "start": 728,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 762,
            "start": 594,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 599,
              "start": 594,
            },
            "value": "posts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 762,
              "start": 737,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 762,
                "start": 737,
              },
              "value": "ModelPostEditorConnection",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 788,
            "start": 765,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 774,
              "start": 765,
            },
            "value": "createdAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 788,
              "start": 776,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 787,
                "start": 776,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 787,
                  "start": 776,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 814,
            "start": 791,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 800,
              "start": 791,
            },
            "value": "updatedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 814,
              "start": 802,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 813,
                "start": 802,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 813,
                  "start": 802,
                },
                "value": "AWSDateTime",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 831,
            "start": 817,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 825,
              "start": 817,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 831,
              "start": 827,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 830,
                "start": 827,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 830,
                  "start": 827,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 851,
            "start": 834,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 842,
              "start": 834,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 851,
              "start": 844,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 851,
                "start": 844,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 883,
            "start": 854,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 868,
              "start": 854,
            },
            "value": "_lastChangedAt",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 883,
              "start": 870,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 882,
                "start": 870,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 882,
                  "start": 870,
                },
                "value": "AWSTimestamp",
              },
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 885,
        "start": 550,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 559,
          "start": 555,
        },
        "value": "User",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 924,
            "start": 914,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 916,
              "start": 914,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 924,
              "start": 918,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 924,
                "start": 918,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 937,
            "start": 927,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 929,
              "start": 927,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 937,
              "start": 931,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 937,
                "start": 931,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 950,
            "start": 940,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 942,
              "start": 940,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 950,
              "start": 944,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 950,
                "start": 944,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 963,
            "start": 953,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 955,
              "start": 953,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 963,
              "start": 957,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 963,
                "start": 957,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 976,
            "start": 966,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 968,
              "start": 966,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 976,
              "start": 970,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 976,
                "start": 970,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 989,
            "start": 979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 981,
              "start": 979,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 989,
              "start": 983,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 989,
                "start": 983,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1008,
            "start": 992,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1000,
              "start": 992,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1008,
              "start": 1002,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1008,
                "start": 1002,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1030,
            "start": 1011,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1022,
              "start": 1011,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1030,
              "start": 1024,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1030,
                "start": 1024,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1050,
            "start": 1033,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1040,
              "start": 1033,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1050,
              "start": 1042,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1049,
                "start": 1043,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1049,
                  "start": 1043,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1071,
            "start": 1053,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1063,
              "start": 1053,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1071,
              "start": 1065,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1071,
                "start": 1065,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1098,
            "start": 1074,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1089,
              "start": 1074,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1098,
              "start": 1091,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1098,
                "start": 1091,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1135,
            "start": 1101,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1114,
              "start": 1101,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1135,
              "start": 1116,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1135,
                "start": 1116,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1158,
            "start": 1138,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1142,
              "start": 1138,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1158,
              "start": 1144,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1158,
                "start": 1144,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1160,
        "start": 887,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 909,
          "start": 893,
        },
        "value": "ModelStringInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1193,
            "start": 1186,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1188,
              "start": 1186,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1193,
              "start": 1190,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1193,
                "start": 1190,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1203,
            "start": 1196,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1198,
              "start": 1196,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1203,
              "start": 1200,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1203,
                "start": 1200,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1213,
            "start": 1206,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1208,
              "start": 1206,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1213,
              "start": 1210,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1213,
                "start": 1210,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1223,
            "start": 1216,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1218,
              "start": 1216,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1223,
              "start": 1220,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1223,
                "start": 1220,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1233,
            "start": 1226,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1228,
              "start": 1226,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1233,
              "start": 1230,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1233,
                "start": 1230,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1243,
            "start": 1236,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1238,
              "start": 1236,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1243,
              "start": 1240,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1243,
                "start": 1240,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1260,
            "start": 1246,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1253,
              "start": 1246,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1260,
              "start": 1255,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1259,
                "start": 1256,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1259,
                  "start": 1256,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1287,
            "start": 1263,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1278,
              "start": 1263,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1287,
              "start": 1280,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1287,
                "start": 1280,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1324,
            "start": 1290,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1303,
              "start": 1290,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1324,
              "start": 1305,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1324,
                "start": 1305,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1326,
        "start": 1162,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1181,
          "start": 1168,
        },
        "value": "ModelIntInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1363,
            "start": 1354,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1356,
              "start": 1354,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1363,
              "start": 1358,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1363,
                "start": 1358,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1375,
            "start": 1366,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1368,
              "start": 1366,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1375,
              "start": 1370,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1375,
                "start": 1370,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1387,
            "start": 1378,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1380,
              "start": 1378,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1387,
              "start": 1382,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1387,
                "start": 1382,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1399,
            "start": 1390,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1392,
              "start": 1390,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1399,
              "start": 1394,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1399,
                "start": 1394,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1411,
            "start": 1402,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1404,
              "start": 1402,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1411,
              "start": 1406,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1411,
                "start": 1406,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1423,
            "start": 1414,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1416,
              "start": 1414,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1423,
              "start": 1418,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1423,
                "start": 1418,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1442,
            "start": 1426,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1433,
              "start": 1426,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1442,
              "start": 1435,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1441,
                "start": 1436,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1441,
                  "start": 1436,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1469,
            "start": 1445,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1460,
              "start": 1445,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1469,
              "start": 1462,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1469,
                "start": 1462,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1506,
            "start": 1472,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1485,
              "start": 1472,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1506,
              "start": 1487,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1506,
                "start": 1487,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1508,
        "start": 1328,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1349,
          "start": 1334,
        },
        "value": "ModelFloatInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1549,
            "start": 1538,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1540,
              "start": 1538,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1549,
              "start": 1542,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1549,
                "start": 1542,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1563,
            "start": 1552,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1554,
              "start": 1552,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1563,
              "start": 1556,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1563,
                "start": 1556,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1590,
            "start": 1566,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1581,
              "start": 1566,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1590,
              "start": 1583,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1590,
                "start": 1583,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1627,
            "start": 1593,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1606,
              "start": 1593,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1627,
              "start": 1608,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1627,
                "start": 1608,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1629,
        "start": 1510,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1533,
          "start": 1516,
        },
        "value": "ModelBooleanInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1660,
            "start": 1654,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1656,
              "start": 1654,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1660,
              "start": 1658,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1660,
                "start": 1658,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1669,
            "start": 1663,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1665,
              "start": 1663,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1669,
              "start": 1667,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1669,
                "start": 1667,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1678,
            "start": 1672,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1674,
              "start": 1672,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1678,
              "start": 1676,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1678,
                "start": 1676,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1687,
            "start": 1681,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1683,
              "start": 1681,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1687,
              "start": 1685,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1687,
                "start": 1685,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1696,
            "start": 1690,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1692,
              "start": 1690,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1696,
              "start": 1694,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1696,
                "start": 1694,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1705,
            "start": 1699,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1701,
              "start": 1699,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1705,
              "start": 1703,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1705,
                "start": 1703,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1720,
            "start": 1708,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1716,
              "start": 1708,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1720,
              "start": 1718,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1720,
                "start": 1718,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1738,
            "start": 1723,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1734,
              "start": 1723,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1738,
              "start": 1736,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1738,
                "start": 1736,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1754,
            "start": 1741,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1748,
              "start": 1741,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 1754,
              "start": 1750,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 1753,
                "start": 1751,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 1753,
                  "start": 1751,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1771,
            "start": 1757,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1767,
              "start": 1757,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1771,
              "start": 1769,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1771,
                "start": 1769,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1798,
            "start": 1774,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1789,
              "start": 1774,
            },
            "value": "attributeExists",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1798,
              "start": 1791,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1798,
                "start": 1791,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1835,
            "start": 1801,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1814,
              "start": 1801,
            },
            "value": "attributeType",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1835,
              "start": 1816,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1835,
                "start": 1816,
              },
              "value": "ModelAttributeTypes",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1858,
            "start": 1838,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1842,
              "start": 1838,
            },
            "value": "size",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1858,
              "start": 1844,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1858,
                "start": 1844,
              },
              "value": "ModelSizeInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 1860,
        "start": 1631,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1649,
          "start": 1637,
        },
        "value": "ModelIDInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1911,
            "start": 1901,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1903,
              "start": 1901,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1911,
              "start": 1905,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1911,
                "start": 1905,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1924,
            "start": 1914,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1916,
              "start": 1914,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1924,
              "start": 1918,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1924,
                "start": 1918,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1937,
            "start": 1927,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1929,
              "start": 1927,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1937,
              "start": 1931,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1937,
                "start": 1931,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1950,
            "start": 1940,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1942,
              "start": 1940,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1950,
              "start": 1944,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1950,
                "start": 1944,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1963,
            "start": 1953,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1955,
              "start": 1953,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1963,
              "start": 1957,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1963,
                "start": 1957,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1976,
            "start": 1966,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1968,
              "start": 1966,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1976,
              "start": 1970,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1976,
                "start": 1970,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 1995,
            "start": 1979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 1987,
              "start": 1979,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 1995,
              "start": 1989,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 1995,
                "start": 1989,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2017,
            "start": 1998,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2009,
              "start": 1998,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2017,
              "start": 2011,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2017,
                "start": 2011,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2037,
            "start": 2020,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2027,
              "start": 2020,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2037,
              "start": 2029,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2036,
                "start": 2030,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2036,
                  "start": 2030,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2058,
            "start": 2040,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2050,
              "start": 2040,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2058,
              "start": 2052,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2058,
                "start": 2052,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2073,
            "start": 2061,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2063,
              "start": 2061,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2073,
              "start": 2065,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2072,
                "start": 2066,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2072,
                  "start": 2066,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2091,
            "start": 2076,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2081,
              "start": 2076,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2091,
              "start": 2083,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2090,
                "start": 2084,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2090,
                  "start": 2084,
                },
                "value": "String",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2093,
        "start": 1862,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 1896,
          "start": 1868,
        },
        "value": "ModelSubscriptionStringInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2138,
            "start": 2131,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2133,
              "start": 2131,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2138,
              "start": 2135,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2138,
                "start": 2135,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2148,
            "start": 2141,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2143,
              "start": 2141,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2148,
              "start": 2145,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2148,
                "start": 2145,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2158,
            "start": 2151,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2153,
              "start": 2151,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2158,
              "start": 2155,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2158,
                "start": 2155,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2168,
            "start": 2161,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2163,
              "start": 2161,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2168,
              "start": 2165,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2168,
                "start": 2165,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2178,
            "start": 2171,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2173,
              "start": 2171,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2178,
              "start": 2175,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2178,
                "start": 2175,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2188,
            "start": 2181,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2183,
              "start": 2181,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2188,
              "start": 2185,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2188,
                "start": 2185,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2205,
            "start": 2191,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2198,
              "start": 2191,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2205,
              "start": 2200,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2204,
                "start": 2201,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2204,
                  "start": 2201,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2217,
            "start": 2208,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2210,
              "start": 2208,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2217,
              "start": 2212,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2216,
                "start": 2213,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2216,
                  "start": 2213,
                },
                "value": "Int",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2232,
            "start": 2220,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2225,
              "start": 2220,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2232,
              "start": 2227,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2231,
                "start": 2228,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2231,
                  "start": 2228,
                },
                "value": "Int",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2234,
        "start": 2095,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2126,
          "start": 2101,
        },
        "value": "ModelSubscriptionIntInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2283,
            "start": 2274,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2276,
              "start": 2274,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2283,
              "start": 2278,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2283,
                "start": 2278,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2295,
            "start": 2286,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2288,
              "start": 2286,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2295,
              "start": 2290,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2295,
                "start": 2290,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2307,
            "start": 2298,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2300,
              "start": 2298,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2307,
              "start": 2302,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2307,
                "start": 2302,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2319,
            "start": 2310,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2312,
              "start": 2310,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2319,
              "start": 2314,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2319,
                "start": 2314,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2331,
            "start": 2322,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2324,
              "start": 2322,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2331,
              "start": 2326,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2331,
                "start": 2326,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2343,
            "start": 2334,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2336,
              "start": 2334,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2343,
              "start": 2338,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2343,
                "start": 2338,
              },
              "value": "Float",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2362,
            "start": 2346,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2353,
              "start": 2346,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2362,
              "start": 2355,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2361,
                "start": 2356,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2361,
                  "start": 2356,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2376,
            "start": 2365,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2367,
              "start": 2365,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2376,
              "start": 2369,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2375,
                "start": 2370,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2375,
                  "start": 2370,
                },
                "value": "Float",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2393,
            "start": 2379,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2384,
              "start": 2379,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2393,
              "start": 2386,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2392,
                "start": 2387,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2392,
                  "start": 2387,
                },
                "value": "Float",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2395,
        "start": 2236,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2269,
          "start": 2242,
        },
        "value": "ModelSubscriptionFloatInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2448,
            "start": 2437,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2439,
              "start": 2437,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2448,
              "start": 2441,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2448,
                "start": 2441,
              },
              "value": "Boolean",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2462,
            "start": 2451,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2453,
              "start": 2451,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2462,
              "start": 2455,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2462,
                "start": 2455,
              },
              "value": "Boolean",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2464,
        "start": 2397,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2432,
          "start": 2403,
        },
        "value": "ModelSubscriptionBooleanInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2507,
            "start": 2501,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2503,
              "start": 2501,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2507,
              "start": 2505,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2507,
                "start": 2505,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2516,
            "start": 2510,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2512,
              "start": 2510,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2516,
              "start": 2514,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2516,
                "start": 2514,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2525,
            "start": 2519,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2521,
              "start": 2519,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2525,
              "start": 2523,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2525,
                "start": 2523,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2534,
            "start": 2528,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2530,
              "start": 2528,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2534,
              "start": 2532,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2534,
                "start": 2532,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2543,
            "start": 2537,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2539,
              "start": 2537,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2543,
              "start": 2541,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2543,
                "start": 2541,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2552,
            "start": 2546,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2548,
              "start": 2546,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2552,
              "start": 2550,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2552,
                "start": 2550,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2567,
            "start": 2555,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2563,
              "start": 2555,
            },
            "value": "contains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2567,
              "start": 2565,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2567,
                "start": 2565,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2585,
            "start": 2570,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2581,
              "start": 2570,
            },
            "value": "notContains",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2585,
              "start": 2583,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2585,
                "start": 2583,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2601,
            "start": 2588,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2595,
              "start": 2588,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2601,
              "start": 2597,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2600,
                "start": 2598,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2600,
                  "start": 2598,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2618,
            "start": 2604,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2614,
              "start": 2604,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2618,
              "start": 2616,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2618,
                "start": 2616,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2629,
            "start": 2621,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2623,
              "start": 2621,
            },
            "value": "in",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2629,
              "start": 2625,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2628,
                "start": 2626,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2628,
                  "start": 2626,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2643,
            "start": 2632,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2637,
              "start": 2632,
            },
            "value": "notIn",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2643,
              "start": 2639,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2642,
                "start": 2640,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2642,
                  "start": 2640,
                },
                "value": "ID",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2645,
        "start": 2466,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2496,
          "start": 2472,
        },
        "value": "ModelSubscriptionIDInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 2766,
        "start": 2647,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2671,
          "start": 2652,
        },
        "value": "ModelAttributeTypes",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2682,
            "start": 2676,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2682,
              "start": 2676,
            },
            "value": "binary",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2694,
            "start": 2685,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2694,
              "start": 2685,
            },
            "value": "binarySet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2701,
            "start": 2697,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2701,
              "start": 2697,
            },
            "value": "bool",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2708,
            "start": 2704,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2708,
              "start": 2704,
            },
            "value": "list",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2714,
            "start": 2711,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2714,
              "start": 2711,
            },
            "value": "map",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2723,
            "start": 2717,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2723,
              "start": 2717,
            },
            "value": "number",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2735,
            "start": 2726,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2735,
              "start": 2726,
            },
            "value": "numberSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2744,
            "start": 2738,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2744,
              "start": 2738,
            },
            "value": "string",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2756,
            "start": 2747,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2756,
              "start": 2747,
            },
            "value": "stringSet",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2764,
            "start": 2759,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2764,
              "start": 2759,
            },
            "value": "_null",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2800,
            "start": 2793,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2795,
              "start": 2793,
            },
            "value": "ne",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2800,
              "start": 2797,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2800,
                "start": 2797,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2810,
            "start": 2803,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2805,
              "start": 2803,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2810,
              "start": 2807,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2810,
                "start": 2807,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2820,
            "start": 2813,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2815,
              "start": 2813,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2820,
              "start": 2817,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2820,
                "start": 2817,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2830,
            "start": 2823,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2825,
              "start": 2823,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2830,
              "start": 2827,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2830,
                "start": 2827,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2840,
            "start": 2833,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2835,
              "start": 2833,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2840,
              "start": 2837,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2840,
                "start": 2837,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2850,
            "start": 2843,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2845,
              "start": 2843,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2850,
              "start": 2847,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2850,
                "start": 2847,
              },
              "value": "Int",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 2867,
            "start": 2853,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2860,
              "start": 2853,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 2867,
              "start": 2862,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 2866,
                "start": 2863,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 2866,
                  "start": 2863,
                },
                "value": "Int",
              },
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 2869,
        "start": 2768,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2788,
          "start": 2774,
        },
        "value": "ModelSizeInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "kind": "EnumTypeDefinition",
      "loc": Object {
        "end": 2911,
        "start": 2871,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2894,
          "start": 2876,
        },
        "value": "ModelSortDirection",
      },
      "values": Array [
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2902,
            "start": 2899,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2902,
              "start": 2899,
            },
            "value": "ASC",
          },
        },
        Object {
          "description": undefined,
          "directives": Array [],
          "kind": "EnumValueDefinition",
          "loc": Object {
            "end": 2909,
            "start": 2905,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2909,
              "start": 2905,
            },
            "value": "DESC",
          },
        },
      ],
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2956,
            "start": 2942,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2947,
              "start": 2942,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 2956,
              "start": 2949,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 2955,
                "start": 2949,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 2954,
                  "start": 2950,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 2954,
                    "start": 2950,
                  },
                  "value": "Post",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 2976,
            "start": 2959,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2968,
              "start": 2959,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 2976,
              "start": 2970,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 2976,
                "start": 2970,
              },
              "value": "String",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3002,
            "start": 2979,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 2988,
              "start": 2979,
            },
            "value": "startedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3002,
              "start": 2990,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3002,
                "start": 2990,
              },
              "value": "AWSTimestamp",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 3004,
        "start": 2913,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 2937,
          "start": 2918,
        },
        "value": "ModelPostConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3053,
            "start": 3037,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3039,
              "start": 3037,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3053,
              "start": 3041,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3053,
                "start": 3041,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3079,
            "start": 3056,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3061,
              "start": 3056,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3079,
              "start": 3063,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3079,
                "start": 3063,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3109,
            "start": 3082,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3085,
              "start": 3082,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3109,
              "start": 3087,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3108,
                "start": 3088,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3108,
                  "start": 3088,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3138,
            "start": 3112,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3114,
              "start": 3112,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3138,
              "start": 3116,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3137,
                "start": 3117,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3137,
                  "start": 3117,
                },
                "value": "ModelPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3166,
            "start": 3141,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3144,
              "start": 3141,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3166,
              "start": 3146,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3166,
                "start": 3146,
              },
              "value": "ModelPostFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3196,
            "start": 3169,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3177,
              "start": 3169,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3196,
              "start": 3179,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3196,
                "start": 3179,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3198,
        "start": 3006,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3032,
          "start": 3012,
        },
        "value": "ModelPostFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3230,
                "start": 3223,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3225,
                  "start": 3223,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3230,
                  "start": 3227,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3229,
                    "start": 3227,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3229,
                      "start": 3227,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3237,
            "start": 3215,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3222,
              "start": 3215,
            },
            "value": "getPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3237,
              "start": 3233,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3237,
                "start": 3233,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3278,
                "start": 3250,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3256,
                  "start": 3250,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3278,
                  "start": 3258,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3278,
                    "start": 3258,
                  },
                  "value": "ModelPostFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3290,
                "start": 3280,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3285,
                  "start": 3280,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3290,
                  "start": 3287,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3290,
                    "start": 3287,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3309,
                "start": 3292,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3301,
                  "start": 3292,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3309,
                  "start": 3303,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3309,
                    "start": 3303,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3331,
            "start": 3240,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3249,
              "start": 3240,
            },
            "value": "listPosts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3331,
              "start": 3312,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3331,
                "start": 3312,
              },
              "value": "ModelPostConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3372,
                "start": 3344,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3350,
                  "start": 3344,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3372,
                  "start": 3352,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3372,
                    "start": 3352,
                  },
                  "value": "ModelPostFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3384,
                "start": 3374,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3379,
                  "start": 3374,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3384,
                  "start": 3381,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3384,
                    "start": 3381,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3403,
                "start": 3386,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3395,
                  "start": 3386,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3403,
                  "start": 3397,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3403,
                    "start": 3397,
                  },
                  "value": "String",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3427,
                "start": 3405,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3413,
                  "start": 3405,
                },
                "value": "lastSync",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3427,
                  "start": 3415,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3427,
                    "start": 3415,
                  },
                  "value": "AWSTimestamp",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3449,
            "start": 3334,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3343,
              "start": 3334,
            },
            "value": "syncPosts",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3449,
              "start": 3430,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3449,
                "start": 3430,
              },
              "value": "ModelPostConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3467,
                "start": 3460,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3462,
                  "start": 3460,
                },
                "value": "id",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 3467,
                  "start": 3464,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 3466,
                    "start": 3464,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 3466,
                      "start": 3464,
                    },
                    "value": "ID",
                  },
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3474,
            "start": 3452,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3459,
              "start": 3452,
            },
            "value": "getUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3474,
              "start": 3470,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3474,
                "start": 3470,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3515,
                "start": 3487,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3493,
                  "start": 3487,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3515,
                  "start": 3495,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3515,
                    "start": 3495,
                  },
                  "value": "ModelUserFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3527,
                "start": 3517,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3522,
                  "start": 3517,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3527,
                  "start": 3524,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3527,
                    "start": 3524,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3546,
                "start": 3529,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3538,
                  "start": 3529,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3546,
                  "start": 3540,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3546,
                    "start": 3540,
                  },
                  "value": "String",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3568,
            "start": 3477,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3486,
              "start": 3477,
            },
            "value": "listUsers",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3568,
              "start": 3549,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3568,
                "start": 3549,
              },
              "value": "ModelUserConnection",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3609,
                "start": 3581,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3587,
                  "start": 3581,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3609,
                  "start": 3589,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3609,
                    "start": 3589,
                  },
                  "value": "ModelUserFilterInput",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3621,
                "start": 3611,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3616,
                  "start": 3611,
                },
                "value": "limit",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3621,
                  "start": 3618,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3621,
                    "start": 3618,
                  },
                  "value": "Int",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3640,
                "start": 3623,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3632,
                  "start": 3623,
                },
                "value": "nextToken",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3640,
                  "start": 3634,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3640,
                    "start": 3634,
                  },
                  "value": "String",
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 3664,
                "start": 3642,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3650,
                  "start": 3642,
                },
                "value": "lastSync",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 3664,
                  "start": 3652,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 3664,
                    "start": 3652,
                  },
                  "value": "AWSTimestamp",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 3686,
            "start": 3571,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3580,
              "start": 3571,
            },
            "value": "syncUsers",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3686,
              "start": 3667,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3686,
                "start": 3667,
              },
              "value": "ModelUserConnection",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 3688,
        "start": 3200,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3210,
          "start": 3205,
        },
        "value": "Query",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3747,
            "start": 3724,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3729,
              "start": 3724,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3747,
              "start": 3731,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3747,
                "start": 3731,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3780,
            "start": 3750,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3753,
              "start": 3750,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3780,
              "start": 3755,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3779,
                "start": 3756,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3779,
                  "start": 3756,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3812,
            "start": 3783,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3785,
              "start": 3783,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 3812,
              "start": 3787,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3811,
                "start": 3788,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3811,
                  "start": 3788,
                },
                "value": "ModelPostConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3843,
            "start": 3815,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3818,
              "start": 3815,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3843,
              "start": 3820,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3843,
                "start": 3820,
              },
              "value": "ModelPostConditionInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3873,
            "start": 3846,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3854,
              "start": 3846,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3873,
              "start": 3856,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3873,
                "start": 3856,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3875,
        "start": 3690,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3719,
          "start": 3696,
        },
        "value": "ModelPostConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3909,
            "start": 3903,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3905,
              "start": 3903,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3909,
              "start": 3907,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3909,
                "start": 3907,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3926,
            "start": 3912,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3917,
              "start": 3912,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 3926,
              "start": 3919,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3925,
                "start": 3919,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3925,
                  "start": 3919,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3942,
            "start": 3929,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3937,
              "start": 3929,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3942,
              "start": 3939,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3942,
                "start": 3939,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 3944,
        "start": 3877,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3898,
          "start": 3883,
        },
        "value": "CreatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3979,
            "start": 3972,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3974,
              "start": 3972,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 3979,
              "start": 3976,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 3978,
                "start": 3976,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 3978,
                  "start": 3976,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 3995,
            "start": 3982,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 3987,
              "start": 3982,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 3995,
              "start": 3989,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 3995,
                "start": 3989,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4011,
            "start": 3998,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4006,
              "start": 3998,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4011,
              "start": 4008,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4011,
                "start": 4008,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4013,
        "start": 3946,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 3967,
          "start": 3952,
        },
        "value": "UpdatePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4048,
            "start": 4041,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4043,
              "start": 4041,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 4048,
              "start": 4045,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 4047,
                "start": 4045,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4047,
                  "start": 4045,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4064,
            "start": 4051,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4059,
              "start": 4051,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4064,
              "start": 4061,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4064,
                "start": 4061,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 4066,
        "start": 4015,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4036,
          "start": 4021,
        },
        "value": "DeletePostInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4120,
                "start": 4097,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4102,
                  "start": 4097,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4120,
                  "start": 4104,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4119,
                    "start": 4104,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4119,
                      "start": 4104,
                    },
                    "value": "CreatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4156,
                "start": 4122,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4131,
                  "start": 4122,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4156,
                  "start": 4133,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4156,
                    "start": 4133,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4163,
            "start": 4086,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4096,
              "start": 4086,
            },
            "value": "createPost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4163,
              "start": 4159,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4163,
                "start": 4159,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4200,
                "start": 4177,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4182,
                  "start": 4177,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4200,
                  "start": 4184,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4199,
                    "start": 4184,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4199,
                      "start": 4184,
                    },
                    "value": "UpdatePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4236,
                "start": 4202,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4211,
                  "start": 4202,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4236,
                  "start": 4213,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4236,
                    "start": 4213,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4243,
            "start": 4166,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4176,
              "start": 4166,
            },
            "value": "updatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4243,
              "start": 4239,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4243,
                "start": 4239,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4280,
                "start": 4257,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4262,
                  "start": 4257,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4280,
                  "start": 4264,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4279,
                    "start": 4264,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4279,
                      "start": 4264,
                    },
                    "value": "DeletePostInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4316,
                "start": 4282,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4291,
                  "start": 4282,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4316,
                  "start": 4293,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4316,
                    "start": 4293,
                  },
                  "value": "ModelPostConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4323,
            "start": 4246,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4256,
              "start": 4246,
            },
            "value": "deletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4323,
              "start": 4319,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4323,
                "start": 4319,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4372,
                "start": 4343,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4348,
                  "start": 4343,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4372,
                  "start": 4350,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4371,
                    "start": 4350,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4371,
                      "start": 4350,
                    },
                    "value": "CreatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4414,
                "start": 4374,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4383,
                  "start": 4374,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4414,
                  "start": 4385,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4414,
                    "start": 4385,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4427,
            "start": 4326,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4342,
              "start": 4326,
            },
            "value": "createPostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4427,
              "start": 4417,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4427,
                "start": 4417,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4476,
                "start": 4447,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4452,
                  "start": 4447,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4476,
                  "start": 4454,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4475,
                    "start": 4454,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4475,
                      "start": 4454,
                    },
                    "value": "UpdatePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4518,
                "start": 4478,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4487,
                  "start": 4478,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4518,
                  "start": 4489,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4518,
                    "start": 4489,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4531,
            "start": 4430,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4446,
              "start": 4430,
            },
            "value": "updatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4531,
              "start": 4521,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4531,
                "start": 4521,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4580,
                "start": 4551,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4556,
                  "start": 4551,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4580,
                  "start": 4558,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4579,
                    "start": 4558,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4579,
                      "start": 4558,
                    },
                    "value": "DeletePostEditorInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4622,
                "start": 4582,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4591,
                  "start": 4582,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4622,
                  "start": 4593,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4622,
                    "start": 4593,
                  },
                  "value": "ModelPostEditorConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4635,
            "start": 4534,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4550,
              "start": 4534,
            },
            "value": "deletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4635,
              "start": 4625,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4635,
                "start": 4625,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4672,
                "start": 4649,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4654,
                  "start": 4649,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4672,
                  "start": 4656,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4671,
                    "start": 4656,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4671,
                      "start": 4656,
                    },
                    "value": "CreateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4708,
                "start": 4674,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4683,
                  "start": 4674,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4708,
                  "start": 4685,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4708,
                    "start": 4685,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4715,
            "start": 4638,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4648,
              "start": 4638,
            },
            "value": "createUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4715,
              "start": 4711,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4715,
                "start": 4711,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4752,
                "start": 4729,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4734,
                  "start": 4729,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4752,
                  "start": 4736,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4751,
                    "start": 4736,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4751,
                      "start": 4736,
                    },
                    "value": "UpdateUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4788,
                "start": 4754,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4763,
                  "start": 4754,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4788,
                  "start": 4765,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4788,
                    "start": 4765,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4795,
            "start": 4718,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4728,
              "start": 4718,
            },
            "value": "updateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4795,
              "start": 4791,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4795,
                "start": 4791,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4832,
                "start": 4809,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4814,
                  "start": 4809,
                },
                "value": "input",
              },
              "type": Object {
                "kind": "NonNullType",
                "loc": Object {
                  "end": 4832,
                  "start": 4816,
                },
                "type": Object {
                  "kind": "NamedType",
                  "loc": Object {
                    "end": 4831,
                    "start": 4816,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 4831,
                      "start": 4816,
                    },
                    "value": "DeleteUserInput",
                  },
                },
              },
            },
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 4868,
                "start": 4834,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 4843,
                  "start": 4834,
                },
                "value": "condition",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 4868,
                  "start": 4845,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 4868,
                    "start": 4845,
                  },
                  "value": "ModelUserConditionInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 4875,
            "start": 4798,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4808,
              "start": 4798,
            },
            "value": "deleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4875,
              "start": 4871,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4875,
                "start": 4871,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 4877,
        "start": 4068,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4081,
          "start": 4073,
        },
        "value": "Mutation",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4950,
            "start": 4922,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4924,
              "start": 4922,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4950,
              "start": 4926,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4950,
                "start": 4926,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 4988,
            "start": 4953,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4958,
              "start": 4953,
            },
            "value": "title",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 4988,
              "start": 4960,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 4988,
                "start": 4960,
              },
              "value": "ModelSubscriptionStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5030,
            "start": 4991,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 4994,
              "start": 4991,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5030,
              "start": 4996,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5029,
                "start": 4997,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5029,
                  "start": 4997,
                },
                "value": "ModelSubscriptionPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5071,
            "start": 5033,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5035,
              "start": 5033,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 5071,
              "start": 5037,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 5070,
                "start": 5038,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5070,
                  "start": 5038,
                },
                "value": "ModelSubscriptionPostFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 5101,
            "start": 5074,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5082,
              "start": 5074,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5101,
              "start": 5084,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5101,
                "start": 5084,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 5103,
        "start": 4879,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 4917,
          "start": 4885,
        },
        "value": "ModelSubscriptionPostFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5180,
                "start": 5140,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5146,
                  "start": 5140,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5180,
                  "start": 5148,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5180,
                    "start": 5148,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5228,
                    "start": 5203,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5212,
                      "start": 5203,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5228,
                      "start": 5214,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5227,
                          "start": 5215,
                        },
                        "value": "createPost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5229,
                "start": 5188,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5202,
                  "start": 5189,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5229,
            "start": 5127,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5139,
              "start": 5127,
            },
            "value": "onCreatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5187,
              "start": 5183,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5187,
                "start": 5183,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5285,
                "start": 5245,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5251,
                  "start": 5245,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5285,
                  "start": 5253,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5285,
                    "start": 5253,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5333,
                    "start": 5308,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5317,
                      "start": 5308,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5333,
                      "start": 5319,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5332,
                          "start": 5320,
                        },
                        "value": "updatePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5334,
                "start": 5293,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5307,
                  "start": 5294,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5334,
            "start": 5232,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5244,
              "start": 5232,
            },
            "value": "onUpdatePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5292,
              "start": 5288,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5292,
                "start": 5288,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5390,
                "start": 5350,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5356,
                  "start": 5350,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5390,
                  "start": 5358,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5390,
                    "start": 5358,
                  },
                  "value": "ModelSubscriptionPostFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5438,
                    "start": 5413,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5422,
                      "start": 5413,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5438,
                      "start": 5424,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5437,
                          "start": 5425,
                        },
                        "value": "deletePost",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5439,
                "start": 5398,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5412,
                  "start": 5399,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5439,
            "start": 5337,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5349,
              "start": 5337,
            },
            "value": "onDeletePost",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5397,
              "start": 5393,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5397,
                "start": 5393,
              },
              "value": "Post",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5507,
                "start": 5461,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5467,
                  "start": 5461,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5507,
                  "start": 5469,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5507,
                    "start": 5469,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5567,
                    "start": 5536,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5545,
                      "start": 5536,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5567,
                      "start": 5547,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5566,
                          "start": 5548,
                        },
                        "value": "createPostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5568,
                "start": 5521,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5535,
                  "start": 5522,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5568,
            "start": 5442,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5460,
              "start": 5442,
            },
            "value": "onCreatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5520,
              "start": 5510,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5520,
                "start": 5510,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5636,
                "start": 5590,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5596,
                  "start": 5590,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5636,
                  "start": 5598,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5636,
                    "start": 5598,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5696,
                    "start": 5665,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5674,
                      "start": 5665,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5696,
                      "start": 5676,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5695,
                          "start": 5677,
                        },
                        "value": "updatePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5697,
                "start": 5650,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5664,
                  "start": 5651,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5697,
            "start": 5571,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5589,
              "start": 5571,
            },
            "value": "onUpdatePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5649,
              "start": 5639,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5649,
                "start": 5639,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5765,
                "start": 5719,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5725,
                  "start": 5719,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5765,
                  "start": 5727,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5765,
                    "start": 5727,
                  },
                  "value": "ModelSubscriptionPostEditorFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5825,
                    "start": 5794,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5803,
                      "start": 5794,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5825,
                      "start": 5805,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5824,
                          "start": 5806,
                        },
                        "value": "deletePostEditor",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5826,
                "start": 5779,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5793,
                  "start": 5780,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5826,
            "start": 5700,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5718,
              "start": 5700,
            },
            "value": "onDeletePostEditor",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5778,
              "start": 5768,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5778,
                "start": 5768,
              },
              "value": "PostEditor",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5882,
                "start": 5842,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5848,
                  "start": 5842,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5882,
                  "start": 5850,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5882,
                    "start": 5850,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 5930,
                    "start": 5905,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 5914,
                      "start": 5905,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 5930,
                      "start": 5916,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 5929,
                          "start": 5917,
                        },
                        "value": "createUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 5931,
                "start": 5890,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5904,
                  "start": 5891,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 5931,
            "start": 5829,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5841,
              "start": 5829,
            },
            "value": "onCreateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5889,
              "start": 5885,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5889,
                "start": 5885,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 5987,
                "start": 5947,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 5953,
                  "start": 5947,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 5987,
                  "start": 5955,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 5987,
                    "start": 5955,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 6035,
                    "start": 6010,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 6019,
                      "start": 6010,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 6035,
                      "start": 6021,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 6034,
                          "start": 6022,
                        },
                        "value": "updateUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 6036,
                "start": 5995,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6009,
                  "start": 5996,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6036,
            "start": 5934,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 5946,
              "start": 5934,
            },
            "value": "onUpdateUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 5994,
              "start": 5990,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 5994,
                "start": 5990,
              },
              "value": "User",
            },
          },
        },
        Object {
          "arguments": Array [
            Object {
              "defaultValue": undefined,
              "description": undefined,
              "directives": Array [],
              "kind": "InputValueDefinition",
              "loc": Object {
                "end": 6092,
                "start": 6052,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6058,
                  "start": 6052,
                },
                "value": "filter",
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 6092,
                  "start": 6060,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 6092,
                    "start": 6060,
                  },
                  "value": "ModelSubscriptionUserFilterInput",
                },
              },
            },
          ],
          "description": undefined,
          "directives": Array [
            Object {
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "loc": Object {
                    "end": 6140,
                    "start": 6115,
                  },
                  "name": Object {
                    "kind": "Name",
                    "loc": Object {
                      "end": 6124,
                      "start": 6115,
                    },
                    "value": "mutations",
                  },
                  "value": Object {
                    "kind": "ListValue",
                    "loc": Object {
                      "end": 6140,
                      "start": 6126,
                    },
                    "values": Array [
                      Object {
                        "block": false,
                        "kind": "StringValue",
                        "loc": Object {
                          "end": 6139,
                          "start": 6127,
                        },
                        "value": "deleteUser",
                      },
                    ],
                  },
                },
              ],
              "kind": "Directive",
              "loc": Object {
                "end": 6141,
                "start": 6100,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6114,
                  "start": 6101,
                },
                "value": "aws_subscribe",
              },
            },
          ],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6141,
            "start": 6039,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6051,
              "start": 6039,
            },
            "value": "onDeleteUser",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6099,
              "start": 6095,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6099,
                "start": 6095,
              },
              "value": "User",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 6143,
        "start": 5105,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 5122,
          "start": 5110,
        },
        "value": "Subscription",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6205,
            "start": 6185,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6191,
              "start": 6185,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6205,
              "start": 6193,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6205,
                "start": 6193,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6230,
            "start": 6208,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6216,
              "start": 6208,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6230,
              "start": 6218,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6230,
                "start": 6218,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6269,
            "start": 6233,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6236,
              "start": 6233,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6269,
              "start": 6238,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6268,
                "start": 6239,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6268,
                  "start": 6239,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6307,
            "start": 6272,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6274,
              "start": 6272,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6307,
              "start": 6276,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6306,
                "start": 6277,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6306,
                  "start": 6277,
                },
                "value": "ModelPostEditorConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6344,
            "start": 6310,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6313,
              "start": 6310,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6344,
              "start": 6315,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6344,
                "start": 6315,
              },
              "value": "ModelPostEditorConditionInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6374,
            "start": 6347,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6355,
              "start": 6347,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6374,
              "start": 6357,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6374,
                "start": 6357,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6376,
        "start": 6145,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6180,
          "start": 6151,
        },
        "value": "ModelPostEditorConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6416,
            "start": 6410,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6412,
              "start": 6410,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6416,
              "start": 6414,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6416,
                "start": 6414,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6430,
            "start": 6419,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6425,
              "start": 6419,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6430,
              "start": 6427,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6429,
                "start": 6427,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6429,
                  "start": 6427,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6446,
            "start": 6433,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6441,
              "start": 6433,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6446,
              "start": 6443,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6445,
                "start": 6443,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6445,
                  "start": 6443,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6462,
            "start": 6449,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6457,
              "start": 6449,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6462,
              "start": 6459,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6462,
                "start": 6459,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6464,
        "start": 6378,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6405,
          "start": 6384,
        },
        "value": "CreatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6505,
            "start": 6498,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6500,
              "start": 6498,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6505,
              "start": 6502,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6504,
                "start": 6502,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6504,
                  "start": 6502,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6518,
            "start": 6508,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6514,
              "start": 6508,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6518,
              "start": 6516,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6518,
                "start": 6516,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6533,
            "start": 6521,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6529,
              "start": 6521,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6533,
              "start": 6531,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6533,
                "start": 6531,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6549,
            "start": 6536,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6544,
              "start": 6536,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6549,
              "start": 6546,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6549,
                "start": 6546,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6551,
        "start": 6466,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6493,
          "start": 6472,
        },
        "value": "UpdatePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6592,
            "start": 6585,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6587,
              "start": 6585,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6592,
              "start": 6589,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6591,
                "start": 6589,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6591,
                  "start": 6589,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6608,
            "start": 6595,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6603,
              "start": 6595,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6608,
              "start": 6605,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6608,
                "start": 6605,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6610,
        "start": 6553,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6580,
          "start": 6559,
        },
        "value": "DeletePostEditorInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6689,
            "start": 6661,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6663,
              "start": 6661,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6689,
              "start": 6665,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6689,
                "start": 6665,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6724,
            "start": 6692,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6698,
              "start": 6692,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6724,
              "start": 6700,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6724,
                "start": 6700,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6761,
            "start": 6727,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6735,
              "start": 6727,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6761,
              "start": 6737,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6761,
                "start": 6737,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6809,
            "start": 6764,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6767,
              "start": 6764,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6809,
              "start": 6769,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6808,
                "start": 6770,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6808,
                  "start": 6770,
                },
                "value": "ModelSubscriptionPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6856,
            "start": 6812,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6814,
              "start": 6812,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 6856,
              "start": 6816,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 6855,
                "start": 6817,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 6855,
                  "start": 6817,
                },
                "value": "ModelSubscriptionPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 6886,
            "start": 6859,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6867,
              "start": 6859,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6886,
              "start": 6869,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6886,
                "start": 6869,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 6888,
        "start": 6612,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6656,
          "start": 6618,
        },
        "value": "ModelSubscriptionPostEditorFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6933,
            "start": 6919,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6924,
              "start": 6919,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 6933,
              "start": 6926,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 6932,
                "start": 6926,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 6931,
                  "start": 6927,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 6931,
                    "start": 6927,
                  },
                  "value": "User",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6953,
            "start": 6936,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6945,
              "start": 6936,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6953,
              "start": 6947,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6953,
                "start": 6947,
              },
              "value": "String",
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 6979,
            "start": 6956,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 6965,
              "start": 6956,
            },
            "value": "startedAt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 6979,
              "start": 6967,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 6979,
                "start": 6967,
              },
              "value": "AWSTimestamp",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 6981,
        "start": 6890,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 6914,
          "start": 6895,
        },
        "value": "ModelUserConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7030,
            "start": 7014,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7016,
              "start": 7014,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7030,
              "start": 7018,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7030,
                "start": 7018,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7059,
            "start": 7033,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7041,
              "start": 7033,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7059,
              "start": 7043,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7059,
                "start": 7043,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7089,
            "start": 7062,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7065,
              "start": 7062,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7089,
              "start": 7067,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7088,
                "start": 7068,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7088,
                  "start": 7068,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7118,
            "start": 7092,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7094,
              "start": 7092,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7118,
              "start": 7096,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7117,
                "start": 7097,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7117,
                  "start": 7097,
                },
                "value": "ModelUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7146,
            "start": 7121,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7124,
              "start": 7121,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7146,
              "start": 7126,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7146,
                "start": 7126,
              },
              "value": "ModelUserFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7176,
            "start": 7149,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7157,
              "start": 7149,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7176,
              "start": 7159,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7176,
                "start": 7159,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7178,
        "start": 6983,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7009,
          "start": 6989,
        },
        "value": "ModelUserFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7240,
            "start": 7214,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7222,
              "start": 7214,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7240,
              "start": 7224,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7240,
                "start": 7224,
              },
              "value": "ModelStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7273,
            "start": 7243,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7246,
              "start": 7243,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7273,
              "start": 7248,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7272,
                "start": 7249,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7272,
                  "start": 7249,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7305,
            "start": 7276,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7278,
              "start": 7276,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7305,
              "start": 7280,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7304,
                "start": 7281,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7304,
                  "start": 7281,
                },
                "value": "ModelUserConditionInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7336,
            "start": 7308,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7311,
              "start": 7308,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7336,
              "start": 7313,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7336,
                "start": 7313,
              },
              "value": "ModelUserConditionInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7366,
            "start": 7339,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7347,
              "start": 7339,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7366,
              "start": 7349,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7366,
                "start": 7349,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7368,
        "start": 7180,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7209,
          "start": 7186,
        },
        "value": "ModelUserConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7402,
            "start": 7396,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7398,
              "start": 7396,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7402,
              "start": 7400,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7402,
                "start": 7400,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7422,
            "start": 7405,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7413,
              "start": 7405,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7422,
              "start": 7415,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7421,
                "start": 7415,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7421,
                  "start": 7415,
                },
                "value": "String",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7438,
            "start": 7425,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7433,
              "start": 7425,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7438,
              "start": 7435,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7438,
                "start": 7435,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7440,
        "start": 7370,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7391,
          "start": 7376,
        },
        "value": "CreateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7475,
            "start": 7468,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7470,
              "start": 7468,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7475,
              "start": 7472,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7474,
                "start": 7472,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7474,
                  "start": 7472,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7494,
            "start": 7478,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7486,
              "start": 7478,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7494,
              "start": 7488,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7494,
                "start": 7488,
              },
              "value": "String",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7510,
            "start": 7497,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7505,
              "start": 7497,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7510,
              "start": 7507,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7510,
                "start": 7507,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7512,
        "start": 7442,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7463,
          "start": 7448,
        },
        "value": "UpdateUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7547,
            "start": 7540,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7542,
              "start": 7540,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7547,
              "start": 7544,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7546,
                "start": 7544,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7546,
                  "start": 7544,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7563,
            "start": 7550,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7558,
              "start": 7550,
            },
            "value": "_version",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7563,
              "start": 7560,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7563,
                "start": 7560,
              },
              "value": "Int",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7565,
        "start": 7514,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7535,
          "start": 7520,
        },
        "value": "DeleteUserInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7638,
            "start": 7610,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7612,
              "start": 7610,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7638,
              "start": 7614,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7638,
                "start": 7614,
              },
              "value": "ModelSubscriptionIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7679,
            "start": 7641,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7649,
              "start": 7641,
            },
            "value": "username",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7679,
              "start": 7651,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7679,
                "start": 7651,
              },
              "value": "ModelSubscriptionStringInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7721,
            "start": 7682,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7685,
              "start": 7682,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7721,
              "start": 7687,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7720,
                "start": 7688,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7720,
                  "start": 7688,
                },
                "value": "ModelSubscriptionUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7762,
            "start": 7724,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7726,
              "start": 7724,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7762,
              "start": 7728,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7761,
                "start": 7729,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7761,
                  "start": 7729,
                },
                "value": "ModelSubscriptionUserFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7792,
            "start": 7765,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7773,
              "start": 7765,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7792,
              "start": 7775,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7792,
                "start": 7775,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7794,
        "start": 7567,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7605,
          "start": 7573,
        },
        "value": "ModelSubscriptionUserFilterInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7837,
            "start": 7831,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7833,
              "start": 7831,
            },
            "value": "eq",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7837,
              "start": 7835,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7837,
                "start": 7835,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7846,
            "start": 7840,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7842,
              "start": 7840,
            },
            "value": "le",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7846,
              "start": 7844,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7846,
                "start": 7844,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7855,
            "start": 7849,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7851,
              "start": 7849,
            },
            "value": "lt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7855,
              "start": 7853,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7855,
                "start": 7853,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7864,
            "start": 7858,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7860,
              "start": 7858,
            },
            "value": "ge",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7864,
              "start": 7862,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7864,
                "start": 7862,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7873,
            "start": 7867,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7869,
              "start": 7867,
            },
            "value": "gt",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7873,
              "start": 7871,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7873,
                "start": 7871,
              },
              "value": "ID",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7889,
            "start": 7876,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7883,
              "start": 7876,
            },
            "value": "between",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 7889,
              "start": 7885,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 7888,
                "start": 7886,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 7888,
                  "start": 7886,
                },
                "value": "ID",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 7906,
            "start": 7892,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7902,
              "start": 7892,
            },
            "value": "beginsWith",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7906,
              "start": 7904,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7906,
                "start": 7904,
              },
              "value": "ID",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 7908,
        "start": 7796,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7826,
          "start": 7802,
        },
        "value": "ModelIDKeyConditionInput",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 7965,
            "start": 7945,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7950,
              "start": 7945,
            },
            "value": "items",
          },
          "type": Object {
            "kind": "NonNullType",
            "loc": Object {
              "end": 7965,
              "start": 7952,
            },
            "type": Object {
              "kind": "ListType",
              "loc": Object {
                "end": 7964,
                "start": 7952,
              },
              "type": Object {
                "kind": "NamedType",
                "loc": Object {
                  "end": 7963,
                  "start": 7953,
                },
                "name": Object {
                  "kind": "Name",
                  "loc": Object {
                    "end": 7963,
                    "start": 7953,
                  },
                  "value": "PostEditor",
                },
              },
            },
          },
        },
        Object {
          "arguments": Array [],
          "description": undefined,
          "directives": Array [],
          "kind": "FieldDefinition",
          "loc": Object {
            "end": 7985,
            "start": 7968,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 7977,
              "start": 7968,
            },
            "value": "nextToken",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 7985,
              "start": 7979,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 7985,
                "start": 7979,
              },
              "value": "String",
            },
          },
        },
      ],
      "interfaces": Array [],
      "kind": "ObjectTypeDefinition",
      "loc": Object {
        "end": 7987,
        "start": 7910,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 7940,
          "start": 7915,
        },
        "value": "ModelPostEditorConnection",
      },
    },
    Object {
      "description": undefined,
      "directives": Array [],
      "fields": Array [
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8042,
            "start": 8026,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8028,
              "start": 8026,
            },
            "value": "id",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8042,
              "start": 8030,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8042,
                "start": 8030,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8065,
            "start": 8045,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8051,
              "start": 8045,
            },
            "value": "postID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8065,
              "start": 8053,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8065,
                "start": 8053,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8090,
            "start": 8068,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8076,
              "start": 8068,
            },
            "value": "editorID",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8090,
              "start": 8078,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8090,
                "start": 8078,
              },
              "value": "ModelIDInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8126,
            "start": 8093,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8096,
              "start": 8093,
            },
            "value": "and",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 8126,
              "start": 8098,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 8125,
                "start": 8099,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 8125,
                  "start": 8099,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8161,
            "start": 8129,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8131,
              "start": 8129,
            },
            "value": "or",
          },
          "type": Object {
            "kind": "ListType",
            "loc": Object {
              "end": 8161,
              "start": 8133,
            },
            "type": Object {
              "kind": "NamedType",
              "loc": Object {
                "end": 8160,
                "start": 8134,
              },
              "name": Object {
                "kind": "Name",
                "loc": Object {
                  "end": 8160,
                  "start": 8134,
                },
                "value": "ModelPostEditorFilterInput",
              },
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8195,
            "start": 8164,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8167,
              "start": 8164,
            },
            "value": "not",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8195,
              "start": 8169,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8195,
                "start": 8169,
              },
              "value": "ModelPostEditorFilterInput",
            },
          },
        },
        Object {
          "defaultValue": undefined,
          "description": undefined,
          "directives": Array [],
          "kind": "InputValueDefinition",
          "loc": Object {
            "end": 8225,
            "start": 8198,
          },
          "name": Object {
            "kind": "Name",
            "loc": Object {
              "end": 8206,
              "start": 8198,
            },
            "value": "_deleted",
          },
          "type": Object {
            "kind": "NamedType",
            "loc": Object {
              "end": 8225,
              "start": 8208,
            },
            "name": Object {
              "kind": "Name",
              "loc": Object {
                "end": 8225,
                "start": 8208,
              },
              "value": "ModelBooleanInput",
            },
          },
        },
      ],
      "kind": "InputObjectTypeDefinition",
      "loc": Object {
        "end": 8227,
        "start": 7989,
      },
      "name": Object {
        "kind": "Name",
        "loc": Object {
          "end": 8021,
          "start": 7995,
        },
        "value": "ModelPostEditorFilterInput",
      },
    },
  ],
  "kind": "Document",
  "loc": Object {
    "end": 8228,
    "start": 0,
  },
}
`;

exports[`validates VTL of a complex schema 1`] = `
Object {
  "Child.parents.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"id\\"), $ctx.source.id) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"childID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.childName.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.childName.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.childName) && !$util.isNull($ctx.args.childName.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"childName\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.childName.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byChild\\"
  }
#end",
  "Child.parents.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Friendship.friend.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"friendID\\"), $ctx.source.friendID) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Friendship.friend.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "Mutation.createChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createChild.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Child\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createFriendship.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Friendship\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"userID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createParent.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Parent\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"childID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPost.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPostAuthor.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostAuthor\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"authorID\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createPostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPostModel.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"PostModel\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.createUser.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"User\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.createUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.createUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate create mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $mergedValues.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$mergedValues.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When creating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate create mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.createUserModel.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"UserModel\\"))
#set( $nullIndexFields = [] )
#set( $indexFields = [\\"id\\"] )
#foreach( $entry in $util.map.copyAndRetainAllKeys($mergedValues, $indexFields).entrySet() )
  #if( $util.isNull($entry.value) )
    $util.qr($nullIndexFields.add($entry.key))
  #end
#end
#set( $mergedValues = $util.map.copyAndRemoveAllKeys($mergedValues, $nullIndexFields) )
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteChild.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteFriendship.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteParent.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePost.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePostAuthor.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePostModel.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUser.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Mutation.deleteUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.deleteUserModel.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deleteUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateChild.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateChild.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name\\": $util.dynamodb.toDynamoDB($mergedValues.name)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateChild.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateChild.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateFriendship.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateFriendship.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateFriendship.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateParent.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateParent.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateParent.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePost.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePostAuthor.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePostAuthor.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostAuthor.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePostModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePostModel.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePostModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateUser.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateUser.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${mergedValues.name}#\${mergedValues.surname}\\")
}))
## [End] Set the primary key. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
$util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
{}",
  "Mutation.updateUser.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUser.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateUserModel.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateUserModel.preAuth.1.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($mergedValues.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($mergedValues.rollNumber)
}))
## [End] Set the primary key. **

{}",
  "Mutation.updateUserModel.preAuth.2.req.vtl": "## [Start] Merge default values and inputs. **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($mergedValues.putAll($util.defaultIfNull($ctx.args.input, {})))
## [End] Merge default values and inputs. **
## [Start] Validate update mutation for @index 'composite'. **
#set( $hasSeenSomeKeyArg = false )
#set( $keyFieldNames = [\\"name\\", \\"surname\\"] )
#foreach( $keyFieldName in $keyFieldNames )
#if( $mergedValues.containsKey(\\"$keyFieldName\\") ) #set( $hasSeenSomeKeyArg = true ) #end
#end
#foreach( $keyFieldName in $keyFieldNames )
  #if( $hasSeenSomeKeyArg && !$mergedValues.containsKey(\\"$keyFieldName\\") )
    $util.error(\\"When updating any part of the composite sort key for @index 'composite', you must provide all fields for the key. Missing key: '$keyFieldName'.\\")
  #end
#end
## [End] Validate update mutation for @index 'composite'. **
#if( $util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) )
  $util.qr($ctx.stash.metadata.put(\\"dynamodbNameOverrideMap\\", { 'name#surname': \\"nameSurname\\" }))
#else
  $util.qr($ctx.stash.metadata.dynamodbNameOverrideMap.put('name#surname', \\"nameSurname\\"))
#end
#if( $hasSeenSomeKeyArg )
  $util.qr($ctx.args.input.put('name#surname',\\"\${mergedValues.name}#\${mergedValues.surname}\\"))
#end
{}",
  "Mutation.updateUserModel.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updateUserModel.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Parent.child.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"childID\\"), $ctx.source.childID) )
#if( $util.isNull($partitionKeyValue) || $util.isNull($ctx.source.childName) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue AND #sortKeyName = :sortKeyName\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKeyName\\": \\"name\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($partitionKeyValue, \\"___xamznone____\\"))),
      \\":sortKeyName\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($ctx.source.childName, \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "Parent.child.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "Post.authors.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"authorID\\"), $ctx.source.authorID) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 50) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #set( $sortKeyValue = \\"\\" )
  #set( $sortKeyValue2 = \\"\\" )
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
    #if( $ctx.args.nameSurname.between.size() != 2 )
      $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
    #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end
  #if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
  #end


  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end
  }
#end",
  "Post.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostAuthor.post.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"postID\\"), $ctx.source.postID) )
#if( $util.isNull($partitionKeyValue) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($partitionKeyValue, \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "PostAuthor.post.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "PostModel.authors.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"authorID\\"), $ctx.source.authorID) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $sortKeyValue0 = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"authorName\\"), $ctx.source.authorName) )
  #set( $sortKeyValue1 = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"authorSurname\\"), $ctx.source.authorSurname) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey AND #sortKey = :sortKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKey\\": \\"name#surname\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue),
      \\":sortKey\\": $util.dynamodb.toDynamoDB(\\"\${sortKeyValue0}#\${sortKeyValue1}\\")
  }
} )
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"composite\\"
  }
#end",
  "PostModel.authors.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "PostModel.singleAuthor.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttibutes.get(\\"authorID\\"), $ctx.source.authorID) )
#if( $util.isNull($partitionKeyValue) || $util.isNull($ctx.source.authorName) || $util.isNull($ctx.source.authorSurname) )
  #return
#else
  #set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
  $util.qr($GetRequest.put(\\"query\\", {
  \\"expression\\": \\"#partitionKey = :partitionValue AND #sortKeyName = :sortKeyName\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"id\\",
      \\"#sortKeyName\\": \\"name#surname\\"
  },
  \\"expressionValues\\": {
      \\":partitionValue\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank($partitionKeyValue, \\"___xamznone____\\"))),
      \\":sortKeyName\\": $util.parseJson($util.dynamodb.toDynamoDBJson($util.defaultIfNullOrBlank(\\"\${ctx.source.authorName}#\${ctx.source.authorSurname}\\", \\"___xamznone____\\")))
  }
}))
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
  #end
  $util.toJson($GetRequest)
#end",
  "PostModel.singleAuthor.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
    $util.toJson($ctx.result.items[0])
  #else
    #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
    #end
    $util.toJson(null)
  #end
#end",
  "Query.getChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getChild.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name\\": $util.dynamodb.toDynamoDB($ctx.args.name)
}))
## [End] Set the primary key. **
{}",
  "Query.getChild.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getChild.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getFriendship.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getFriendship.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getParent.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getParent.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPost.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPost.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPostAuthor.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostAuthor.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getPostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPostModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPostModel.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getUser.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"name#surname\\": $util.dynamodb.toDynamoDB(\\"\${ctx.args.name}#\${ctx.args.surname}\\")
}))
## [End] Set the primary key. **
{}",
  "Query.getUser.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUser.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.getUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getUserModel.preAuth.1.req.vtl": "## [Start] Set the primary key. **
$util.qr($ctx.stash.metadata.put(\\"modelObjectKey\\", {
  \\"id\\": $util.dynamodb.toDynamoDB($ctx.args.id),
  \\"rollNumber\\": $util.dynamodb.toDynamoDB($ctx.args.rollNumber)
}))
## [End] Set the primary key. **
{}",
  "Query.getUserModel.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getUserModel.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.listChildren.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listChildren.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.name) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'name' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.name.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.name.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.eq\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.lt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.le\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.gt\\" }))
#end
#if( !$util.isNull($ctx.args.name) && !$util.isNull($ctx.args.name.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.name.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listChildren.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listChildren.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listFriendships.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listFriendships.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listFriendships.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listParents.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listParents.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listParents.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPostAuthors.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPostAuthors.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostAuthors.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPostModels.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPostModels.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPostModels.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPosts.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listUserModels.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listUserModels.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.rollNumber) && $util.isNull($ctx.args.id) )
  $util.error(\\"When providing argument 'rollNumber' you must also provide arguments id\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.beginsWith) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.beginsWith\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.between) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"N\\": \\"$ctx.args.rollNumber.between[0]\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"N\\": \\"$ctx.args.rollNumber.between[1]\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.eq) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.eq\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.lt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.lt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.le) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.le\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.gt) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.gt\\" }))
#end
#if( !$util.isNull($ctx.args.rollNumber) && !$util.isNull($ctx.args.rollNumber.ge) )
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"rollNumber\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"N\\": \\"$ctx.args.rollNumber.ge\\" }))
#end
## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUserModels.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUserModels.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listUsers.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listUsers.preAuth.1.req.vtl": "## [Start] Set query expression for key **
#if( $util.isNull($ctx.args.id) && !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"When providing argument 'sortDirection' you must also provide argument 'id'.\\", \\"InvalidArgumentsError\\")
#end
#set( $modelQueryExpression = {} )
## [Start] Validate key arguments. **
#if( !$util.isNull($ctx.args.nameSurname) && $util.isNullOrBlank($ctx.args.id) )
  $util.error(\\"When providing argument 'nameSurname' you must also provide 'id'.\\", \\"InvalidArgumentsError\\")
#end
#if( !$util.isNull($ctx.args.nameSurname) )
  #set( $sortKeyArgumentOperations = $ctx.args.nameSurname.keySet() )
  #if( $sortKeyArgumentOperations.size() > 1 )
    $util.error(\\"Argument nameSurname must specify at most one key condition operation.\\", \\"InvalidArgumentsError\\")
  #end
  #foreach( $operation in $sortKeyArgumentOperations )
    #if( $operation == \\"between\\" )
      #if( $ctx.args.nameSurname.between.size() != 2 )
        $util.error(\\"Argument 'nameSurname.between' expects exactly two elements.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[0].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[0].name) )
        $util.error(\\"When providing argument 'nameSurname.between[0].surname' you must also provide 'nameSurname.between[0].name'.\\", \\"InvalidArgumentsError\\")
      #end
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.between[1].surname) && $util.isNullOrBlank($ctx.args.nameSurname.between[1].name) )
        $util.error(\\"When providing argument 'nameSurname.between[1].surname' you must also provide 'nameSurname.between[1].name'.\\", \\"InvalidArgumentsError\\")
      #end
    #else
      #if( !$util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").surname) && $util.isNullOrBlank($ctx.args.nameSurname.get(\\"$operation\\").name) )
        $util.error(\\"When providing argument 'nameSurname.$operation.surname' you must also provide 'nameSurname.$operation.name'.\\", \\"InvalidArgumentsError\\")
      #end
    #end
  #end
#end
## [End] Validate key arguments. **
#if( !$util.isNull($ctx.args.id) )
  #set( $modelQueryExpression.expression = \\"#id = :id\\" )
  #set( $modelQueryExpression.expressionNames = {
  \\"#id\\": \\"id\\"
} )
  #set( $modelQueryExpression.expressionValues = {
  \\":id\\": {
      \\"S\\": \\"$ctx.args.id\\"
  }
} )
#end
## [Start] Applying Key Condition **
#set( $sortKeyValue = \\"\\" )
#set( $sortKeyValue2 = \\"\\" )
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.beginsWith) )
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.beginsWith.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.beginsWith.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.beginsWith.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND begins_with(#sortKey, :sortKey)\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.between) )
  #if( $ctx.args.nameSurname.between.size() != 2 )
    $util.error(\\"Argument nameSurname.between expects exactly 2 elements.\\")
  #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.between[0].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[0].surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.between[0].surname\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].name) ) #set( $sortKeyValue2 = \\"$ctx.args.nameSurname.between[1].name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.between[1].surname) ) #set( $sortKeyValue2 = \\"$sortKeyValue2#$ctx.args.nameSurname.between[1].surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$sortKeyValue\\" }))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$sortKeyValue2\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.eq) )
#if( !$util.isNull($ctx.args.nameSurname.eq.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.eq.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.eq.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.eq.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey = :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.lt) )
#if( !$util.isNull($ctx.args.nameSurname.lt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.lt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.lt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.lt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey < :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.le) )
#if( !$util.isNull($ctx.args.nameSurname.le.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.le.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.le.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.le.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey <= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.gt) )
#if( !$util.isNull($ctx.args.nameSurname.gt.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.gt.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.gt.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.gt.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey > :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end
#if( !$util.isNull($ctx.args.nameSurname) && !$util.isNull($ctx.args.nameSurname.ge) )
#if( !$util.isNull($ctx.args.nameSurname.ge.name) ) #set( $sortKeyValue = \\"$ctx.args.nameSurname.ge.name\\" ) #end
#if( !$util.isNull($ctx.args.nameSurname.ge.surname) ) #set( $sortKeyValue = \\"$sortKeyValue#$ctx.args.nameSurname.ge.surname\\" ) #end
  #set( $modelQueryExpression.expression = \\"$modelQueryExpression.expression AND #sortKey >= :sortKey\\" )
  $util.qr($modelQueryExpression.expressionNames.put(\\"#sortKey\\", \\"name#surname\\"))
  $util.qr($modelQueryExpression.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$sortKeyValue\\" }))
#end


## [End] Applying Key Condition **
## [End] Set query expression for key **
$util.qr($ctx.stash.put(\\"modelQueryExpression\\", $modelQueryExpression))
{}",
  "Query.listUsers.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listUsers.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onCreateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateChild.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateChild.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateChild.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateFriendship.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateFriendship.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateFriendship.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateParent.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateParent.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateParent.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePostAuthor.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePostAuthor.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePostAuthor.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePostModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePostModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePostModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateUser.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateUser.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateUser.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateUserModel.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateUserModel.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateUserModel.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "User.friendships.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"id\\"), $ctx.source.id) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"userID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.friendID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.friendID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.friendID) && !$util.isNull($ctx.args.friendID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"friendID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.friendID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byUser\\"
  }
#end",
  "User.friendships.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
  "UserModel.authorPosts.req.vtl": "#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $partitionKeyValue = $util.defaultIfNull($ctx.stash.connectionAttributes.get(\\"id\\"), $ctx.source.id) )
#if( $util.isNull($partitionKeyValue) )
  #set( $result = {
  \\"items\\":   []
} )
  #return($result)
#else
  #set( $limit = $util.defaultIfNull($context.args.limit, 100) )
  #set( $query = {
  \\"expression\\": \\"#partitionKey = :partitionKey\\",
  \\"expressionNames\\": {
      \\"#partitionKey\\": \\"authorID\\"
  },
  \\"expressionValues\\": {
      \\":partitionKey\\": $util.dynamodb.toDynamoDB($partitionKeyValue)
  }
} )
  ## [Start] Applying Key Condition **
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.beginsWith) )
    #set( $query.expression = \\"$query.expression AND begins_with(#sortKey, :sortKey)\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.beginsWith\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.between) )
    #set( $query.expression = \\"$query.expression AND #sortKey BETWEEN :sortKey0 AND :sortKey1\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey0\\", { \\"S\\": \\"$ctx.args.postID.between[0]\\" }))
    $util.qr($query.expressionValues.put(\\":sortKey1\\", { \\"S\\": \\"$ctx.args.postID.between[1]\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.eq) )
    #set( $query.expression = \\"$query.expression AND #sortKey = :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.eq\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.lt) )
    #set( $query.expression = \\"$query.expression AND #sortKey < :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.lt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.le) )
    #set( $query.expression = \\"$query.expression AND #sortKey <= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.le\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.gt) )
    #set( $query.expression = \\"$query.expression AND #sortKey > :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.gt\\" }))
  #end
  #if( !$util.isNull($ctx.args.postID) && !$util.isNull($ctx.args.postID.ge) )
    #set( $query.expression = \\"$query.expression AND #sortKey >= :sortKey\\" )
    $util.qr($query.expressionNames.put(\\"#sortKey\\", \\"postID\\"))
    $util.qr($query.expressionValues.put(\\":sortKey\\", { \\"S\\": \\"$ctx.args.postID.ge\\" }))
  #end
  ## [End] Applying Key Condition **
  #set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
  #if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
    #set( $filter = $ctx.stash.authFilter )
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
    #end
  #else
    #if( !$util.isNullOrEmpty($args.filter) )
      #set( $filter = $args.filter )
    #end
  #end
  #if( !$util.isNullOrEmpty($filter) )
    #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
    #if( !$util.isNullOrBlank($filterExpression.expression) )
      #if( $filterExpression.expressionValues.size() == 0 )
        $util.qr($filterExpression.remove(\\"expressionValues\\"))
      #end
      #set( $filter = $filterExpression )
    #end
  #end
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Query\\",
      \\"query\\":     $util.toJson($query),
      \\"scanIndexForward\\":     #if( $context.args.sortDirection )
      #if( $context.args.sortDirection == \\"ASC\\" )
true
      #else
false
      #end
    #else
true
    #end,
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $limit,
      \\"nextToken\\":     #if( $context.args.nextToken )
$util.toJson($context.args.nextToken)
    #else
null
    #end,
      \\"index\\": \\"byAuthor\\"
  }
#end",
  "UserModel.authorPosts.res.vtl": "#if( $ctx.error )
$util.error($ctx.error.message, $ctx.error.type)
#else
  #if( !$result )
    #set( $result = $ctx.result )
  #end
  $util.toJson($result)
#end",
}
`;
