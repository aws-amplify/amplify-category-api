import { Construct } from 'constructs';
import { executeTransform } from '@aws-amplify/graphql-transformer';
import {
  convertAuthorizationModesToTransformerAuthConfig,
  preprocessGraphqlSchema,
  convertToResolverConfig,
  defaultSchemaTranslationBehavior,
  setKnownParameterDefaults,
  validateAllParametersHaveDefaults,
  overwriteStackDescriptionWithAmplifyMetadata,
} from './internal';
import type { AmplifyGraphqlApiProps } from './types';
import { parseUserDefinedSlots, validateFunctionSlots, separateSlots } from './internal/user-defined-slots';

/**
 * L3 Construct which invokes the Amplify Transformer Pattern over an input Graphql Schema.
 *
 * This can be used to quickly define appsync apis which support full CRUD+List and Subscriptions, relationships,
 * auth, search over data, the ability to inject custom business logic and query/mutation operations, and connect to ML services.
 *
 * For more information, refer to the docs links below:
 * Data Modeling - https://docs.amplify.aws/cli/graphql/data-modeling/
 * Authorization - https://docs.amplify.aws/cli/graphql/authorization-rules/
 * Custom Business Logic - https://docs.amplify.aws/cli/graphql/custom-business-logic/
 * Search - https://docs.amplify.aws/cli/graphql/search-and-result-aggregations/
 * ML Services - https://docs.amplify.aws/cli/graphql/connect-to-machine-learning-services/
 *
 * For a full reference of the supported custom graphql directives - https://docs.amplify.aws/cli/graphql/directives-reference/
 *
 * The output of this construct is a mapping of L1 resources generated by the transformer, which generally follow the access pattern
 *
 * ```typescript
 *   const api = new AmplifyGraphQlApi(this, 'api', { <params> });
 *   api.resources.api.xrayEnabled = true;
 *   Object.values(api.resources.tables).forEach(table => table.pointInTimeRecoverySpecification = { pointInTimeRecoveryEnabled: false });
 * ```
 * `resources.<ResourceType>.<ResourceName>` - you can then perform any CDK action on these resulting resoureces.
 */
export class AmplifyGraphqlApi extends Construct {
  // private readonly resources: AmplifyGraphqlApiResources;

  constructor(scope: Construct, id: string, props: AmplifyGraphqlApiProps) {
    super(scope, id);

    const {
      schema: modelSchema,
      authorizationConfig,
      conflictResolution,
      functionSlots,
      transformers,
      predictionsBucket,
      stackMappings,
      schemaTranslationBehavior,
      functionNameMap,
    } = props;

    const {
      authConfig,
      identityPoolId,
      adminRoles,
      cfnIncludeParameters: authParameters,
    } = convertAuthorizationModesToTransformerAuthConfig(authorizationConfig);

    // TODO: Wire referenced functions into the transform.
    if (functionNameMap && Object.keys(functionNameMap).length > 0) {
      throw new Error('functionNameMap not yet supported in this revision.');
    }

    // TODO: This needs to be removed, and exists just to bridge what we have today w/ what we want down the road.
    validateFunctionSlots(functionSlots ?? []);
    const separatedFunctionSlots = separateSlots(functionSlots ?? []);

    overwriteStackDescriptionWithAmplifyMetadata(this);

    executeTransform({
      scope,
      schema: preprocessGraphqlSchema(modelSchema),
      userDefinedSlots: parseUserDefinedSlots(separatedFunctionSlots),
      transformersFactoryArgs: {
        authConfig,
        identityPoolId,
        adminRoles,
        customTransformers: transformers ?? [],
        ...(predictionsBucket ? { storageConfig: { bucketName: predictionsBucket.bucketName } } : {}),
      },
      authConfig,
      stackMapping: stackMappings ?? {},
      resolverConfig: conflictResolution ? convertToResolverConfig(conflictResolution) : undefined,
      transformParameters: {
        ...defaultSchemaTranslationBehavior,
        ...(schemaTranslationBehavior ?? {}),
      },
    });

    const env = this.node.tryGetContext('env') ?? 'NONE';
    if (env.length > 8) {
      throw new Error(`or cdk --context env must have a length <= 8, found ${env}`);
    }

    setKnownParameterDefaults(this, {
      AppSyncApiName: props.apiName ?? id,
      env,
      ...authParameters,
    });
    validateAllParametersHaveDefaults(this); // We'll need to restrict this, since this'll throw if the user provides a param w/o default

    // this.resources = generateConstructExports(this);

    // TODO:
    //   * Logical ID Preservation on certain resource types.
    //     * Currently bumping into some issues here, primarily we need to EITHER use `overrideLogicalId` on the following resources:
    //       AWS::DynamoDB::Table, AWS::Elasticsearch::Domain, AWS::RDS::DBCluster, AWS::CloudFormation::Stack, AWS::AppSync::GraphQLApi
    //       OR we break the expectation that there are hardcoded logical ids everywhere (can't do this for CLI, but for CDK we can)
    //   * Output Generation (Including L2s)
    //   * Persisting resolvers somehow for the manifest generation.
    //   * Remove `Amplify` object in output schema file
  }
}
