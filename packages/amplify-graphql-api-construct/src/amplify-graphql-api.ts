import { Construct } from 'constructs';
import { executeTransform } from '@aws-amplify/graphql-transformer';
import { NestedStack } from 'aws-cdk-lib';
import { Asset } from 'aws-cdk-lib/aws-s3-assets';
import { AssetProps } from '@aws-amplify/graphql-transformer-interfaces';
import {
  convertAuthorizationModesToTransformerAuthConfig,
  preprocessSchema,
  convertToResolverConfig,
  defaultSchemaTranslationBehavior,
  AssetManager,
  getGeneratedResources,
  getGeneratedFunctionSlots,
} from './internal';
import type { AmplifyGraphqlApiResources, AmplifyGraphqlApiProps, FunctionSlot } from './types';
import { parseUserDefinedSlots, validateFunctionSlots, separateSlots } from './internal/user-defined-slots';

/**
 * L3 Construct which invokes the Amplify Transformer Pattern over an input Graphql Schema.
 *
 * This can be used to quickly define appsync apis which support full CRUD+List and Subscriptions, relationships,
 * auth, search over data, the ability to inject custom business logic and query/mutation operations, and connect to ML services.
 *
 * For more information, refer to the docs links below:
 * Data Modeling - https://docs.amplify.aws/cli/graphql/data-modeling/
 * Authorization - https://docs.amplify.aws/cli/graphql/authorization-rules/
 * Custom Business Logic - https://docs.amplify.aws/cli/graphql/custom-business-logic/
 * Search - https://docs.amplify.aws/cli/graphql/search-and-result-aggregations/
 * ML Services - https://docs.amplify.aws/cli/graphql/connect-to-machine-learning-services/
 *
 * For a full reference of the supported custom graphql directives - https://docs.amplify.aws/cli/graphql/directives-reference/
 *
 * The output of this construct is a mapping of L1 resources generated by the transformer, which generally follow the access pattern
 *
 * ```typescript
 *   const api = new AmplifyGraphQlApi(this, 'api', { <params> });
 *   api.resources.api.xrayEnabled = true;
 *   Object.values(api.resources.tables).forEach(table => table.pointInTimeRecoverySpecification = { pointInTimeRecoveryEnabled: false });
 * ```
 * `resources.<ResourceType>.<ResourceName>` - you can then perform any CDK action on these resulting resoureces.
 */
export class AmplifyGraphqlApi<SchemaType = AmplifyGraphqlApiResources> extends Construct {
  /**
   * Generated resources.
   */
  public readonly resources: AmplifyGraphqlApiResources;

  /**
   * Resolvers generated by the transform process, persisted on the side in order to facilitate pulling a manifest
   * for the purposes of inspecting and producing overrides.
   */
  public readonly generatedFunctionSlots: FunctionSlot[];

  constructor(scope: Construct, id: string, props: AmplifyGraphqlApiProps<SchemaType>) {
    super(scope, id);

    const {
      schema: unprocessedSchema,
      schemaPreprocessor,
      authorizationConfig,
      conflictResolution,
      functionSlots,
      transformers,
      predictionsBucket,
      stackMappings,
      schemaTranslationBehavior,
      functionNameMap,
    } = props;

    const { authConfig, identityPoolId, adminRoles, authSynthParameters } =
      convertAuthorizationModesToTransformerAuthConfig(authorizationConfig);

    const { processedSchema, processedFunctionSlots } = preprocessSchema(unprocessedSchema, schemaPreprocessor);

    validateFunctionSlots(functionSlots ?? []);
    const separatedFunctionSlots = separateSlots([...(functionSlots ?? []), ...(processedFunctionSlots ?? [])]);

    // Allow amplifyEnvironmentName to be retrieve from context, and use value 'NONE' if no value can be found.
    // amplifyEnvironmentName is required for logical id suffixing, as well as Exports from the nested stacks.
    // Allow export so customers can reuse the env in their own references downstream.
    const amplifyEnvironmentName = this.node.tryGetContext('amplifyEnvironmentName') ?? 'NONE';
    if (amplifyEnvironmentName.length > 8) {
      throw new Error(`or cdk --context env must have a length <= 8, found ${amplifyEnvironmentName}`);
    }

    const assetManager = new AssetManager();

    executeTransform({
      scope: this,
      nestedStackProvider: {
        provide: (nestedStackScope: Construct, name: string) => new NestedStack(nestedStackScope, name),
      },
      assetProvider: {
        provide: (assetScope: Construct, assetId: string, assetProps: AssetProps) =>
          new Asset(assetScope, assetId, { path: assetManager.addAsset(assetProps.fileName, assetProps.fileContent) }),
      },
      synthParameters: {
        amplifyEnvironmentName: amplifyEnvironmentName,
        apiName: props.apiName ?? id,
        ...authSynthParameters,
      },
      schema: processedSchema,
      userDefinedSlots: parseUserDefinedSlots(separatedFunctionSlots),
      transformersFactoryArgs: {
        authConfig,
        identityPoolId,
        adminRoles,
        customTransformers: transformers ?? [],
        ...(predictionsBucket ? { storageConfig: { bucketName: predictionsBucket.bucketName } } : {}),
        functionNameMap,
      },
      authConfig,
      stackMapping: stackMappings ?? {},
      resolverConfig: conflictResolution ? convertToResolverConfig(conflictResolution) : undefined,
      transformParameters: {
        ...defaultSchemaTranslationBehavior,
        ...(schemaTranslationBehavior ?? {}),
      },
    });

    this.resources = getGeneratedResources(this);
    this.generatedFunctionSlots = getGeneratedFunctionSlots(assetManager.resolverAssets);
  }
}
