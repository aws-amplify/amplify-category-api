import { Construct } from 'constructs';
import { CfnGraphQLApi, CfnGraphQLSchema, CfnApiKey, CfnResolver, CfnFunctionConfiguration, CfnDataSource } from 'aws-cdk-lib/aws-appsync';
import { CfnTable } from 'aws-cdk-lib/aws-dynamodb';
import { CfnRole, CfnPolicy } from 'aws-cdk-lib/aws-iam';
import { CfnResource } from 'aws-cdk-lib';
import { getResourceName } from '@aws-amplify/graphql-transformer-core';
import { CfnFunction } from 'aws-cdk-lib/aws-lambda';
import { AmplifyGraphqlApiResources } from '../types';

/**
 * Everything below here is intended to help us gather the
 * output values and render out the L1 resources for access.
 *
 * This is done by recursing along the construct tree, and classifying the generated resources.
 *
 * @param scope root to search for generated resource against
 * @returns a mapping of L1 and L2 constructs generated by the Graphql Transformer.
 */
export const getGeneratedResources = (scope: Construct): AmplifyGraphqlApiResources => {
  let cfnGraphqlApi: CfnGraphQLApi | undefined;
  let cfnGraphqlSchema: CfnGraphQLSchema | undefined;
  let cfnApiKey: CfnApiKey | undefined;
  const cfnResolvers: Record<string, CfnResolver> = {};
  const cfnFunctionConfigurations: Record<string, CfnFunctionConfiguration> = {};
  const cfnDataSources: Record<string, CfnDataSource> = {};
  const cfnTables: Record<string, CfnTable> = {};
  const cfnRoles: Record<string, CfnRole> = {};
  const cfnPolicies: Record<string, CfnPolicy> = {};
  const cfnFunctions: Record<string, CfnFunction> = {};
  const additionalCfnResources: Record<string, CfnResource> = {};

  const classifyConstruct = (currentScope: Construct): void => {
    if (currentScope instanceof CfnGraphQLApi) {
      cfnGraphqlApi = currentScope;
      return;
    }
    if (currentScope instanceof CfnGraphQLSchema) {
      cfnGraphqlSchema = currentScope;
      return;
    }
    if (currentScope instanceof CfnApiKey) {
      cfnApiKey = currentScope;
      return;
    }

    // Retrieve reference name for indexed resources, and bail if none is found.
    const resourceName = getResourceName(currentScope);
    if (!resourceName) return;

    if (currentScope instanceof CfnDataSource) {
      cfnDataSources[resourceName] = currentScope;
      return;
    }
    if (currentScope instanceof CfnResolver) {
      cfnResolvers[resourceName] = currentScope;
      return;
    }
    if (currentScope instanceof CfnFunctionConfiguration) {
      cfnFunctionConfigurations[resourceName] = currentScope;
      return;
    }
    if (currentScope instanceof CfnTable) {
      cfnTables[resourceName] = currentScope;
      return;
    }
    if (currentScope instanceof CfnRole) {
      cfnRoles[resourceName] = currentScope;
      return;
    }
    if (currentScope instanceof CfnPolicy) {
      cfnPolicies[resourceName] = currentScope;
      return;
    }
    if (currentScope instanceof CfnFunction) {
      cfnFunctions[resourceName] = currentScope;
      return;
    }
    if (currentScope instanceof CfnResource) {
      additionalCfnResources[resourceName] = currentScope;
      return;
    }
  };

  const walkAndClassifyConstructTree = (currentScope: Construct): void => {
    classifyConstruct(currentScope);
    currentScope.node.children.forEach(walkAndClassifyConstructTree);
  };

  scope.node.children.forEach(walkAndClassifyConstructTree);

  if (!cfnGraphqlApi) {
    throw new Error('Expected to find AWS::AppSync::GraphQLApi in the generated resource scope.');
  }

  if (!cfnGraphqlSchema) {
    throw new Error('Expected to find AWS::AppSync::GraphQLSchema in the generated resource scope.');
  }

  return {
    cfnGraphqlApi,
    cfnGraphqlSchema,
    cfnApiKey,
    cfnResolvers,
    cfnFunctionConfigurations,
    cfnDataSources,
    cfnTables,
    cfnRoles,
    cfnPolicies,
    cfnFunctions,
    additionalCfnResources,
  };
};
