// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a extending Query and Mutation in multiple definitions 1`] = `
"type Todo @model {
  id: ID! @primaryKey
  title: String!
}

type Mutation {
  customSqlMutationStatement: [Int] @sql(statement: \\"UPDATE mytable SET id=1; SELECT 1\\")
  customSqlMutationReference: [Int] @sql(reference: \\"customSqlMutationReference\\")
}

type Query {
  customSqlQueryStatement: [Int] @sql(statement: \\"SELECT 1\\")
  customSqlQueryReference: [Int] @sql(reference: \\"customSqlQueryReference\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a schema with a mix of models and custom sql 1`] = `
"type Post @model {
  id: ID!
  title: String!
  comments: [Comment] @hasMany
}

type Comment @model {
  id: ID!
  content: String!
  post: Post @belongsTo
}

type Project @model {
  id: ID! @primaryKey
  name: String
  team: Team @hasOne(references: [\\"projectId\\"])
}

type Team @model {
  id: ID! @primaryKey
  name: String!
  projectId: ID!
  project: Project @belongsTo(references: [\\"projectId\\"])
}

type Query {
  selectOne: [String] @sql(statement: \\"SELECT 'mysql=1'\\")
  selectTwo: [String] @sql(statement: \\"SELECT 'postgres=2'\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a schema with both models and custom SQL inline queries 1`] = `
"type Todo @model {
  id: ID! @primaryKey
  title: String!
}

type Query {
  customSqlQueryStatement: [Int] @sql(statement: \\"SELECT 1\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a schema with both models and custom SQL referenced queries 1`] = `
"type Todo @model {
  id: ID! @primaryKey
  title: String!
}

type Query {
  customSqlQueryReference: [Int] @sql(reference: \\"customSqlQueryReference\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a schema with both models and custom SQL with a mix of inline and referenced queries 1`] = `
"type Todo @model {
  id: ID! @primaryKey
  title: String!
}

type Query {
  customSqlQueryStatement: [Int] @sql(statement: \\"SELECT 1\\")
  customSqlQueryReference: [Int] @sql(reference: \\"customSqlQueryReference\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a schema with only custom SQL inline queries 1`] = `
"type Mutation {
  customSqlMutationStatement: [Int] @sql(statement: \\"UPDATE mytable SET id=1; SELECT 1\\")
}

type Query {
  customSqlQueryStatement: [Int] @sql(statement: \\"SELECT 1\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a schema with only custom SQL referenced queries 1`] = `
"type Mutation {
  customSqlMutationReference: [Int] @sql(reference: \\"customSqlMutationReference\\")
}

type Query {
  customSqlQueryReference: [Int] @sql(reference: \\"customSqlQueryReference\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior Custom SQL support supports a schema with only custom SQL with a mix of inline and referenced queries 1`] = `
"type Query {
  customSqlQueryStatement: [Int] @sql(statement: \\"SELECT 1\\")
  customSqlQueryReference: [Int] @sql(reference: \\"customSqlQueryReference\\")
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines heterogeneous independent DDB table definitions into a definition with multiple ModelDataSourceStrategies 1`] = `
"type Todo @model {
  id: ID!
  title: String!
}

type Todo2 @model {
  id: ID!
  title: String!
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines heterogeneous independent SQL table definitions into an API with multiple ModelDataSourceStrategies 1`] = `
"type Todo @model {
  id: ID! @primaryKey
  title: String!
}

type Todo2 @model {
  id: ID! @primaryKey
  title: String!
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines heterogeneous independent definitions for multiple supported db types into an API with multiple ModelDataSourceStrategies 1`] = `
"type Todo @model {
  id: ID!
  title: String!
}

type Todo2 @model {
  id: ID!
  title: String!
}

type Todo3 @model {
  id: ID! @primaryKey
  title: String!
}

type Todo4 @model {
  id: ID! @primaryKey
  title: String!
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines heterogeneous related DDB table definitions into a definition with multiple ModelDataSourceStrategies 1`] = `
"type Order @model {
  id: ID!
  content: String
  lineItem: [LineItem] @hasMany
}

type LineItem @model {
  id: ID!
  name: String!
  orderId: ID!
  order: Order @belongsTo
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines heterogeneous related SQL table definitions into an API with multiple ModelDataSourceStrategies 1`] = `
"type Order @model {
  id: ID! @primaryKey
  content: String
  lineItem: [LineItem] @hasMany(references: [\\"orderId\\"])
}

type LineItem @model {
  id: ID! @primaryKey
  name: String!
  orderId: ID!
  order: Order @belongsTo(references: [\\"orderId\\"])
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines heterogeneous related definitions for multiple supported db types into an API with multiple ModelDataSourceStrategies 1`] = `
"type Blog @model {
  id: ID!
  name: String!
  posts: [Post] @hasMany
}

type Post @model {
  id: ID! @primaryKey
  title: String!
  blogId: ID!
  blog: Blog @belongsTo(references: [\\"blogId\\"])
  comments: [Comment] @hasMany(references: [\\"postId\\"])
}

type Comment @model {
  id: ID! @primaryKey
  postId: ID!
  post: Post @belongsTo(references: [\\"postId\\"])
  content: String!
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines homogenous independent DDB Amplify-managed table definitions into a definition with one ModelDataSourceStrategy 1`] = `
"type Todo @model {
  id: ID!
  title: String!
}

type Todo2 @model {
  id: ID!
  title: String!
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines homogenous independent DDB default definitions into a definition with one ModelDataSourceStrategy 1`] = `
"type Todo @model {
  id: ID!
  title: String!
}

type Todo2 @model {
  id: ID!
  title: String!
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines homogenous related DDB Amplify-managed table definitions into a definition with one ModelDataSourceStrategy 1`] = `
"type Order @model {
  id: ID!
  content: String
  lineItem: [LineItem] @hasMany
}

type LineItem @model {
  id: ID!
  name: String!
  orderId: ID!
  order: Order @belongsTo
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior combines homogenous related DDB default definitions into a definition with one ModelDataSourceStrategy 1`] = `
"type Order @model {
  id: ID!
  content: String
  lineItem: [LineItem] @hasMany
}

type LineItem @model {
  id: ID!
  name: String!
  orderId: ID!
  order: Order @belongsTo
}
"
`;

exports[`AmplifyGraphqlDefinition.combine definition behavior supports nested combined definitions 1`] = `
"type Todo @model {
  id: ID!
  title: String!
}

type Todo2 @model {
  id: ID!
  title: String!
}

type Todo3 @model {
  id: ID! @primaryKey
  title: String!
}

type Todo4 @model {
  id: ID! @primaryKey
  title: String!
}
"
`;
