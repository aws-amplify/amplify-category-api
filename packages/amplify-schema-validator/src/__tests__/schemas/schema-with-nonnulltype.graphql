type AllTypes @model @auth(rules: [{ allow: public }, { allow: private }]) {
  id: ID!
  name: String
  age: Int
  height: Float
  active: Boolean
  createdAt: AWSDate
  updatedAtDateTime: AWSDateTime
  time: AWSTime
  timestamp: AWSTimestamp
  json: AWSJSON
  email: AWSEmail
  url: AWSURL
  phone: AWSPhone
  ip: AWSIPAddress
  test: String
}

type Contract @model @auth(rules: [{ allow: public }]) {
  id: ID!
  OrderId: String
  status: String
  users: [User!] @manyToMany(relationName: "UserContract")
  Devices: [Device!] @hasMany(indexName: "byContract", fields: ["id"])
  owners: [String]
  viewers: [String]
}

type Iccid @model @auth(rules: [{ allow: public }]) {
  serialNumber: ID!
  Status: String
  ops: String
  Devices: [Device] @manyToMany(relationName: "IccidDevice")
  owners: [String]
  viewers: [String]
}

type Relative @model @auth(rules: [{ allow: public }]) {
  id: ID!
  User: User @hasOne
  seniors: [Senior] @manyToMany(relationName: "SeniorRelative")
  owners: [String]
  viewers: [String]
}

type Senior @model @auth(rules: [{ allow: public }]) {
  id: ID!
  User: User @hasOne
  Relatives: [Relative] @manyToMany(relationName: "SeniorRelative")
  owners: [String]
  viewers: [String]
}

type Device @model @auth(rules: [{ allow: public }]) {
  id: ID!
  serialNumber: ID!
  Senior: Senior @hasOne
  DeviceType: String
  IsActive: String
  PcbID: String
  Status: String
  contractID: ID @index(name: "byContract")
  dashboards: [Dashboard] @manyToMany(relationName: "DashboardDevice")
  iccids: [Iccid] @manyToMany(relationName: "IccidDevice")
  owners: [String]
  viewers: [String]
}

type Dashboard @model @auth(rules: [{ allow: public }]) {
  id: ID!
  DashboardName: String!
  Devices: [Device] @manyToMany(relationName: "DashboardDevice")
  users: [User] @manyToMany(relationName: "UserDashboard")
  owners: [String]
  viewers: [String]
}

type User @model @auth(rules: [{ allow: public }]) {
  id: ID!
  Email: String!
  Dashboards: [Dashboard] @manyToMany(relationName: "UserDashboard")
  UserContracts: [Contract] @manyToMany(relationName: "UserContract")
  """
  UserContracts: [UserContract] @hasMany(indexName: "byUser", fields: ["id"])
  """
  AliasName: String
  Birthday: String
  City: String
  Country: String
  Department: String
  FirstName: String
  Gender: String
  IdentityId: String
  LastName: String
  MobileNumber: String
  PassportId: String
  PhoneNumber: String
  Relationship: String
  Role: String
  RoomNumber: String
  State: String
  Street: String
  ZipCode: String
  dashboardID: String
  Community: String
  Notes: String
  HouseNumber: String
  owners: [String]
  viewers: [String]
}

type Foo @model @auth(rules: [{ allow: public }]) {
  name: String
  Bar: Bar! @hasOne
}

type Bar @model @auth(rules: [{ allow: public }]) {
  name: String
  description: String
  Foo: Foo @belongsTo
}

type Project @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  team: Team @hasOne
  projectID: ID
}

type Team @model @auth(rules: [{ allow: public }]) {
  id: ID!
  name: String!
  projectID: ID
  project: Project! @belongsTo(fields: ["projectID"])
}
