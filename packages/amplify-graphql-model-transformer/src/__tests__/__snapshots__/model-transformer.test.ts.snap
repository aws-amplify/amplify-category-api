// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ModelTransformer: id with non string type should require the field on create mutation 1`] = `
"type Task {
  id: Int!
  title: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTaskConnection {
  items: [Task]!
  nextToken: String
}

input ModelTaskFilterInput {
  id: ModelIntInput
  title: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTaskFilterInput]
  or: [ModelTaskFilterInput]
  not: ModelTaskFilterInput
}

type Query {
  getTask(id: ID!): Task
  listTasks(filter: ModelTaskFilterInput, limit: Int, nextToken: String): ModelTaskConnection
}

input ModelTaskConditionInput {
  id: ModelIntInput
  title: ModelStringInput
  and: [ModelTaskConditionInput]
  or: [ModelTaskConditionInput]
  not: ModelTaskConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTaskInput {
  id: Int!
  title: String!
}

input UpdateTaskInput {
  id: Int!
  title: String
}

input DeleteTaskInput {
  id: ID!
}

type Mutation {
  createTask(input: CreateTaskInput!, condition: ModelTaskConditionInput): Task
  updateTask(input: UpdateTaskInput!, condition: ModelTaskConditionInput): Task
  deleteTask(input: DeleteTaskInput!, condition: ModelTaskConditionInput): Task
}

input ModelSubscriptionTaskFilterInput {
  id: ModelSubscriptionIntInput
  title: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTaskFilterInput]
  or: [ModelSubscriptionTaskFilterInput]
}

type Subscription {
  onCreateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: [\\"createTask\\"])
  onUpdateTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: [\\"updateTask\\"])
  onDeleteTask(filter: ModelSubscriptionTaskFilterInput): Task @aws_subscribe(mutations: [\\"deleteTask\\"])
}
"
`;

exports[`ModelTransformer: should filter known input types from create and update input fields 1`] = `
"type Test {
  id: ID!
  email: Email
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Email {
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTestConnection {
  items: [Test]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelTestFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelTestFilterInput]
  or: [ModelTestFilterInput]
  not: ModelTestFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getTest(id: ID!): Test
  listTests(filter: ModelTestFilterInput, limit: Int, nextToken: String): ModelTestConnection
  syncTests(filter: ModelTestFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelTestConnection
  getEmail(id: ID!): Email
  listEmails(filter: ModelEmailFilterInput, limit: Int, nextToken: String): ModelEmailConnection
  syncEmails(filter: ModelEmailFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelEmailConnection
}

input ModelTestConditionInput {
  and: [ModelTestConditionInput]
  or: [ModelTestConditionInput]
  not: ModelTestConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateTestInput {
  id: ID
  _version: Int
}

input UpdateTestInput {
  id: ID!
  _version: Int
}

input DeleteTestInput {
  id: ID!
  _version: Int
}

type Mutation {
  createTest(input: CreateTestInput!, condition: ModelTestConditionInput): Test
  updateTest(input: UpdateTestInput!, condition: ModelTestConditionInput): Test
  deleteTest(input: DeleteTestInput!, condition: ModelTestConditionInput): Test
  createEmail(input: CreateEmailInput!, condition: ModelEmailConditionInput): Email
  updateEmail(input: UpdateEmailInput!, condition: ModelEmailConditionInput): Email
  deleteEmail(input: DeleteEmailInput!, condition: ModelEmailConditionInput): Email
}

input ModelSubscriptionTestFilterInput {
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionTestFilterInput]
  or: [ModelSubscriptionTestFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateTest(filter: ModelSubscriptionTestFilterInput): Test @aws_subscribe(mutations: [\\"createTest\\"])
  onUpdateTest(filter: ModelSubscriptionTestFilterInput): Test @aws_subscribe(mutations: [\\"updateTest\\"])
  onDeleteTest(filter: ModelSubscriptionTestFilterInput): Test @aws_subscribe(mutations: [\\"deleteTest\\"])
  onCreateEmail(filter: ModelSubscriptionEmailFilterInput): Email @aws_subscribe(mutations: [\\"createEmail\\"])
  onUpdateEmail(filter: ModelSubscriptionEmailFilterInput): Email @aws_subscribe(mutations: [\\"updateEmail\\"])
  onDeleteEmail(filter: ModelSubscriptionEmailFilterInput): Email @aws_subscribe(mutations: [\\"deleteEmail\\"])
}

type ModelEmailConnection {
  items: [Email]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelEmailFilterInput {
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelEmailFilterInput]
  or: [ModelEmailFilterInput]
  not: ModelEmailFilterInput
  _deleted: ModelBooleanInput
}

input ModelEmailConditionInput {
  and: [ModelEmailConditionInput]
  or: [ModelEmailConditionInput]
  not: ModelEmailConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateEmailInput {
  id: ID
  _version: Int
}

input UpdateEmailInput {
  id: ID!
  _version: Int
}

input DeleteEmailInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionEmailFilterInput {
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionEmailFilterInput]
  or: [ModelSubscriptionEmailFilterInput]
  _deleted: ModelBooleanInput
}
"
`;

exports[`ModelTransformer: should generate enum input objects 1`] = `
"type Post {
  id: ID!
  title: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  metadata: PostMetadata
  entityMetadata: EntityMetadata
  appearsIn: [Episode!]
  episode: Episode
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Author {
  id: ID!
  name: String!
  postMetadata: PostMetadata
  entityMetadata: EntityMetadata
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type EntityMetadata {
  isActive: Boolean
}

type PostMetadata {
  tags: Tag
}

type Tag {
  published: Boolean
  metadata: PostMetadata
}

enum Episode {
  NEWHOPE
  EMPIRE
  JEDI
}

type Require {
  id: ID!
  requiredField: String!
  notRequiredField: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Comment {
  id: ID!
  title: String!
  content: String
  updatedOn: Int
  createdOn: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input PostMetadataInput {
  tags: TagInput
}

input TagInput {
  published: Boolean
  metadata: PostMetadataInput
}

input EntityMetadataInput {
  isActive: Boolean
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelEpisodeListInput {
  eq: [Episode]
  ne: [Episode]
  contains: Episode
  notContains: Episode
}

input ModelEpisodeInput {
  eq: Episode
  ne: Episode
}

input ModelPostFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  appearsIn: ModelEpisodeListInput
  episode: ModelEpisodeInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection
  getAuthor(id: ID!): Author
  listAuthors(filter: ModelAuthorFilterInput, limit: Int, nextToken: String): ModelAuthorConnection
  syncAuthors(filter: ModelAuthorFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAuthorConnection
  getRequire(id: ID!): Require
  listRequires(filter: ModelRequireFilterInput, limit: Int, nextToken: String): ModelRequireConnection
  syncRequires(filter: ModelRequireFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelRequireConnection
  getComment(id: ID!): Comment
  listComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String): ModelCommentConnection
  syncComments(filter: ModelCommentFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelCommentConnection
}

input ModelPostConditionInput {
  title: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  appearsIn: ModelEpisodeListInput
  episode: ModelEpisodeInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  _deleted: ModelBooleanInput
}

input CreatePostInput {
  id: ID
  title: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  metadata: PostMetadataInput
  entityMetadata: EntityMetadataInput
  appearsIn: [Episode!]
  episode: Episode
  _version: Int
}

input UpdatePostInput {
  id: ID!
  title: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  metadata: PostMetadataInput
  entityMetadata: EntityMetadataInput
  appearsIn: [Episode!]
  episode: Episode
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
  createAuthor(input: CreateAuthorInput!, condition: ModelAuthorConditionInput): Author
  updateAuthor(input: UpdateAuthorInput!, condition: ModelAuthorConditionInput): Author
  deleteAuthor(input: DeleteAuthorInput!, condition: ModelAuthorConditionInput): Author
  createRequire(input: CreateRequireInput!, condition: ModelRequireConditionInput): Require
  updateRequire(input: UpdateRequireInput!, condition: ModelRequireConditionInput): Require
  deleteRequire(input: DeleteRequireInput!, condition: ModelRequireConditionInput): Require
  createComment(input: CreateCommentInput!, condition: ModelCommentConditionInput): Comment
  updateComment(input: UpdateCommentInput!, condition: ModelCommentConditionInput): Comment
  deleteComment(input: DeleteCommentInput!, condition: ModelCommentConditionInput): Comment
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  appearsIn: ModelSubscriptionStringInput
  episode: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"deletePost\\"])
  onCreateAuthor(filter: ModelSubscriptionAuthorFilterInput): Author @aws_subscribe(mutations: [\\"createAuthor\\"])
  onUpdateAuthor(filter: ModelSubscriptionAuthorFilterInput): Author @aws_subscribe(mutations: [\\"updateAuthor\\"])
  onDeleteAuthor(filter: ModelSubscriptionAuthorFilterInput): Author @aws_subscribe(mutations: [\\"deleteAuthor\\"])
  onCreateRequire(filter: ModelSubscriptionRequireFilterInput): Require @aws_subscribe(mutations: [\\"createRequire\\"])
  onUpdateRequire(filter: ModelSubscriptionRequireFilterInput): Require @aws_subscribe(mutations: [\\"updateRequire\\"])
  onDeleteRequire(filter: ModelSubscriptionRequireFilterInput): Require @aws_subscribe(mutations: [\\"deleteRequire\\"])
  onCreateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: [\\"createComment\\"])
  onUpdateComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: [\\"updateComment\\"])
  onDeleteComment(filter: ModelSubscriptionCommentFilterInput): Comment @aws_subscribe(mutations: [\\"deleteComment\\"])
}

type ModelAuthorConnection {
  items: [Author]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAuthorFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelAuthorFilterInput]
  or: [ModelAuthorFilterInput]
  not: ModelAuthorFilterInput
  _deleted: ModelBooleanInput
}

input ModelAuthorConditionInput {
  name: ModelStringInput
  and: [ModelAuthorConditionInput]
  or: [ModelAuthorConditionInput]
  not: ModelAuthorConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateAuthorInput {
  id: ID
  name: String!
  postMetadata: PostMetadataInput
  entityMetadata: EntityMetadataInput
  _version: Int
}

input UpdateAuthorInput {
  id: ID!
  name: String
  postMetadata: PostMetadataInput
  entityMetadata: EntityMetadataInput
  _version: Int
}

input DeleteAuthorInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAuthorFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionAuthorFilterInput]
  or: [ModelSubscriptionAuthorFilterInput]
  _deleted: ModelBooleanInput
}

type ModelRequireConnection {
  items: [Require]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelRequireFilterInput {
  id: ModelIDInput
  requiredField: ModelStringInput
  notRequiredField: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelRequireFilterInput]
  or: [ModelRequireFilterInput]
  not: ModelRequireFilterInput
  _deleted: ModelBooleanInput
}

input ModelRequireConditionInput {
  requiredField: ModelStringInput
  notRequiredField: ModelStringInput
  and: [ModelRequireConditionInput]
  or: [ModelRequireConditionInput]
  not: ModelRequireConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateRequireInput {
  id: ID
  requiredField: String!
  notRequiredField: String
  _version: Int
}

input UpdateRequireInput {
  id: ID!
  requiredField: String
  notRequiredField: String
  _version: Int
}

input DeleteRequireInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionRequireFilterInput {
  id: ModelSubscriptionIDInput
  requiredField: ModelSubscriptionStringInput
  notRequiredField: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionRequireFilterInput]
  or: [ModelSubscriptionRequireFilterInput]
  _deleted: ModelBooleanInput
}

type ModelCommentConnection {
  items: [Comment]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelCommentFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  content: ModelStringInput
  updatedOn: ModelIntInput
  createdOn: ModelStringInput
  and: [ModelCommentFilterInput]
  or: [ModelCommentFilterInput]
  not: ModelCommentFilterInput
  _deleted: ModelBooleanInput
}

input ModelCommentConditionInput {
  title: ModelStringInput
  content: ModelStringInput
  updatedOn: ModelIntInput
  and: [ModelCommentConditionInput]
  or: [ModelCommentConditionInput]
  not: ModelCommentConditionInput
  _deleted: ModelBooleanInput
  createdOn: ModelStringInput
}

input CreateCommentInput {
  id: ID
  title: String!
  content: String
  updatedOn: Int
  _version: Int
}

input UpdateCommentInput {
  id: ID!
  title: String
  content: String
  updatedOn: Int
  _version: Int
}

input DeleteCommentInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionCommentFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  updatedOn: ModelSubscriptionIntInput
  createdOn: ModelSubscriptionStringInput
  and: [ModelSubscriptionCommentFilterInput]
  or: [ModelSubscriptionCommentFilterInput]
  _deleted: ModelBooleanInput
}
"
`;

exports[`ModelTransformer: should generate sync resolver with ConflictHandlerType.Automerge 1`] = `
Object {
  "Mutation.createPost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPost.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePost.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.qr($DeleteRequest.put(\\"_version\\", $util.defaultIfNull($args.input[\\"_version\\"], 0)))
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePost.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [\\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\", \\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update,
  \\"_version\\": $util.defaultIfNull($args.input[\\"_version\\"], 0)
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.getPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPost.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPost.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.listPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPosts.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.syncPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.syncPosts.req.vtl": "## [Start] Sync Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $queryFilterContainsAuthField = false )
#set( $authFilterContainsSortKey = false )
#set( $useScan = true )
#if( $util.isNullOrEmpty($ctx.stash.authFilter) && $ctx.stash.QueryRequest )
  #set( $useScan = false )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( $ctx.stash.QueryRequestVariables.partitionKey )
    #foreach( $filterItem in $ctx.stash.authFilter.or )
      #if( $filterItem.get($ctx.stash.QueryRequestVariables.partitionKey) )
        #set( $queryFilterContainsAuthField = true )
      #end
    #end
    #if( !$queryFilterContainsAuthField )
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #foreach( $sortKey in $ctx.stash.QueryRequestVariables.sortKeys )
          #if( $filterItem.get($sortKey) )
            #set( $authFilterContainsSortKey = true )
          #end
        #end
      #end
      #if( !$authFilterContainsSortKey )
        #if( !$util.isNullOrEmpty($ctx.stash.QueryRequest.filter) )
          #set( $ctx.stash.QueryRequest.filter = {
  \\"and\\":   [$ctx.stash.QueryRequest.filter, $ctx.stash.authFilter]
} )
        #else
          #set( $ctx.stash.QueryRequest.filter = $ctx.stash.authFilter )
        #end
        #set( $useScan = false )
      #end
    #else
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #if( $util.toJson($filterItem) == $util.toJson($ctx.stash.QueryRequestVariables.partitionKeyFilter) )
          #set( $useScan = false )
        #end
      #end
    #end
  #end
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $filter = $filterExpression )
  #end
#end
#if( !$useScan )
  #if( $ctx.stash.QueryRequest.filter )
    #set( $ctx.stash.QueryRequest.filter = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.QueryRequest.filter)) )
  #end
  $util.toJson($ctx.stash.QueryRequest)
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Sync\\",
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $util.defaultIfNull($args.limit, 100),
      \\"lastSync\\": $util.toJson($util.defaultIfNull($args.lastSync, null)),
      \\"nextToken\\": $util.toJson($util.defaultIfNull($args.nextToken, null))
  }
#end
## [End] Sync Request template. **",
  "Query.syncPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
}
`;

exports[`ModelTransformer: should generate sync resolver with ConflictHandlerType.LAMBDA 1`] = `
Object {
  "Mutation.createPost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPost.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePost.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.qr($DeleteRequest.put(\\"_version\\", $util.defaultIfNull($args.input[\\"_version\\"], 0)))
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePost.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [\\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\", \\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update,
  \\"_version\\": $util.defaultIfNull($args.input[\\"_version\\"], 0)
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.getPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPost.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPost.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.listPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPosts.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.syncPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.syncPosts.req.vtl": "## [Start] Sync Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $queryFilterContainsAuthField = false )
#set( $authFilterContainsSortKey = false )
#set( $useScan = true )
#if( $util.isNullOrEmpty($ctx.stash.authFilter) && $ctx.stash.QueryRequest )
  #set( $useScan = false )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( $ctx.stash.QueryRequestVariables.partitionKey )
    #foreach( $filterItem in $ctx.stash.authFilter.or )
      #if( $filterItem.get($ctx.stash.QueryRequestVariables.partitionKey) )
        #set( $queryFilterContainsAuthField = true )
      #end
    #end
    #if( !$queryFilterContainsAuthField )
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #foreach( $sortKey in $ctx.stash.QueryRequestVariables.sortKeys )
          #if( $filterItem.get($sortKey) )
            #set( $authFilterContainsSortKey = true )
          #end
        #end
      #end
      #if( !$authFilterContainsSortKey )
        #if( !$util.isNullOrEmpty($ctx.stash.QueryRequest.filter) )
          #set( $ctx.stash.QueryRequest.filter = {
  \\"and\\":   [$ctx.stash.QueryRequest.filter, $ctx.stash.authFilter]
} )
        #else
          #set( $ctx.stash.QueryRequest.filter = $ctx.stash.authFilter )
        #end
        #set( $useScan = false )
      #end
    #else
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #if( $util.toJson($filterItem) == $util.toJson($ctx.stash.QueryRequestVariables.partitionKeyFilter) )
          #set( $useScan = false )
        #end
      #end
    #end
  #end
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $filter = $filterExpression )
  #end
#end
#if( !$useScan )
  #if( $ctx.stash.QueryRequest.filter )
    #set( $ctx.stash.QueryRequest.filter = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.QueryRequest.filter)) )
  #end
  $util.toJson($ctx.stash.QueryRequest)
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Sync\\",
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $util.defaultIfNull($args.limit, 100),
      \\"lastSync\\": $util.toJson($util.defaultIfNull($args.lastSync, null)),
      \\"nextToken\\": $util.toJson($util.defaultIfNull($args.nextToken, null))
  }
#end
## [End] Sync Request template. **",
  "Query.syncPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
}
`;

exports[`ModelTransformer: should generate sync resolver with ConflictHandlerType.Optimistic 1`] = `
Object {
  "Mutation.createPost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.qr($ctx.stash.defaultValues.put(\\"createdAt\\", $createdAt))
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $createdAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createPost.req.vtl": "## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **",
  "Mutation.createPost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deletePost.req.vtl": "## [Start] Delete Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $DeleteRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"DeleteItem\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
$util.qr($DeleteRequest.put(\\"key\\", $Key))
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($DeleteRequest.put(\\"condition\\", $Conditions))
#end
$util.qr($DeleteRequest.put(\\"_version\\", $util.defaultIfNull($args.input[\\"_version\\"], 0)))
$util.toJson($DeleteRequest)
## [End] Delete Request template. **",
  "Mutation.deletePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updatePost.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $updatedAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"updatedAt\\", $updatedAt))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updatePost.req.vtl": "## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [\\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\", \\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update,
  \\"_version\\": $util.defaultIfNull($args.input[\\"_version\\"], 0)
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **",
  "Mutation.updatePost.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.getPost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getPost.req.vtl": "## [Start] Get Request template. **
#set( $GetRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Query\\"
} )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $expression = \\"\\" )
  #set( $expressionNames = {} )
  #set( $expressionValues = {} )
  #foreach( $item in $ctx.stash.metadata.modelObjectKey.entrySet() )
    #set( $expression = \\"$expression#keyCount$velocityCount = :valueCount$velocityCount AND \\" )
    $util.qr($expressionNames.put(\\"#keyCount$velocityCount\\", $item.key))
    $util.qr($expressionValues.put(\\":valueCount$velocityCount\\", $item.value))
  #end
  #set( $expression = $expression.replaceAll(\\"AND $\\", \\"\\") )
  #set( $query = {
  \\"expression\\": $expression,
  \\"expressionNames\\": $expressionNames,
  \\"expressionValues\\": $expressionValues
} )
#else
  #set( $query = {
  \\"expression\\": \\"id = :id\\",
  \\"expressionValues\\": {
      \\":id\\":     $util.parseJson($util.dynamodb.toDynamoDBJson($ctx.args.id))
  }
} )
#end
$util.qr($GetRequest.put(\\"query\\", $query))
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  $util.qr($GetRequest.put(\\"filter\\", $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.authFilter))))
#end
$util.toJson($GetRequest)
## [End] Get Request template. **",
  "Query.getPost.res.vtl": "## [Start] Get Response template. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#end
#if( !$ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
  $util.toJson($ctx.result.items[0])
#else
  #if( $ctx.result.items.isEmpty() && $ctx.result.scannedCount == 1 )
$util.unauthorized()
  #end
  $util.toJson(null)
#end
## [End] Get Response template. **",
  "Query.listPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listPosts.req.vtl": "## [Start] List Request. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $limit = $util.defaultIfNull($args.limit, 100) )
#set( $ListRequest = {
  \\"version\\": \\"2018-05-29\\",
  \\"limit\\": $limit
} )
#if( $args.nextToken )
  #set( $ListRequest.nextToken = $args.nextToken )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( $util.isNullOrEmpty($filterExpression) )
    $util.error(\\"Unable to process the filter expression\\", \\"Unrecognized Filter\\")
  #end
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $ListRequest.filter = $filterExpression )
  #end
#end
#if( !$util.isNull($ctx.stash.modelQueryExpression) && !$util.isNullOrEmpty($ctx.stash.modelQueryExpression.expression) )
  $util.qr($ListRequest.put(\\"operation\\", \\"Query\\"))
  $util.qr($ListRequest.put(\\"query\\", $ctx.stash.modelQueryExpression))
  #if( !$util.isNull($args.sortDirection) && $args.sortDirection == \\"DESC\\" )
    #set( $ListRequest.scanIndexForward = false )
  #else
    #set( $ListRequest.scanIndexForward = true )
  #end
#else
  $util.qr($ListRequest.put(\\"operation\\", \\"Scan\\"))
#end
#if( !$util.isNull($ctx.stash.metadata.index) )
  #set( $ListRequest.IndexName = $ctx.stash.metadata.index )
#end
$util.toJson($ListRequest)
## [End] List Request. **",
  "Query.listPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.syncPosts.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.syncPosts.req.vtl": "## [Start] Sync Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $queryFilterContainsAuthField = false )
#set( $authFilterContainsSortKey = false )
#set( $useScan = true )
#if( $util.isNullOrEmpty($ctx.stash.authFilter) && $ctx.stash.QueryRequest )
  #set( $useScan = false )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( $ctx.stash.QueryRequestVariables.partitionKey )
    #foreach( $filterItem in $ctx.stash.authFilter.or )
      #if( $filterItem.get($ctx.stash.QueryRequestVariables.partitionKey) )
        #set( $queryFilterContainsAuthField = true )
      #end
    #end
    #if( !$queryFilterContainsAuthField )
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #foreach( $sortKey in $ctx.stash.QueryRequestVariables.sortKeys )
          #if( $filterItem.get($sortKey) )
            #set( $authFilterContainsSortKey = true )
          #end
        #end
      #end
      #if( !$authFilterContainsSortKey )
        #if( !$util.isNullOrEmpty($ctx.stash.QueryRequest.filter) )
          #set( $ctx.stash.QueryRequest.filter = {
  \\"and\\":   [$ctx.stash.QueryRequest.filter, $ctx.stash.authFilter]
} )
        #else
          #set( $ctx.stash.QueryRequest.filter = $ctx.stash.authFilter )
        #end
        #set( $useScan = false )
      #end
    #else
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #if( $util.toJson($filterItem) == $util.toJson($ctx.stash.QueryRequestVariables.partitionKeyFilter) )
          #set( $useScan = false )
        #end
      #end
    #end
  #end
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $filter = $filterExpression )
  #end
#end
#if( !$useScan )
  #if( $ctx.stash.QueryRequest.filter )
    #set( $ctx.stash.QueryRequest.filter = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.QueryRequest.filter)) )
  #end
  $util.toJson($ctx.stash.QueryRequest)
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Sync\\",
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $util.defaultIfNull($args.limit, 100),
      \\"lastSync\\": $util.toJson($util.defaultIfNull($args.lastSync, null)),
      \\"nextToken\\": $util.toJson($util.defaultIfNull($args.nextToken, null))
  }
#end
## [End] Sync Request template. **",
  "Query.syncPosts.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeletePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeletePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeletePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdatePost.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdatePost.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdatePost.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
}
`;

exports[`ModelTransformer: should have timestamps as nullable fields when the type makes it non-nullable 1`] = `
"type Post {
  id: ID!
  str: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostFilterInput {
  id: ModelIDInput
  str: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection
}

input ModelPostConditionInput {
  str: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  _deleted: ModelBooleanInput
}

input CreatePostInput {
  id: ID
  str: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
}

input UpdatePostInput {
  id: ID!
  str: String
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  str: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"deletePost\\"])
}
"
`;

exports[`ModelTransformer: should have timestamps as nullable fields when the type makes it non-nullable 2`] = `
"## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **"
`;

exports[`ModelTransformer: should have timestamps as nullable fields when the type makes it non-nullable 3`] = `
"## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [\\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\", \\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update,
  \\"_version\\": $util.defaultIfNull($args.input[\\"_version\\"], 0)
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **"
`;

exports[`ModelTransformer: should not add default primary key when ID is defined 1`] = `
"## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **"
`;

exports[`ModelTransformer: should not generate superfluous input and filter types 1`] = `
"type Entity {
  id: ID!
  str: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type Query {
  getEntity(id: ID!): Entity
}
"
`;

exports[`ModelTransformer: should not to auto generate createdAt and updatedAt when the type in schema is not AWSDateTime 1`] = `
"type Post {
  id: ID!
  str: String
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostFilterInput {
  id: ModelIDInput
  str: ModelStringInput
  createdAt: ModelIntInput
  updatedAt: ModelIntInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection
}

input ModelPostConditionInput {
  str: ModelStringInput
  createdAt: ModelIntInput
  updatedAt: ModelIntInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  _deleted: ModelBooleanInput
}

input CreatePostInput {
  id: ID
  str: String
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
  _version: Int
}

input UpdatePostInput {
  id: ID!
  str: String
  createdAt: AWSTimestamp
  updatedAt: AWSTimestamp
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  str: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionIntInput
  updatedAt: ModelSubscriptionIntInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"deletePost\\"])
}
"
`;

exports[`ModelTransformer: should not to auto generate createdAt and updatedAt when the type in schema is not AWSDateTime 2`] = `
"## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **"
`;

exports[`ModelTransformer: should not to auto generate createdAt and updatedAt when the type in schema is not AWSDateTime 3`] = `
"## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [\\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\", \\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update,
  \\"_version\\": $util.defaultIfNull($args.input[\\"_version\\"], 0)
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **"
`;

exports[`ModelTransformer: should not to include createdAt and updatedAt field when timestamps is set to null 1`] = `
"type Post {
  id: ID!
  str: String
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostFilterInput {
  id: ModelIDInput
  str: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection
}

input ModelPostConditionInput {
  str: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePostInput {
  id: ID
  str: String
  _version: Int
}

input UpdatePostInput {
  id: ID!
  str: String
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  str: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"deletePost\\"])
}
"
`;

exports[`ModelTransformer: should not to include createdAt and updatedAt field when timestamps is set to null 2`] = `
"## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **"
`;

exports[`ModelTransformer: should not to include createdAt and updatedAt field when timestamps is set to null 3`] = `
"## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [\\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\", \\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update,
  \\"_version\\": $util.defaultIfNull($args.input[\\"_version\\"], 0)
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **"
`;

exports[`ModelTransformer: should successfully transform rds schema with array and object fields 1`] = `
"type Note {
  id: ID!
  content: String!
  tags: [String!]
  attachments: Attachment
}

type Attachment {
  report: String!
  image: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input AttachmentInput {
  report: String!
  image: String!
}

type ModelNoteConnection {
  items: [Note]!
  nextToken: String
}

input ModelNoteFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  tags: ModelStringInput
  and: [ModelNoteFilterInput]
  or: [ModelNoteFilterInput]
  not: ModelNoteFilterInput
}

type Query {
  getNote(id: ID!): Note
  listNotes(id: ID, filter: ModelNoteFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelNoteConnection
}

input ModelNoteConditionInput {
  content: ModelStringInput
  tags: ModelStringInput
  and: [ModelNoteConditionInput]
  or: [ModelNoteConditionInput]
  not: ModelNoteConditionInput
}

input CreateNoteInput {
  id: ID
  content: String!
  tags: [String!]
  attachments: AttachmentInput
}

input UpdateNoteInput {
  id: ID!
  content: String
  tags: [String!]
  attachments: AttachmentInput
}

input DeleteNoteInput {
  id: ID!
}

type Mutation {
  createNote(input: CreateNoteInput!, condition: ModelNoteConditionInput): Note
  updateNote(input: UpdateNoteInput!, condition: ModelNoteConditionInput): Note
  deleteNote(input: DeleteNoteInput!, condition: ModelNoteConditionInput): Note
}

input ModelSubscriptionNoteFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  and: [ModelSubscriptionNoteFilterInput]
  or: [ModelSubscriptionNoteFilterInput]
}

type Subscription {
  onCreateNote(filter: ModelSubscriptionNoteFilterInput): Note @aws_subscribe(mutations: [\\"createNote\\"])
  onUpdateNote(filter: ModelSubscriptionNoteFilterInput): Note @aws_subscribe(mutations: [\\"updateNote\\"])
  onDeleteNote(filter: ModelSubscriptionNoteFilterInput): Note @aws_subscribe(mutations: [\\"deleteNote\\"])
}
"
`;

exports[`ModelTransformer: should successfully transform rds schema with array and object fields 2`] = `
Object {
  "Mutation.createNote.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Mutation.createNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"CREATE\\" )
#set( $lambdaInput.operationName = \\"createNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Mutation.createNote.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Mutation.deleteNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.args = $context.arguments )
#set( $lambdaInput.operation = \\"DELETE\\" )
#set( $lambdaInput.operationName = \\"deleteNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Mutation.deleteNote.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateNote.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Mutation.updateNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"UPDATE\\" )
#set( $lambdaInput.operationName = \\"updateNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Mutation.updateNote.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.getNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Query.getNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"getNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Query.getNote.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listNotes.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listNotes.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
## [Start] Validate the sort direction input. **
#if( !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"sortDirection is not supported for List operations without a Sort key defined.\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate the sort direction input. **
{}",
  "Query.listNotes.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"listNotes\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Query.listNotes.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreateNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateNote.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateNote.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteNote.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteNote.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateNote.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateNote.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
}
`;

exports[`ModelTransformer: should successfully transform rds schema with array and object fields 3`] = `
"type Note {
  id: ID!
  content: String!
  tags: [String!]
  attachments: Attachment
}

type Attachment {
  report: String!
  image: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input AttachmentInput {
  report: String!
  image: String!
}

type ModelNoteConnection {
  items: [Note]!
  nextToken: String
}

input ModelNoteFilterInput {
  id: ModelIDInput
  content: ModelStringInput
  tags: ModelStringInput
  and: [ModelNoteFilterInput]
  or: [ModelNoteFilterInput]
  not: ModelNoteFilterInput
}

type Query {
  getNote(id: ID!): Note
  listNotes(id: ID, filter: ModelNoteFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelNoteConnection
}

input ModelNoteConditionInput {
  content: ModelStringInput
  tags: ModelStringInput
  and: [ModelNoteConditionInput]
  or: [ModelNoteConditionInput]
  not: ModelNoteConditionInput
}

input CreateNoteInput {
  id: ID
  content: String!
  tags: [String!]
  attachments: AttachmentInput
}

input UpdateNoteInput {
  id: ID!
  content: String
  tags: [String!]
  attachments: AttachmentInput
}

input DeleteNoteInput {
  id: ID!
}

type Mutation {
  createNote(input: CreateNoteInput!, condition: ModelNoteConditionInput): Note
  updateNote(input: UpdateNoteInput!, condition: ModelNoteConditionInput): Note
  deleteNote(input: DeleteNoteInput!, condition: ModelNoteConditionInput): Note
}

input ModelSubscriptionNoteFilterInput {
  id: ModelSubscriptionIDInput
  content: ModelSubscriptionStringInput
  tags: ModelSubscriptionStringInput
  and: [ModelSubscriptionNoteFilterInput]
  or: [ModelSubscriptionNoteFilterInput]
}

type Subscription {
  onCreateNote(filter: ModelSubscriptionNoteFilterInput): Note @aws_subscribe(mutations: [\\"createNote\\"])
  onUpdateNote(filter: ModelSubscriptionNoteFilterInput): Note @aws_subscribe(mutations: [\\"updateNote\\"])
  onDeleteNote(filter: ModelSubscriptionNoteFilterInput): Note @aws_subscribe(mutations: [\\"deleteNote\\"])
}
"
`;

exports[`ModelTransformer: should successfully transform rds schema with array and object fields 4`] = `
Object {
  "Mutation.createNote.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
#set( $createdAt = $util.time.nowISO8601() )
$util.qr($ctx.stash.defaultValues.put(\\"id\\", $util.autoId()))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.createNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.createNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Mutation.createNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"CREATE\\" )
#set( $lambdaInput.operationName = \\"createNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Mutation.createNote.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.deleteNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.deleteNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Mutation.deleteNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.args = $context.arguments )
#set( $lambdaInput.operation = \\"DELETE\\" )
#set( $lambdaInput.operationName = \\"deleteNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Mutation.deleteNote.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Mutation.updateNote.init.1.req.vtl": "## [Start] Initialization default values. **
$util.qr($ctx.stash.put(\\"defaultValues\\", $util.defaultIfNull($ctx.stash.defaultValues, {})))
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Initialization default values. **",
  "Mutation.updateNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Mutation.updateNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Mutation.updateNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"UPDATE\\" )
#set( $lambdaInput.operationName = \\"updateNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Mutation.updateNote.res.vtl": "## [Start] ResponseTemplate. **
$util.qr($ctx.result.put(\\"__operation\\", \\"Mutation\\"))
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.getNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.getNote.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
{}",
  "Query.getNote.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"getNote\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Query.getNote.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Query.listNotes.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Query.listNotes.preAuth.1.req.vtl": "## [Start] Set the primary key information in metadata. **
#set( $keys = [] )
$util.qr($keys.add(\\"id\\"))
$util.qr($ctx.stash.put(\\"keys\\", $keys))
## [End] Set the primary key information in metadata. **
## [Start] Validate the sort direction input. **
#if( !$util.isNull($ctx.args.sortDirection) )
  $util.error(\\"sortDirection is not supported for List operations without a Sort key defined.\\", \\"InvalidArgumentsError\\")
#end
## [End] Validate the sort direction input. **
{}",
  "Query.listNotes.req.vtl": "## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Note\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"listNotes\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"tags\\", \\"attachments\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"tags\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **",
  "Query.listNotes.res.vtl": "## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **",
  "Subscription.onCreateNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onCreateNote.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onCreateNote.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onDeleteNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onDeleteNote.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onDeleteNote.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
  "Subscription.onUpdateNote.postAuth.1.req.vtl": "## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **",
  "Subscription.onUpdateNote.req.vtl": "## [Start] Subscription Request template. **
$util.toJson({
  \\"version\\": \\"2018-05-29\\",
  \\"payload\\": {}
})
## [End] Subscription Request template. **",
  "Subscription.onUpdateNote.res.vtl": "## [Start] Subscription Response template. **
#if( !$util.isNullOrEmpty($ctx.args.filter) )
$extensions.setSubscriptionFilter($util.transform.toSubscriptionFilter($ctx.args.filter))
#end
$util.toJson(null)
## [End] Subscription Response template. **",
}
`;

exports[`ModelTransformer: should successfully transform simple Embeddable type (non-model) schema 1`] = `
"type NonModelType {
  id: ID!
  title: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}
"
`;

exports[`ModelTransformer: should successfully transform simple non-capitalized Model/Embeddable type (non-model) name schema 1`] = `
"type modelType {
  id: ID!
  title: String!
  nonModelTypeValue: nonModelType
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type nonModelType {
  id: ID!
  title: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

input NonModelTypeInput {
  id: ID!
  title: String!
}

type ModelModelTypeConnection {
  items: [modelType]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelModelTypeFilterInput {
  id: ModelIDInput
  title: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelModelTypeFilterInput]
  or: [ModelModelTypeFilterInput]
  not: ModelModelTypeFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getModelType(id: ID!): modelType
  listModelTypes(filter: ModelModelTypeFilterInput, limit: Int, nextToken: String): ModelModelTypeConnection
  syncModelTypes(filter: ModelModelTypeFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelModelTypeConnection
}

input ModelModelTypeConditionInput {
  title: ModelStringInput
  and: [ModelModelTypeConditionInput]
  or: [ModelModelTypeConditionInput]
  not: ModelModelTypeConditionInput
  _deleted: ModelBooleanInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateModelTypeInput {
  id: ID
  title: String!
  nonModelTypeValue: NonModelTypeInput
  _version: Int
}

input UpdateModelTypeInput {
  id: ID!
  title: String
  nonModelTypeValue: NonModelTypeInput
  _version: Int
}

input DeleteModelTypeInput {
  id: ID!
  _version: Int
}

type Mutation {
  createModelType(input: CreateModelTypeInput!, condition: ModelModelTypeConditionInput): modelType
  updateModelType(input: UpdateModelTypeInput!, condition: ModelModelTypeConditionInput): modelType
  deleteModelType(input: DeleteModelTypeInput!, condition: ModelModelTypeConditionInput): modelType
}

input ModelSubscriptionModelTypeFilterInput {
  id: ModelSubscriptionIDInput
  title: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionModelTypeFilterInput]
  or: [ModelSubscriptionModelTypeFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateModelType(filter: ModelSubscriptionModelTypeFilterInput): modelType @aws_subscribe(mutations: [\\"createModelType\\"])
  onUpdateModelType(filter: ModelSubscriptionModelTypeFilterInput): modelType @aws_subscribe(mutations: [\\"updateModelType\\"])
  onDeleteModelType(filter: ModelSubscriptionModelTypeFilterInput): modelType @aws_subscribe(mutations: [\\"deleteModelType\\"])
}
"
`;

exports[`ModelTransformer: should support timestamp parameters when generating resolvers and output schema 1`] = `
"type Post {
  id: ID!
  str: String
  createdOn: AWSDateTime!
  updatedOn: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPostFilterInput {
  id: ModelIDInput
  str: ModelStringInput
  createdOn: ModelStringInput
  updatedOn: ModelStringInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  syncPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPostConnection
}

input ModelPostConditionInput {
  str: ModelStringInput
  and: [ModelPostConditionInput]
  or: [ModelPostConditionInput]
  not: ModelPostConditionInput
  _deleted: ModelBooleanInput
  createdOn: ModelStringInput
  updatedOn: ModelStringInput
}

input CreatePostInput {
  id: ID
  str: String
  _version: Int
}

input UpdatePostInput {
  id: ID!
  str: String
  _version: Int
}

input DeletePostInput {
  id: ID!
  _version: Int
}

type Mutation {
  createPost(input: CreatePostInput!, condition: ModelPostConditionInput): Post
  updatePost(input: UpdatePostInput!, condition: ModelPostConditionInput): Post
  deletePost(input: DeletePostInput!, condition: ModelPostConditionInput): Post
}

input ModelSubscriptionPostFilterInput {
  id: ModelSubscriptionIDInput
  str: ModelSubscriptionStringInput
  createdOn: ModelSubscriptionStringInput
  updatedOn: ModelSubscriptionStringInput
  and: [ModelSubscriptionPostFilterInput]
  or: [ModelSubscriptionPostFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"createPost\\"])
  onUpdatePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"updatePost\\"])
  onDeletePost(filter: ModelSubscriptionPostFilterInput): Post @aws_subscribe(mutations: [\\"deletePost\\"])
}
"
`;

exports[`ModelTransformer: should support timestamp parameters when generating resolvers and output schema 2`] = `
"## [Start] Create Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
$util.qr($mergedValues.put(\\"__typename\\", \\"Post\\"))
#set( $PutObject = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"PutItem\\",
  \\"attributeValues\\":   $util.dynamodb.toMapValues($mergedValues),
  \\"condition\\": $condition
} )
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": false
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": false
  }
}))
#end
## End - key condition **
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($PutObject.put(\\"condition\\", $Conditions))
#end
#if( $ctx.stash.metadata.modelObjectKey )
  $util.qr($PutObject.put(\\"key\\", $ctx.stash.metadata.modelObjectKey))
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($mergedValues.id)
} )
  $util.qr($PutObject.put(\\"key\\", $Key))
#end
$util.toJson($PutObject)
## [End] Create Request template. **"
`;

exports[`ModelTransformer: should support timestamp parameters when generating resolvers and output schema 3`] = `
"## [Start] Mutation Update resolver. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
## Set the default values to put request **
#set( $mergedValues = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($mergedValues.putAll($util.defaultIfNull($args.input, {})))
## set the typename **
## Initialize the vars for creating ddb expression **
#set( $expNames = {} )
#set( $expValues = {} )
#set( $expSet = {} )
#set( $expAdd = {} )
#set( $expRemove = [] )
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $Key = $ctx.stash.metadata.modelObjectKey )
#else
  #set( $Key = {
  \\"id\\":   $util.dynamodb.toDynamoDB($args.input.id)
} )
#end
## Model key **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyFields = [\\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyFields.add(\\"$entry.key\\"))
  #end
#else
  #set( $keyFields = [\\"id\\", \\"_version\\", \\"_deleted\\", \\"_lastChangedAt\\"] )
#end
#foreach( $entry in $util.map.copyAndRemoveAllKeys($mergedValues, $keyFields).entrySet() )
  #if( !$util.isNull($ctx.stash.metadata.dynamodbNameOverrideMap) && $ctx.stash.metadata.dynamodbNameOverrideMap.containsKey(\\"$entry.key\\") )
    #set( $entryKeyAttributeName = $ctx.stash.metadata.dynamodbNameOverrideMap.get(\\"$entry.key\\") )
  #else
    #set( $entryKeyAttributeName = $entry.key )
  #end
  #if( $util.isNull($entry.value) )
    #set( $discard = $expRemove.add(\\"#$entryKeyAttributeName\\") )
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
  #else
    $util.qr($expSet.put(\\"#$entryKeyAttributeName\\", \\":$entryKeyAttributeName\\"))
    $util.qr($expNames.put(\\"#$entryKeyAttributeName\\", \\"$entry.key\\"))
    $util.qr($expValues.put(\\":$entryKeyAttributeName\\", $util.dynamodb.toDynamoDB($entry.value)))
  #end
#end
#set( $expression = \\"\\" )
#if( !$expSet.isEmpty() )
  #set( $expression = \\"SET\\" )
  #foreach( $entry in $expSet.entrySet() )
    #set( $expression = \\"$expression $entry.key = $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expAdd.isEmpty() )
  #set( $expression = \\"$expression ADD\\" )
  #foreach( $entry in $expAdd.entrySet() )
    #set( $expression = \\"$expression $entry.key $entry.value\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#if( !$expRemove.isEmpty() )
  #set( $expression = \\"$expression REMOVE\\" )
  #foreach( $entry in $expRemove )
    #set( $expression = \\"$expression $entry\\" )
    #if( $foreach.hasNext() )
      #set( $expression = \\"$expression,\\" )
    #end
  #end
#end
#set( $update = {} )
$util.qr($update.put(\\"expression\\", \\"$expression\\"))
#if( !$expNames.isEmpty() )
  $util.qr($update.put(\\"expressionNames\\", $expNames))
#end
#if( !$expValues.isEmpty() )
  $util.qr($update.put(\\"expressionValues\\", $expValues))
#end
## Begin - key condition **
#if( $ctx.stash.metadata.modelObjectKey )
  #set( $keyConditionExpr = {} )
  #set( $keyConditionExprNames = {} )
  #foreach( $entry in $ctx.stash.metadata.modelObjectKey.entrySet() )
    $util.qr($keyConditionExpr.put(\\"keyCondition$velocityCount\\", {
  \\"attributeExists\\": true
}))
    $util.qr($keyConditionExprNames.put(\\"#keyCondition$velocityCount\\", \\"$entry.key\\"))
  #end
  $util.qr($ctx.stash.conditions.add($keyConditionExpr))
#else
  $util.qr($ctx.stash.conditions.add({
  \\"id\\": {
      \\"attributeExists\\": true
  }
}))
#end
## End - key condition **
#if( $args.condition )
  $util.qr($ctx.stash.conditions.add($args.condition))
#end
## Start condition block **
#if( $ctx.stash.conditions && $ctx.stash.conditions.size() != 0 )
  #set( $mergedConditions = {
  \\"and\\": $ctx.stash.conditions
} )
  #set( $Conditions = $util.parseJson($util.transform.toDynamoDBConditionExpression($mergedConditions)) )
  #if( $Conditions.expressionValues && $Conditions.expressionValues.size() == 0 )
    #set( $Conditions = {
  \\"expression\\": $Conditions.expression,
  \\"expressionNames\\": $Conditions.expressionNames
} )
  #end
  ## End condition block **
#end
#set( $UpdateItem = {
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"UpdateItem\\",
  \\"key\\": $Key,
  \\"update\\": $update,
  \\"_version\\": $util.defaultIfNull($args.input[\\"_version\\"], 0)
} )
#if( $Conditions )
  #if( $keyConditionExprNames )
    $util.qr($Conditions.expressionNames.putAll($keyConditionExprNames))
  #end
  $util.qr($UpdateItem.put(\\"condition\\", $Conditions))
#end
$util.toJson($UpdateItem)
## [End] Mutation Update resolver. **"
`;

exports[`ModelTransformer: the datastore table should be configured 1`] = `
"## [Start] Sync Request template. **
#set( $args = $util.defaultIfNull($ctx.stash.transformedArgs, $ctx.args) )
#set( $queryFilterContainsAuthField = false )
#set( $authFilterContainsSortKey = false )
#set( $useScan = true )
#if( $util.isNullOrEmpty($ctx.stash.authFilter) && $ctx.stash.QueryRequest )
  #set( $useScan = false )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $filter = $ctx.stash.authFilter )
  #if( $ctx.stash.QueryRequestVariables.partitionKey )
    #foreach( $filterItem in $ctx.stash.authFilter.or )
      #if( $filterItem.get($ctx.stash.QueryRequestVariables.partitionKey) )
        #set( $queryFilterContainsAuthField = true )
      #end
    #end
    #if( !$queryFilterContainsAuthField )
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #foreach( $sortKey in $ctx.stash.QueryRequestVariables.sortKeys )
          #if( $filterItem.get($sortKey) )
            #set( $authFilterContainsSortKey = true )
          #end
        #end
      #end
      #if( !$authFilterContainsSortKey )
        #if( !$util.isNullOrEmpty($ctx.stash.QueryRequest.filter) )
          #set( $ctx.stash.QueryRequest.filter = {
  \\"and\\":   [$ctx.stash.QueryRequest.filter, $ctx.stash.authFilter]
} )
        #else
          #set( $ctx.stash.QueryRequest.filter = $ctx.stash.authFilter )
        #end
        #set( $useScan = false )
      #end
    #else
      #foreach( $filterItem in $ctx.stash.authFilter.or )
        #if( $util.toJson($filterItem) == $util.toJson($ctx.stash.QueryRequestVariables.partitionKeyFilter) )
          #set( $useScan = false )
        #end
      #end
    #end
  #end
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = {
  \\"and\\":   [$filter, $args.filter]
} )
  #end
#else
  #if( !$util.isNullOrEmpty($args.filter) )
    #set( $filter = $args.filter )
  #end
#end
#if( !$util.isNullOrEmpty($filter) )
  #set( $filterExpression = $util.parseJson($util.transform.toDynamoDBFilterExpression($filter)) )
  #if( !$util.isNullOrBlank($filterExpression.expression) )
    #if( $filterExpression.expressionValues.size() == 0 )
      $util.qr($filterExpression.remove(\\"expressionValues\\"))
    #end
    #set( $filter = $filterExpression )
  #end
#end
#if( !$useScan )
  #if( $ctx.stash.QueryRequest.filter )
    #set( $ctx.stash.QueryRequest.filter = $util.parseJson($util.transform.toDynamoDBFilterExpression($ctx.stash.QueryRequest.filter)) )
  #end
  $util.toJson($ctx.stash.QueryRequest)
#else
{
      \\"version\\": \\"2018-05-29\\",
      \\"operation\\": \\"Sync\\",
      \\"filter\\":     #if( $filter )
$util.toJson($filter)
    #else
null
    #end,
      \\"limit\\": $util.defaultIfNull($args.limit, 100),
      \\"lastSync\\": $util.toJson($util.defaultIfNull($args.lastSync, null)),
      \\"nextToken\\": $util.toJson($util.defaultIfNull($args.nextToken, null))
  }
#end
## [End] Sync Request template. **"
`;

exports[`ModelTransformer: the datastore table should be configured 2`] = `
"## [Start] ResponseTemplate. **
#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type, $ctx.result)
#else
  $util.toJson($ctx.result)
#end
## [End] ResponseTemplate. **"
`;
