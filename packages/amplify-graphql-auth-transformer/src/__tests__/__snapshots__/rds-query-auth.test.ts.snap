// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 2`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 3`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 4`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 5`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 6`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform IdentityPool auth rules 8`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform apiKey auth rule 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"apiKey\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform apiKey auth rule 2`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform apiKey auth rule 3`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"apiKey\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform apiKey auth rule 4`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"userPools\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 2`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 3`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"userPools\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 4`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 5`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 6`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 8`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 9`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 10`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 11`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 12`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 13`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 14`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 15`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 16`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 17`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 18`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 19`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 20`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 21`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 22`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 23`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform cognito auth rules 24`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform function auth rule 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"custom\\",
  \\"provider\\": \\"function\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform function auth rule 2`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform function auth rule 3`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"custom\\",
  \\"provider\\": \\"function\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform function auth rule 4`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 2`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 3`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 4`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 5`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 6`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform iam auth rules 8`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"oidc\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 2`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 3`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"oidc\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 4`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 5`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"identityClaim\\": \\"sub::username\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 6`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"identityClaim\\": \\"sub::username\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 8`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 9`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"identityClaim\\": \\"sub::username\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 10`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 11`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"identityClaim\\": \\"sub::username\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 12`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 13`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 14`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 15`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 16`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 17`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 18`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 19`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 20`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 21`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 22`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 23`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\"
}))
#set( $authResult = $util.authRules.queryAuth($authRules) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authFilter) )
  #set( $ctx.stash.authFilter = $authResult.authFilter )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on queries: should successfully transform oidc auth rules 24`] = `
"## [Start] Sandbox Mode Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled. **"
`;
