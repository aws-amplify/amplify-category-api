// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 2`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 3`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 4`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 5`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 6`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 8`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 9`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 10`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 11`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPublic\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 12`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 13`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 14`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPublic\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 15`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform IdentityPool auth rules 16`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"apiKey\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 2`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 3`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Post\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 4`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"apiKey\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 5`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 6`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Post\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"apiKey\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform apiKey auth rule 8`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 2`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 3`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 4`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 5`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 6`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 8`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 9`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 10`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 11`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleOwner\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 12`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 13`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 14`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleOwner\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 15`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 16`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 17`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"owners\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 18`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 19`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostOwners\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 20`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"owners\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 21`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 22`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostOwners\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 23`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"userPools\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"owners\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 24`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 25`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 26`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 27`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostStaticGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 28`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 29`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 30`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostStaticGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 31`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 32`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 33`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"group\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 34`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 35`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleGroup\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 36`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"group\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 37`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 38`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleGroup\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 39`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"group\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 40`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 41`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"groups\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 42`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 43`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 44`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"groups\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 45`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 46`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 47`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"userPools\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"groups\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform cognito auth rules 48`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"custom\\",
  \\"provider\\": \\"function\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 2`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 3`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Post\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 4`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"custom\\",
  \\"provider\\": \\"function\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 5`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 6`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Post\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"custom\\",
  \\"provider\\": \\"function\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform function auth rule 8`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 2`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 3`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 4`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 5`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 6`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.authRole,
  \\"cognitoIdentityPoolId\\": $ctx.stash.identityPoolId,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 8`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 9`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 10`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 11`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPublic\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 12`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 13`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 14`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPublic\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 15`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"public\\",
  \\"provider\\": \\"iam\\",
  \\"roleArn\\": $ctx.stash.unauthRole,
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform iam auth rules 16`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 1`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 2`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 3`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 4`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 5`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 6`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostPrivate\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 7`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"private\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 8`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 9`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"identityClaim\\": \\"sub::username\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 10`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 11`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleOwner\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 12`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"identityClaim\\": \\"sub::username\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 13`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 14`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleOwner\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 15`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owner\\",
  \\"ownerFieldType\\": \\"string\\",
  \\"identityClaim\\": \\"sub::username\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 16`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 17`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"identityClaim\\": \\"sub::username\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"owners\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 18`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 19`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostOwners\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 20`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"identityClaim\\": \\"sub::username\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"owners\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 21`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 22`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostOwners\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"owners\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 23`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"owner\\",
  \\"provider\\": \\"oidc\\",
  \\"ownerFieldName\\": \\"owners\\",
  \\"ownerFieldType\\": \\"string[]\\",
  \\"identityClaim\\": \\"sub::username\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"owners\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 24`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 25`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 26`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 27`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostStaticGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 28`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 29`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 30`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostStaticGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 31`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Admin\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"allowedGroups\\":   [\\"Moderator\\"],
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 32`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 33`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"group\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 34`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 35`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleGroup\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 36`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"group\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 37`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 38`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostSingleGroup\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 39`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"group\\",
  \\"groupsFieldType\\": \\"string\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"group\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 40`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 41`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"groups\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"create\\", $ctx.args.input, null) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 42`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 43`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 44`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"groups\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"update\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 45`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 46`] = `
"## [Start] Get existing record. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"PostGroups\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"GET_EXISTING_RECORD\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [\\"groups\\"] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.map.copyAndRetainAllKeys($context.arguments.input, $ctx.stash.keys) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Get existing record. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 47`] = `
"## [Start] Authorization rules. **
$util.qr($ctx.stash.put(\\"hasAuth\\", true))
#set( $authRules = [] )
#if( $ctx.stash.adminRoles && $ctx.stash.adminRoles.size() > 0 )
  $util.qr($authRules.add({
  \\"provider\\": \\"iam\\",
  \\"type\\": \\"admin\\",
  \\"strict\\": false,
  \\"roles\\": $ctx.stash.adminRoles
}))
#end
$util.qr($authRules.add({
  \\"type\\": \\"groups\\",
  \\"provider\\": \\"oidc\\",
  \\"groupsFieldName\\": \\"groups\\",
  \\"groupsFieldType\\": \\"string[]\\",
  \\"groupClaim\\": \\"cognito:groups\\",
  \\"allowedFields\\":   [\\"id\\", \\"title\\", \\"groups\\"]
}))
#set( $authResult = $util.authRules.mutationAuth($authRules, \\"delete\\", $ctx.args.input, $ctx.result) )
#if( !$authResult || ($authResult && !$authResult.authorized) )
  $util.unauthorized()
#end
#if( $authResult && !$util.isNullOrEmpty($authResult.authorizedInput) )
  #set( $ctx.args.input = $authResult.authorizedInput )
#end
$util.toJson({\\"version\\":\\"2018-05-29\\",\\"payload\\":{}})
## [End] Authorization rules. **"
`;

exports[`Verify RDS Model level Auth rules on mutations: should successfully transform oidc auth rules 48`] = `
"## [Start] Sandbox Mode Disabled, IAM Access Disabled. **
#if( !$ctx.stash.get(\\"hasAuth\\") )
  $util.unauthorized()
#end
$util.toJson({})
## [End] Sandbox Mode Disabled, IAM Access Disabled. **"
`;
