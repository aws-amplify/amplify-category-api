// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 1`] = `
"$util.qr($ctx.args.input.put(\\"personTaskId\\", $ctx.args.input.employeeTaskId))
$util.qr($ctx.args.input.remove(\\"employeeTaskId\\"))
$util.toJson({})"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 2`] = `
"#set( $fieldMap = {\\"employeeTaskId\\":\\"personTaskId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 3`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 4`] = `
"$util.qr($ctx.prev.result.put(\\"employeeTaskId\\", $ctx.prev.result.personTaskId))
$util.qr($ctx.prev.result.remove(\\"personTaskId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 5`] = `
"$util.qr($ctx.args.input.put(\\"personTaskId\\", $ctx.args.input.employeeTaskId))
$util.qr($ctx.args.input.remove(\\"employeeTaskId\\"))
$util.toJson({})"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 6`] = `
"#set( $fieldMap = {\\"employeeTaskId\\":\\"personTaskId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 7`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 8`] = `
"$util.qr($ctx.prev.result.put(\\"employeeTaskId\\", $ctx.prev.result.personTaskId))
$util.qr($ctx.prev.result.remove(\\"personTaskId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 9`] = `
"$util.qr($ctx.args.input.put(\\"personTaskId\\", $ctx.args.input.employeeTaskId))
$util.qr($ctx.args.input.remove(\\"employeeTaskId\\"))
$util.toJson({})"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 10`] = `
"#set( $fieldMap = {\\"employeeTaskId\\":\\"personTaskId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 11`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 12`] = `
"$util.qr($ctx.prev.result.put(\\"employeeTaskId\\", $ctx.prev.result.personTaskId))
$util.qr($ctx.prev.result.remove(\\"personTaskId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 13`] = `
"$util.qr($ctx.prev.result.put(\\"employeeTaskId\\", $ctx.prev.result.personTaskId))
$util.qr($ctx.prev.result.remove(\\"personTaskId\\"))
$util.toJson($ctx.prev.result)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 14`] = `
"#set( $fieldMap = {\\"employeeTaskId\\":\\"personTaskId\\"} )
#if( $util.isNull($fieldMap) || $fieldMap.keySet().size() <= 0 )
  #return($ctx.args)
#end
#if( $util.isNull($ctx.args.filter) && $util.isNull($ctx.args.condition) && $util.isNull($ctx.args.sort) && $util.isNull($ctx.args.aggregates) )
  #return($ctx.args)
#end
#set( $invoke = {
  \\"operation\\": \\"Invoke\\",
  \\"payload\\": {
      \\"args\\": $ctx.args,
      \\"fieldMap\\": $fieldMap
  }
} )
$util.toJson($invoke)"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 15`] = `
"#if( $ctx.error )
  $util.error($ctx.error.message, $ctx.error.type)
#end
#set( $ctx.stash.transformedArgs = $ctx.result )
$util.toJson({})"
`;

exports[`@mapsTo with @hasOne adds CRUD input and output mappings on hasOne type 16`] = `
"#foreach( $item in $ctx.prev.result.items )
  $util.qr($item.put(\\"employeeTaskId\\", $item.personTaskId))
  $util.qr($item.remove(\\"personTaskId\\"))
#end
$util.toJson($ctx.prev.result)"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 1`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Person\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"CREATE\\" )
#set( $lambdaInput.operationName = \\"createEmployee\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"task\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 2`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Person\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"UPDATE\\" )
#set( $lambdaInput.operationName = \\"updateEmployee\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"task\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 3`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Person\\" )
#set( $lambdaInput.args = $context.arguments )
#set( $lambdaInput.operation = \\"DELETE\\" )
#set( $lambdaInput.operationName = \\"deleteEmployee\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"task\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 4`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Person\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"getEmployee\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"task\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 5`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Person\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"listEmployees\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"task\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 6`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Todo\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"CREATE\\" )
#set( $lambdaInput.operationName = \\"createTask\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"employee\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 7`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Todo\\" )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.operation = \\"UPDATE\\" )
#set( $lambdaInput.operationName = \\"updateTask\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"employee\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
## Set the default values to put request **
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
## copy the values from input **
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments.input, {})))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 8`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.table = \\"Todo\\" )
#set( $lambdaInput.args = $context.arguments )
#set( $lambdaInput.operation = \\"DELETE\\" )
#set( $lambdaInput.operationName = \\"deleteTask\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"employee\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.condition = $util.defaultIfNull($context.arguments.condition, {}) )
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 9`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Todo\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"getTask\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"employee\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.input.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 10`] = `
"## [Start] Invoke RDS Lambda data source. **
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Todo\\" )
#set( $lambdaInput.operation = \\"LIST\\" )
#set( $lambdaInput.operationName = \\"listTasks\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [] )
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
#set( $lambdaInput.args.metadata.nonScalarFields = [\\"employee\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.metadata.keys.addAll($util.defaultIfNull($ctx.stash.keys, [])))
#set( $lambdaInput.args.input = $util.defaultIfNull($ctx.stash.defaultValues, {}) )
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 11`] = `
"## [Start] Invoke RDS Lambda data source. **
#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Todo\\" )
#set( $lambdaInput.operation = \\"GET_FIRST\\" )
#set( $lambdaInput.operationName = \\"GetItemConnectionQuery\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [\\"id\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
#if( !$lambdaInput.args.input )
  #set( $lambdaInput.args.input = {} )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
$util.qr($lambdaInput.args.input.put(\\"employeeId\\", {
  \\"eq\\": $util.defaultIfNull($ctx.source.id, \\"\\")
}))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;

exports[`@refersTo with @hasOne for RDS Models model table names are mapped 12`] = `
"## [Start] Invoke RDS Lambda data source. **
#if( $ctx.stash.deniedField )
  #return($util.toJson(null))
#end
#set( $lambdaInput = {} )
#set( $lambdaInput.args = {} )
#set( $lambdaInput.table = \\"Person\\" )
#set( $lambdaInput.operation = \\"GET\\" )
#set( $lambdaInput.operationName = \\"BelongsToConnectionQuery\\" )
#set( $lambdaInput.args.metadata = {} )
#set( $lambdaInput.args.metadata.keys = [\\"id\\"] )
#set( $lambdaInput.args.metadata.arrayFields = [] )
#set( $lambdaInput.args.metadata.nonScalarFields = [] )
#set( $lambdaInput.args.metadata.fieldMap = {} )
$util.qr($lambdaInput.args.metadata.fieldMap.putAll($util.defaultIfNull($context.stash.fieldMap, {})))
$util.qr($lambdaInput.args.putAll($util.defaultIfNull($context.arguments, {})))
#if( !$lambdaInput.args.input )
  #set( $lambdaInput.args.input = {} )
#end
#if( !$util.isNullOrEmpty($ctx.stash.authFilter) )
  #set( $lambdaInput.args.metadata.authFilter = $ctx.stash.authFilter )
#end
$util.qr($lambdaInput.args.input.put(\\"id\\", $util.defaultIfNull($ctx.source.employeeId, \\"\\")))
{
  \\"version\\": \\"2018-05-29\\",
  \\"operation\\": \\"Invoke\\",
  \\"payload\\":   $util.toJson($lambdaInput)
}
## [End] Invoke RDS Lambda data source. **"
`;
