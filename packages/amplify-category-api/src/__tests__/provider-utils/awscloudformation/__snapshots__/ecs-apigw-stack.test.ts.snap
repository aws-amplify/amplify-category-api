// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ecs stack should generate valid CFN template 1`] = `
Object {
  "Conditions": Object {
    "isAuthCondition": Object {
      "Fn::And": Array [
        Object {
          "Fn::Equals": Array [
            false,
            true,
          ],
        },
        Object {
          "Fn::Not": Array [
            Object {
              "Fn::Equals": Array [
                "",
                "",
              ],
            },
          ],
        },
        Object {
          "Fn::Not": Array [
            Object {
              "Fn::Equals": Array [
                "",
                "",
              ],
            },
          ],
        },
      ],
    },
  },
  "Mappings": Object {
    "ServiceprincipalMap": Object {
      "af-south-1": Object {
        "states": "states.af-south-1.amazonaws.com",
      },
      "ap-east-1": Object {
        "states": "states.ap-east-1.amazonaws.com",
      },
      "ap-northeast-1": Object {
        "states": "states.ap-northeast-1.amazonaws.com",
      },
      "ap-northeast-2": Object {
        "states": "states.ap-northeast-2.amazonaws.com",
      },
      "ap-northeast-3": Object {
        "states": "states.ap-northeast-3.amazonaws.com",
      },
      "ap-south-1": Object {
        "states": "states.ap-south-1.amazonaws.com",
      },
      "ap-south-2": Object {
        "states": "states.ap-south-2.amazonaws.com",
      },
      "ap-southeast-1": Object {
        "states": "states.ap-southeast-1.amazonaws.com",
      },
      "ap-southeast-2": Object {
        "states": "states.ap-southeast-2.amazonaws.com",
      },
      "ap-southeast-3": Object {
        "states": "states.ap-southeast-3.amazonaws.com",
      },
      "ca-central-1": Object {
        "states": "states.ca-central-1.amazonaws.com",
      },
      "cn-north-1": Object {
        "states": "states.cn-north-1.amazonaws.com",
      },
      "cn-northwest-1": Object {
        "states": "states.cn-northwest-1.amazonaws.com",
      },
      "eu-central-1": Object {
        "states": "states.eu-central-1.amazonaws.com",
      },
      "eu-central-2": Object {
        "states": "states.eu-central-2.amazonaws.com",
      },
      "eu-north-1": Object {
        "states": "states.eu-north-1.amazonaws.com",
      },
      "eu-south-1": Object {
        "states": "states.eu-south-1.amazonaws.com",
      },
      "eu-south-2": Object {
        "states": "states.eu-south-2.amazonaws.com",
      },
      "eu-west-1": Object {
        "states": "states.eu-west-1.amazonaws.com",
      },
      "eu-west-2": Object {
        "states": "states.eu-west-2.amazonaws.com",
      },
      "eu-west-3": Object {
        "states": "states.eu-west-3.amazonaws.com",
      },
      "me-central-1": Object {
        "states": "states.me-central-1.amazonaws.com",
      },
      "me-south-1": Object {
        "states": "states.me-south-1.amazonaws.com",
      },
      "sa-east-1": Object {
        "states": "states.sa-east-1.amazonaws.com",
      },
      "us-east-1": Object {
        "states": "states.us-east-1.amazonaws.com",
      },
      "us-east-2": Object {
        "states": "states.us-east-2.amazonaws.com",
      },
      "us-gov-east-1": Object {
        "states": "states.us-gov-east-1.amazonaws.com",
      },
      "us-gov-west-1": Object {
        "states": "states.us-gov-west-1.amazonaws.com",
      },
      "us-iso-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-iso-west-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-isob-east-1": Object {
        "states": "states.amazonaws.com",
      },
      "us-west-1": Object {
        "states": "states.us-west-1.amazonaws.com",
      },
      "us-west-2": Object {
        "states": "states.us-west-2.amazonaws.com",
      },
    },
  },
  "Outputs": Object {
    "ApiName": Object {
      "Value": "testApi",
    },
    "ClusterName": Object {
      "Value": Object {
        "Ref": "NetworkStackClusterName",
      },
    },
    "ContainerNames": Object {
      "Value": "testContainer",
    },
    "PipelineName": Object {
      "Value": Object {
        "Fn::Join": Array [
          "",
          Array [
            Object {
              "Ref": "rootStackName",
            },
            "-testApi-service-testExposedContainer-12345",
          ],
        ],
      },
    },
    "RootUrl": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "Api",
          "ApiEndpoint",
        ],
      },
    },
    "ServiceName": Object {
      "Value": "testApi-service-testExposedContainer-12345",
    },
  },
  "Parameters": Object {
    "NetworkStackCloudMapNamespaceId": Object {
      "Type": "String",
    },
    "NetworkStackClusterName": Object {
      "Type": "String",
    },
    "NetworkStackSubnetIds": Object {
      "Type": "CommaDelimitedList",
    },
    "NetworkStackVpcCidrBlock": Object {
      "Type": "String",
    },
    "NetworkStackVpcId": Object {
      "Type": "String",
    },
    "NetworkStackVpcLinkId": Object {
      "Type": "String",
    },
    "ParamZipPath": Object {
      "Default": "",
      "Type": "String",
    },
    "awaiterS3Key": Object {
      "Default": "custom-resource-pipeline-awaiter.zip",
      "Type": "String",
    },
    "deploymentBucketName": Object {
      "Type": "String",
    },
    "domain": Object {
      "Default": "",
      "Type": "String",
    },
    "env": Object {
      "Type": "String",
    },
    "restrictAccess": Object {
      "AllowedValues": Array [
        "true",
        "false",
      ],
      "Default": "false",
      "Type": "String",
    },
    "rootStackName": Object {
      "Type": "String",
    },
    "storagepostsArn": Object {
      "Type": "String",
    },
    "storagepostsName": Object {
      "Type": "String",
    },
    "storagepostsStreamArn": Object {
      "Type": "String",
    },
  },
  "Resources": Object {
    "ANYIntegration": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "Api",
        },
        "ConnectionId": Object {
          "Ref": "NetworkStackVpcLinkId",
        },
        "ConnectionType": "VPC_LINK",
        "IntegrationMethod": "ANY",
        "IntegrationType": "HTTP_PROXY",
        "IntegrationUri": Object {
          "Fn::GetAtt": Array [
            "CloudmapService",
            "Arn",
          ],
        },
        "PayloadFormatVersion": "1.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "Api": Object {
      "Properties": Object {
        "CorsConfiguration": Object {
          "AllowHeaders": Array [
            "*",
          ],
          "AllowMethods": Array [
            "DELETE",
            "GET",
            "HEAD",
            "OPTIONS",
            "PATCH",
            "POST",
            "PUT",
          ],
          "AllowOrigins": Array [
            "*",
          ],
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "rootStackName",
              },
              "-testApi",
            ],
          ],
        },
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "ApiPipelineCodeBuildProject117EE1BE": Object {
      "Properties": Object {
        "Artifacts": Object {
          "Type": "CODEPIPELINE",
        },
        "Cache": Object {
          "Type": "NO_CACHE",
        },
        "EncryptionKey": "alias/aws/s3",
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "Image": "aws/codebuild/standard:4.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER",
        },
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "ApiPipelineCodeBuildProjectRoleCFB98631",
            "Arn",
          ],
        },
        "Source": Object {
          "Type": "CODEPIPELINE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "ApiPipelineCodeBuildProjectRoleCFB98631": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiPipelineCodeBuildProjectRoleDefaultPolicyAF1730E7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "ApiPipelineCodeBuildProject117EE1BE",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:",
                      Object {
                        "Ref": "AWS::Region",
                      },
                      ":",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":log-group:/aws/codebuild/",
                      Object {
                        "Ref": "ApiPipelineCodeBuildProject117EE1BE",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codebuild:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":report-group/",
                    Object {
                      "Ref": "ApiPipelineCodeBuildProject117EE1BE",
                    },
                    "-*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecr:GetAuthorizationToken",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer",
                "ecr:InitiateLayerUpload",
                "ecr:BatchCheckLayerAvailability",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload",
                "ecr:PutImage",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiPipelineCodeBuildProjectRoleDefaultPolicyAF1730E7",
        "Roles": Array [
          Object {
            "Ref": "ApiPipelineCodeBuildProjectRoleCFB98631",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiPipelinePipeline68596884": Object {
      "DependsOn": Array [
        "ApiPipelinePipelineRoleDefaultPolicyB3AD67CF",
        "ApiPipelinePipelineRole8C805448",
        "Service",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "Location": Object {
            "Ref": "deploymentBucketName",
          },
          "Type": "S3",
        },
        "Name": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "rootStackName",
              },
              "-testApi-service-testExposedContainer-12345",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "ApiPipelinePipelineRole8C805448",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "AWS",
                  "Provider": "S3",
                  "Version": "1",
                },
                "Configuration": Object {
                  "S3Bucket": Object {
                    "Ref": "deploymentBucketName",
                  },
                  "S3ObjectKey": Object {
                    "Ref": "ParamZipPath",
                  },
                },
                "Name": "Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "SourceArtifact",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "EnvironmentVariables": Object {
                    "Fn::Join": Array [
                      "",
                      Array [
                        "[{\\"name\\":\\"AWS_ACCOUNT_ID\\",\\"type\\":\\"PLAINTEXT\\",\\"value\\":\\"",
                        Object {
                          "Ref": "AWS::AccountId",
                        },
                        "\\"}]",
                      ],
                    ],
                  },
                  "ProjectName": Object {
                    "Ref": "ApiPipelineCodeBuildProject117EE1BE",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "SourceArtifact",
                  },
                ],
                "Name": "Build",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "BuildArtifact",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Build",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Invoke",
                  "Owner": "AWS",
                  "Provider": "Lambda",
                  "Version": "1",
                },
                "Configuration": Object {
                  "FunctionName": Object {
                    "Ref": "PreDeployLambdaF7CAA99F",
                  },
                },
                "Name": "Predeploy",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Predeploy",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Provider": "ECS",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ClusterName": Object {
                    "Ref": "NetworkStackClusterName",
                  },
                  "ServiceName": "testApi-service-testExposedContainer-12345",
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "BuildArtifact",
                  },
                ],
                "Name": "Deploy",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "EcsDeployActionRole15B757E5",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Deploy",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiPipelinePipelineBuildCodePipelineActionRoleDefaultPolicy821C7A3A": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ApiPipelineCodeBuildProject117EE1BE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiPipelinePipelineBuildCodePipelineActionRoleDefaultPolicy821C7A3A",
        "Roles": Array [
          Object {
            "Ref": "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiPipelinePipelinePredeployCodePipelineActionRoleDefaultPolicy715F96BC": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:ListFunctions",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PreDeployLambdaF7CAA99F",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "PreDeployLambdaF7CAA99F",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiPipelinePipelinePredeployCodePipelineActionRoleDefaultPolicy715F96BC",
        "Roles": Array [
          Object {
            "Ref": "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiPipelinePipelineRole8C805448": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiPipelinePipelineRoleDefaultPolicyB3AD67CF": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ApiPipelinePipelineBuildCodePipelineActionRole04E6F13B",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "ApiPipelinePipelinePredeployCodePipelineActionRole387C06F4",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "EcsDeployActionRole15B757E5",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiPipelinePipelineRoleDefaultPolicyB3AD67CF",
        "Roles": Array [
          Object {
            "Ref": "ApiPipelinePipelineRole8C805448",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "ApiPipelinePipelineSourceCodePipelineActionRoleDefaultPolicyE5B48B86": Object {
      "DependsOn": Array [
        "Service",
      ],
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                      "/",
                      Object {
                        "Ref": "ParamZipPath",
                      },
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "s3:DeleteObject*",
                "s3:PutObject",
                "s3:PutObjectLegalHold",
                "s3:PutObjectRetention",
                "s3:PutObjectTagging",
                "s3:PutObjectVersionTagging",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "ApiPipelinePipelineSourceCodePipelineActionRoleDefaultPolicyE5B48B86",
        "Roles": Array [
          Object {
            "Ref": "ApiPipelinePipelineSourceCodePipelineActionRole59037A7A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Authorizer": Object {
      "Condition": "isAuthCondition",
      "Properties": Object {
        "ApiId": Object {
          "Ref": "Api",
        },
        "AuthorizerType": "JWT",
        "IdentitySource": Array [
          "$request.header.Authorization",
        ],
        "JwtConfiguration": Object {
          "Audience": Array [],
          "Issuer": Object {
            "Fn::Join": Array [
              "",
              Array [
                "https://cognito-idp.",
                Object {
                  "Ref": "AWS::Region",
                },
                ".amazonaws.com/",
              ],
            ],
          },
        },
        "Name": "testApiAuthorizer",
      },
      "Type": "AWS::ApiGatewayV2::Authorizer",
    },
    "AwaiterCustomCompleteHandler21A45EDC": Object {
      "DependsOn": Array [
        "AwaiterCustomCompleteHandlerServiceRoleDefaultPolicyB6596557",
        "AwaiterCustomCompleteHandlerServiceRoleFFF75973",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "const { CloudFormation } = require('@aws-sdk/client-cloudformation');
const { CodePipeline } = require('@aws-sdk/client-codepipeline');

const stageName = 'Source';
const actionName = 'Source';

const codePipeline = new CodePipeline();
const cloudFormation = new CloudFormation();

exports.handler = async function({ RequestType, ResourceProperties, StackId }) {
  const { pipelineName, artifactBucketName, artifactKey, deploymentMechanism } = ResourceProperties;

  console.log('Properties', ResourceProperties);

  switch (RequestType) {
    case 'Delete':
      return { IsComplete: true };
    case 'Update':
      const [, StackName] = StackId.split('/');
      const { Stacks } = await cloudFormation.describeStacks({ StackName });
      const [{ StackStatus }] = Stacks;

      if (StackStatus.includes('ROLLBACK')) {
        return { IsComplete: true };
      }
  }

  let stages;

  try {
    const { pipeline } = await codePipeline.getPipeline({ name: pipelineName });

    ({ stages } = pipeline);
  } catch (error) {
    const { code } = error;

    switch (code) {
      case 'PipelineNotFoundException':
        console.warn(error);

        return {
          IsComplete: false,
        };
      default:
        throw error;
    }
  }

  const stage = stages.find(({ name }) => name === stageName);

  if (stage === undefined) {
    throw new Error(\`There is no stage named \\"\${stageName}\\" in the \\"\${pipelineName}\\" pipeline\`);
  }

  const action = stage.actions.find(({ name }) => name === actionName);

  if (action === undefined) {
    throw new Error(\`There is no action named \\"\${actionName}\\" in the \\"\${stageName}\\" stage of the \\"\${pipelineName}\\" pipeline\`);
  }

  const {
    configuration,
    configuration: { S3Bucket, S3ObjectKey },
  } = action;

  if (deploymentMechanism === 'FULLY_MANAGED') {
    if (S3Bucket !== artifactBucketName || S3ObjectKey !== artifactKey) {
      console.warn(
        \`Bucket \\"\${artifactBucketName}\\" and key \\"\${artifactKey}\\" dont match the \\"\${actionName}\\" action configuration \${JSON.stringify(
          configuration,
        )}\`,
      );

      return {
        IsComplete: false,
      };
    }
  }

  let execution;

  try {
    const { pipelineExecutionSummaries } = await codePipeline.listPipelineExecutions({ pipelineName });

    [execution] = pipelineExecutionSummaries;
  } catch (error) {
    console.warn(error);

    return {
      IsComplete: false,
    };
  }

  console.log(execution);

  const { status } = execution || {};

  let IsComplete = false;

  switch (status) {
    case 'Failed':
    case 'Stopped':
      throw new Error(\\"The execution didn't succeed\\");
    case 'Succeeded':
      IsComplete = true;
  }

  return { IsComplete };
};
",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AwaiterCustomCompleteHandlerServiceRoleFFF75973",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AwaiterCustomCompleteHandlerServiceRoleDefaultPolicyB6596557": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codepipeline:GetPipeline",
                "codepipeline:ListPipelineExecutions",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codepipeline:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":",
                    Object {
                      "Ref": "ApiPipelinePipeline68596884",
                    },
                  ],
                ],
              },
            },
            Object {
              "Action": "cloudformation:DescribeStacks",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AWS::StackId",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AwaiterCustomCompleteHandlerServiceRoleDefaultPolicyB6596557",
        "Roles": Array [
          Object {
            "Ref": "AwaiterCustomCompleteHandlerServiceRoleFFF75973",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AwaiterCustomCompleteHandlerServiceRoleFFF75973": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AwaiterCustomEventHandler8B7CBA73": Object {
      "DependsOn": Array [
        "AwaiterCustomEventHandlerServiceRoleCC4D5DBF",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "exports.handler = async function({ RequestType, PhysicalResourceId, ResourceProperties }) {
  switch (RequestType) {
    case 'Delete':
    case 'Update':
      return { PhysicalResourceId };
  }

  const { pipelineName } = ResourceProperties;

  const result = {
    PhysicalResourceId: \`pipelineawaiter-\${pipelineName}\`,
  };

  return result;
};
",
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AwaiterCustomEventHandlerServiceRoleCC4D5DBF",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AwaiterCustomEventHandlerServiceRoleCC4D5DBF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AwaiterMyProviderframeworkisComplete18658065": Object {
      "DependsOn": Array [
        "AwaiterMyProviderframeworkisCompleteServiceRoleDefaultPolicyA36828FB",
        "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "deploymentBucketName",
          },
          "S3Key": Object {
            "Ref": "awaiterS3Key",
          },
        },
        "Description": "AWS CDK resource provider framework - isComplete (testEcsStack/AwaiterMyProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "AwaiterCustomCompleteHandler21A45EDC",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "AwaiterCustomEventHandler8B7CBA73",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.isComplete",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AwaiterMyProviderframeworkisCompleteServiceRoleDefaultPolicyA36828FB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterCustomEventHandler8B7CBA73",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterCustomEventHandler8B7CBA73",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterCustomCompleteHandler21A45EDC",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterCustomCompleteHandler21A45EDC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AwaiterMyProviderframeworkisCompleteServiceRoleDefaultPolicyA36828FB",
        "Roles": Array [
          Object {
            "Ref": "AwaiterMyProviderframeworkisCompleteServiceRole2C6A7CF0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AwaiterMyProviderframeworkonEventB703D418": Object {
      "DependsOn": Array [
        "AwaiterMyProviderframeworkonEventServiceRoleDefaultPolicy41437CAE",
        "AwaiterMyProviderframeworkonEventServiceRole3DA490A7",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "deploymentBucketName",
          },
          "S3Key": Object {
            "Ref": "awaiterS3Key",
          },
        },
        "Description": "AWS CDK resource provider framework - onEvent (testEcsStack/AwaiterMyProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "AwaiterCustomCompleteHandler21A45EDC",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "AwaiterCustomEventHandler8B7CBA73",
                "Arn",
              ],
            },
            "WAITER_STATE_MACHINE_ARN": Object {
              "Ref": "AwaiterMyProviderwaiterstatemachineCF09BEC8",
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AwaiterMyProviderframeworkonEventServiceRole3DA490A7",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AwaiterMyProviderframeworkonEventServiceRole3DA490A7": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AwaiterMyProviderframeworkonEventServiceRoleDefaultPolicy41437CAE": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterCustomEventHandler8B7CBA73",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterCustomEventHandler8B7CBA73",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterCustomCompleteHandler21A45EDC",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterCustomCompleteHandler21A45EDC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "AwaiterMyProviderwaiterstatemachineCF09BEC8",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AwaiterMyProviderframeworkonEventServiceRoleDefaultPolicy41437CAE",
        "Roles": Array [
          Object {
            "Ref": "AwaiterMyProviderframeworkonEventServiceRole3DA490A7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AwaiterMyProviderframeworkonTimeoutCC4166A7": Object {
      "DependsOn": Array [
        "AwaiterMyProviderframeworkonTimeoutServiceRoleDefaultPolicyCB302F22",
        "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A",
      ],
      "Properties": Object {
        "Code": Object {
          "S3Bucket": Object {
            "Ref": "deploymentBucketName",
          },
          "S3Key": Object {
            "Ref": "awaiterS3Key",
          },
        },
        "Description": "AWS CDK resource provider framework - onTimeout (testEcsStack/AwaiterMyProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "AwaiterCustomCompleteHandler21A45EDC",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "AwaiterCustomEventHandler8B7CBA73",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onTimeout",
        "Role": Object {
          "Fn::GetAtt": Array [
            "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A",
            "Arn",
          ],
        },
        "Runtime": "nodejs16.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "AwaiterMyProviderframeworkonTimeoutServiceRoleDefaultPolicyCB302F22": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterCustomEventHandler8B7CBA73",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterCustomEventHandler8B7CBA73",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterCustomCompleteHandler21A45EDC",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterCustomCompleteHandler21A45EDC",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AwaiterMyProviderframeworkonTimeoutServiceRoleDefaultPolicyCB302F22",
        "Roles": Array [
          Object {
            "Ref": "AwaiterMyProviderframeworkonTimeoutServiceRole40F88C6A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "AwaiterMyProviderwaiterstatemachineCF09BEC8": Object {
      "DependsOn": Array [
        "AwaiterMyProviderwaiterstatemachineRoleDefaultPolicy17602DC1",
        "AwaiterMyProviderwaiterstatemachineRoleD2CF7945",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"framework-isComplete-task\\",\\"States\\":{\\"framework-isComplete-task\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":10,\\"MaxAttempts\\":180,\\"BackoffRate\\":1}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"framework-onTimeout-task\\"}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "AwaiterMyProviderframeworkisComplete18658065",
                  "Arn",
                ],
              },
              "\\"},\\"framework-onTimeout-task\\":{\\"End\\":true,\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "AwaiterMyProviderframeworkonTimeoutCC4166A7",
                  "Arn",
                ],
              },
              "\\"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "AwaiterMyProviderwaiterstatemachineRoleD2CF7945",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "AwaiterMyProviderwaiterstatemachineRoleD2CF7945": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": Object {
                  "Fn::FindInMap": Array [
                    "ServiceprincipalMap",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    "states",
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "AwaiterMyProviderwaiterstatemachineRoleDefaultPolicy17602DC1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterMyProviderframeworkisComplete18658065",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterMyProviderframeworkisComplete18658065",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "AwaiterMyProviderframeworkonTimeoutCC4166A7",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "AwaiterMyProviderframeworkonTimeoutCC4166A7",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "AwaiterMyProviderwaiterstatemachineRoleDefaultPolicy17602DC1",
        "Roles": Array [
          Object {
            "Ref": "AwaiterMyProviderwaiterstatemachineRoleD2CF7945",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CloudmapService": Object {
      "Properties": Object {
        "DnsConfig": Object {
          "DnsRecords": Array [
            Object {
              "TTL": 60,
              "Type": "SRV",
            },
          ],
          "NamespaceId": Object {
            "Ref": "NetworkStackCloudMapNamespaceId",
          },
          "RoutingPolicy": "MULTIVALUE",
        },
        "Name": "testApi",
      },
      "Type": "AWS::ServiceDiscovery::Service",
    },
    "DefaultRoute": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "Api",
        },
        "AuthorizationScopes": Array [],
        "AuthorizationType": Object {
          "Fn::If": Array [
            "isAuthCondition",
            "JWT",
            "NONE",
          ],
        },
        "AuthorizerId": Object {
          "Fn::If": Array [
            "isAuthCondition",
            Object {
              "Ref": "Authorizer",
            },
            "",
          ],
        },
        "RouteKey": "$default",
        "Target": Object {
          "Fn::Join": Array [
            "",
            Array [
              "integrations/",
              Object {
                "Ref": "ANYIntegration",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "DeploymentAwaiter": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "AwaiterMyProviderframeworkonEventB703D418",
            "Arn",
          ],
        },
        "artifactBucketName": Object {
          "Ref": "deploymentBucketName",
        },
        "artifactKey": Object {
          "Ref": "ParamZipPath",
        },
        "pipelineName": Object {
          "Ref": "ApiPipelinePipeline68596884",
        },
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "EcsDeployActionRole15B757E5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::",
                      Object {
                        "Ref": "AWS::AccountId",
                      },
                      ":root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "EcsDeployActionRoleDefaultPolicy0BE60A75": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:TagResource",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecs:DescribeServices",
                "ecs:DescribeTaskDefinition",
                "ecs:DescribeTasks",
                "ecs:ListTasks",
                "ecs:RegisterTaskDefinition",
                "ecs:UpdateService",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Condition": Object {
                "StringEqualsIfExists": Object {
                  "iam:PassedToService": Array [
                    "ec2.amazonaws.com",
                    "ecs-tasks.amazonaws.com",
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":s3:::",
                      Object {
                        "Ref": "deploymentBucketName",
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "EcsDeployActionRoleDefaultPolicy0BE60A75",
        "Roles": Array [
          Object {
            "Ref": "EcsDeployActionRole15B757E5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "OptionsRoute": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "Api",
        },
        "RouteKey": "OPTIONS /{proxy+}",
        "Target": Object {
          "Fn::Join": Array [
            "",
            Array [
              "integrations/",
              Object {
                "Ref": "ANYIntegration",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "PreDeployLambdaF7CAA99F": Object {
      "DependsOn": Array [
        "PreDeployLambdaServiceRoleDefaultPolicyD9F42A87",
        "PreDeployLambdaServiceRole87EE44C9",
      ],
      "Properties": Object {
        "Code": Object {
          "ZipFile": "const { CodePipeline } = require('@aws-sdk/client-codepipeline');
const { ECS } = require('@aws-sdk/client-ecs');

const codepipeline = new CodePipeline();
const ecs = new ECS();

const { DESIRED_COUNT: desiredCountStr, CLUSTER_NAME: cluster, SERVICE_NAME: service } = process.env;

const desiredCount = parseInt(desiredCountStr, 10);

exports.handler = async function({ 'CodePipeline.job': { id: jobId } }) {
  await ecs.updateService({
    service,
    cluster,
    desiredCount,
  });

  return await codepipeline.putJobSuccessResult({ jobId });
};
",
        },
        "Environment": Object {
          "Variables": Object {
            "CLUSTER_NAME": Object {
              "Ref": "NetworkStackClusterName",
            },
            "DESIRED_COUNT": "1",
            "SERVICE_NAME": "testApi-service-testExposedContainer-12345",
          },
        },
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "PreDeployLambdaServiceRole87EE44C9",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 15,
      },
      "Type": "AWS::Lambda::Function",
    },
    "PreDeployLambdaServiceRole87EE44C9": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "PreDeployLambdaServiceRoleDefaultPolicyD9F42A87": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "ecs:UpdateService",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "Service",
              },
            },
            Object {
              "Action": Array [
                "codepipeline:PutJobSuccessResult",
                "codepipeline:PutJobFailureResult",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "PreDeployLambdaServiceRoleDefaultPolicyD9F42A87",
        "Roles": Array [
          Object {
            "Ref": "PreDeployLambdaServiceRole87EE44C9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "Service": Object {
      "Properties": Object {
        "Cluster": Object {
          "Ref": "NetworkStackClusterName",
        },
        "DesiredCount": 1,
        "LaunchType": "FARGATE",
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "ENABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "ServiceSG",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Object {
              "Ref": "NetworkStackSubnetIds",
            },
          },
        },
        "ServiceName": "testApi-service-testExposedContainer-12345",
        "ServiceRegistries": Array [
          Object {
            "ContainerName": "testExposedContainer",
            "ContainerPort": 12345,
            "RegistryArn": Object {
              "Fn::GetAtt": Array [
                "CloudmapService",
                "Arn",
              ],
            },
          },
        ],
        "TaskDefinition": Object {
          "Ref": "TaskDefinition",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "ServiceSG": Object {
      "Properties": Object {
        "GroupDescription": "Service SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [],
        "VpcId": Object {
          "Ref": "NetworkStackVpcId",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "Stage": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "Api",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "TaskDefinition": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Command": Array [],
            "EntryPoint": Array [],
            "Essential": true,
            "HealthCheck": Object {
              "Command": Array [
                "CMD-SHELL",
                "foo",
              ],
              "Interval": 30,
              "Retries": 3,
              "StartPeriod": 0,
              "Timeout": 5,
            },
            "Image": "testImage",
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "testContainerContainerLogGroupE42C53EF",
                },
                "awslogs-region": Object {
                  "Ref": "AWS::Region",
                },
                "awslogs-stream-prefix": "ecs",
              },
            },
            "Name": "testContainer",
          },
        ],
        "Cpu": "512",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "TaskDefinitionExecutionRole8D61C2FB",
            "Arn",
          ],
        },
        "Family": Object {
          "Fn::Join": Array [
            "",
            Array [
              Object {
                "Ref": "rootStackName",
              },
              "-testApi",
            ],
          ],
        },
        "Memory": "1024",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "TaskDefinitionTaskRoleFD40A61D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "TaskDefinitionExecutionRole8D61C2FB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":logs:",
                    Object {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    Object {
                      "Ref": "AWS::AccountId",
                    },
                    ":log-group:",
                    Object {
                      "Ref": "testContainerContainerLogGroupE42C53EF",
                    },
                    ":*",
                  ],
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TaskDefinitionExecutionRoleDefaultPolicy1F3406F5",
        "Roles": Array [
          Object {
            "Ref": "TaskDefinitionExecutionRole8D61C2FB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TaskDefinitionTaskRoleDefaultPolicy282E8624": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:Get*",
                "dynamodb:BatchGetItem",
                "dynamodb:List*",
                "dynamodb:Describe*",
                "dynamodb:Scan",
                "dynamodb:Query",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Ref": "storagepostsArn",
                },
                Object {
                  "Fn::Join": Array [
                    "/",
                    Array [
                      Object {
                        "Ref": "storagepostsArn",
                      },
                      "index/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": "s3:ListBucket",
              "Effect": "Allow",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "TaskDefinitionTaskRoleDefaultPolicy282E8624",
        "Roles": Array [
          Object {
            "Ref": "TaskDefinitionTaskRoleFD40A61D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "TaskDefinitionTaskRoleFD40A61D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "testContainerContainerLogGroupE42C53EF": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/ecs/",
              Object {
                "Ref": "rootStackName",
              },
              "-testApi-testContainer",
            ],
          ],
        },
        "RetentionInDays": 30,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
  },
}
`;
