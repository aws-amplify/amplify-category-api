// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generation route all scalar types 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Query\\";
  ctx.stash.fieldName = \\"makeBox\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"HTTP\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.endpoint = \\"https://bedrock-runtime.",
      Object {
        "Ref": "AWS::Region",
      },
      ".amazonaws.com\\";
  ctx.stash.authRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "authRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.unauthRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "unauthRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`generation route all scalar types 2`] = `
"export function request(ctx) {
  const toolConfig = {\\"tools\\":[{\\"toolSpec\\":{\\"name\\":\\"responseType\\",\\"description\\":\\"Generate a response type for the given field\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"int\\":{\\"type\\":\\"number\\",\\"description\\":\\"A signed 32-bit integer value.\\"},\\"float\\":{\\"type\\":\\"number\\",\\"description\\":\\"An IEEE 754 floating point value.\\"},\\"string\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"A unique identifier for an object. This scalar is serialized like a String but isn't meant to be human-readable.\\"},\\"boolean\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"A boolean value.\\"},\\"awsjson\\":{\\"type\\":\\"string\\",\\"description\\":\\"A JSON string. Any valid JSON construct is automatically parsed and loaded in the resolver code as maps, lists, or scalar values rather than as the literal input strings. Unquoted strings or otherwise invalid JSON result in a GraphQL validation error.\\"},\\"awsemail\\":{\\"type\\":\\"string\\",\\"description\\":\\"An email address in the format local-part@domain-part as defined by RFC 822.\\",\\"pattern\\":\\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\\\\\.[a-zA-Z]{2,}$\\"},\\"awsdate\\":{\\"type\\":\\"string\\",\\"description\\":\\"An extended ISO 8601 date string in the format YYYY-MM-DD.\\",\\"pattern\\":\\"^\\\\\\\\d{4}-d{2}-d{2}$\\"},\\"awstime\\":{\\"type\\":\\"string\\",\\"description\\":\\"An extended ISO 8601 time string in the format hh:mm:ss.sss.\\",\\"pattern\\":\\"^\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}\\\\\\\\.\\\\\\\\d{3}$\\"},\\"awsdatetime\\":{\\"type\\":\\"string\\",\\"description\\":\\"An extended ISO 8601 date and time string in the format YYYY-MM-DDThh:mm:ss.sssZ.\\",\\"pattern\\":\\"^\\\\\\\\d{4}-\\\\\\\\d{2}-\\\\\\\\d{2}T\\\\\\\\d{2}:\\\\\\\\d{2}:\\\\\\\\d{2}\\\\\\\\.\\\\\\\\d{3}Z$\\"},\\"awstimestamp\\":{\\"type\\":\\"string\\",\\"description\\":\\"An integer value representing the number of seconds before or after 1970-01-01-T00:00Z.\\",\\"pattern\\":\\"^\\\\\\\\d+$\\"},\\"awsphone\\":{\\"type\\":\\"string\\",\\"description\\":\\"A phone number. This value is stored as a string. Phone numbers can contain either spaces or hyphens to separate digit groups. Phone numbers without a country code are assumed to be US/North American numbers adhering to the North American Numbering Plan (NANP).\\",\\"pattern\\":\\"^\\\\\\\\d{3}-d{3}-d{4}$\\"},\\"awsurl\\":{\\"type\\":\\"string\\",\\"description\\":\\"A URL as defined by RFC 1738. For example, https://www.amazon.com/dp/B000NZW3KC/ or mailto:example@example.com. URLs must contain a schema (http, mailto) and can't contain two forward slashes (//) in the path part.\\",\\"pattern\\":\\"^(https?|mailto)://[^s/$.?#].[^s]*$\\"},\\"awsipaddress\\":{\\"type\\":\\"string\\",\\"description\\":\\"A valid IPv4 or IPv6 address. IPv4 addresses are expected in quad-dotted notation (123.12.34.56). IPv6 addresses are expected in non-bracketed, colon-separated format (1a2b:3c4b::1234:4567). You can include an optional CIDR suffix (123.45.67.89/16) to indicate subnet mask.\\"}},\\"required\\":[]}},\\"required\\":[\\"value\\"]}}}}],\\"toolChoice\\":{\\"tool\\":{\\"name\\":\\"responseType\\"}}};
  const prompt = \\"\\";
  const args = JSON.stringify(ctx.args);

  return {
    resourcePath: '/model/anthropic.claude-3-haiku-20240307-v1:0/converse',
    method: 'POST',
    params: {
      headers: { 'Content-Type': 'application/json' },
      body: {
        messages: [{
          role: 'user',
          content: [{ text: args }],
        }],
        system: [{ text: prompt }],
        toolConfig,
        // default inference config
      }
    }
  }
}

export function response(ctx) {
  if (ctx.error) {
    util.error(ctx.error.message, ctx.error.type);
  }
  const body = JSON.parse(ctx.result.body);
  const { content } = body.output.message;

  if (content.length < 1) {
    util.error('No content block in assistant response.', 'error');
  }

  const toolUse = content[0].toolUse;
  if (!toolUse) {
    util.error('Missing tool use block in assistant response.', 'error');
  }

  const response = toolUse.input.value;
  return response;
}"
`;

exports[`generation route custom query 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Query\\";
  ctx.stash.fieldName = \\"generateRecipe\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"HTTP\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.endpoint = \\"https://bedrock-runtime.",
      Object {
        "Ref": "AWS::Region",
      },
      ".amazonaws.com\\";
  ctx.stash.authRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "authRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.unauthRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "unauthRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`generation route custom query 2`] = `
"export function request(ctx) {
  const toolConfig = {\\"tools\\":[{\\"toolSpec\\":{\\"name\\":\\"responseType\\",\\"description\\":\\"Generate a response type for the given field\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"name\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"},\\"ingredients\\":{\\"type\\":\\"array\\",\\"items\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"}},\\"instructions\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"},\\"meal\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"Meal\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"BREAKFAST\\",\\"LUNCH\\",\\"DINNER\\"]}},\\"required\\":[]}},\\"required\\":[]}},\\"required\\":[\\"value\\"]}}}}],\\"toolChoice\\":{\\"tool\\":{\\"name\\":\\"responseType\\"}}};
  const prompt = \\"You are a helpful assistant that generates recipes.\\";
  const args = JSON.stringify(ctx.args);

  return {
    resourcePath: '/model/anthropic.claude-3-haiku-20240307-v1:0/converse',
    method: 'POST',
    params: {
      headers: { 'Content-Type': 'application/json' },
      body: {
        messages: [{
          role: 'user',
          content: [{ text: args }],
        }],
        system: [{ text: prompt }],
        toolConfig,
        // default inference config
      }
    }
  }
}

export function response(ctx) {
  if (ctx.error) {
    util.error(ctx.error.message, ctx.error.type);
  }
  const body = JSON.parse(ctx.result.body);
  const { content } = body.output.message;

  if (content.length < 1) {
    util.error('No content block in assistant response.', 'error');
  }

  const toolUse = content[0].toolUse;
  if (!toolUse) {
    util.error('Missing tool use block in assistant response.', 'error');
  }

  const response = toolUse.input.value;
  return response;
}"
`;

exports[`generation route model type with null timestamps 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Query\\";
  ctx.stash.fieldName = \\"makeTodo\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"HTTP\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.endpoint = \\"https://bedrock-runtime.",
      Object {
        "Ref": "AWS::Region",
      },
      ".amazonaws.com\\";
  ctx.stash.authRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "authRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.unauthRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "unauthRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`generation route model type with null timestamps 2`] = `
"export function request(ctx) {
  const toolConfig = {\\"tools\\":[{\\"toolSpec\\":{\\"name\\":\\"responseType\\",\\"description\\":\\"Generate a response type for the given field\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"content\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"},\\"isDone\\":{\\"type\\":\\"boolean\\",\\"description\\":\\"A boolean value.\\"},\\"id\\":{\\"type\\":\\"string\\",\\"description\\":\\"A unique identifier for an object. This scalar is serialized like a String but isn't meant to be human-readable.\\"}},\\"required\\":[\\"id\\"]}},\\"required\\":[\\"value\\"]}}}}],\\"toolChoice\\":{\\"tool\\":{\\"name\\":\\"responseType\\"}}};
  const prompt = \\"Make a string based on the description.\\";
  const args = JSON.stringify(ctx.args);

  return {
    resourcePath: '/model/anthropic.claude-3-haiku-20240307-v1:0/converse',
    method: 'POST',
    params: {
      headers: { 'Content-Type': 'application/json' },
      body: {
        messages: [{
          role: 'user',
          content: [{ text: args }],
        }],
        system: [{ text: prompt }],
        toolConfig,
        // default inference config
      }
    }
  }
}

export function response(ctx) {
  if (ctx.error) {
    util.error(ctx.error.message, ctx.error.type);
  }
  const body = JSON.parse(ctx.result.body);
  const { content } = body.output.message;

  if (content.length < 1) {
    util.error('No content block in assistant response.', 'error');
  }

  const toolUse = content[0].toolUse;
  if (!toolUse) {
    util.error('Missing tool use block in assistant response.', 'error');
  }

  const response = toolUse.input.value;
  return response;
}"
`;

exports[`generation route scalar type 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Query\\";
  ctx.stash.fieldName = \\"makeTodo\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"HTTP\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.endpoint = \\"https://bedrock-runtime.",
      Object {
        "Ref": "AWS::Region",
      },
      ".amazonaws.com\\";
  ctx.stash.authRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "authRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.unauthRole = \\"arn:aws:sts::",
      Object {
        "Ref": "AWS::AccountId",
      },
      ":assumed-role/",
      Object {
        "Ref": "unauthRoleName",
      },
      "/CognitoIdentityCredentials\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`generation route scalar type 2`] = `
"export function request(ctx) {
  const toolConfig = {\\"tools\\":[{\\"toolSpec\\":{\\"name\\":\\"responseType\\",\\"description\\":\\"Generate a response type for the given field\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"value\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"}},\\"required\\":[\\"value\\"]}}}}],\\"toolChoice\\":{\\"tool\\":{\\"name\\":\\"responseType\\"}}};
  const prompt = \\"Make a string based on the description.\\";
  const args = JSON.stringify(ctx.args);

  return {
    resourcePath: '/model/anthropic.claude-3-haiku-20240307-v1:0/converse',
    method: 'POST',
    params: {
      headers: { 'Content-Type': 'application/json' },
      body: {
        messages: [{
          role: 'user',
          content: [{ text: args }],
        }],
        system: [{ text: prompt }],
        toolConfig,
        // default inference config
      }
    }
  }
}

export function response(ctx) {
  if (ctx.error) {
    util.error(ctx.error.message, ctx.error.type);
  }
  const body = JSON.parse(ctx.result.body);
  const { content } = body.output.message;

  if (content.length < 1) {
    util.error('No content block in assistant response.', 'error');
  }

  const toolUse = content[0].toolUse;
  if (!toolUse) {
    util.error('Missing tool use block in assistant response.', 'error');
  }

  const response = toolUse.input.value;
  return response;
}"
`;
