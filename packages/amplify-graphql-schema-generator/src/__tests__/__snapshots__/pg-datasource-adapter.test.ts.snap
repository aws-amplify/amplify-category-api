// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getPostgresSchemaQuery uses correct schema query 1`] = `
"
SELECT DISTINCT
  INFORMATION_SCHEMA.COLUMNS.table_name,
  enum_name,enum_values,column_name,column_default,ordinal_position,data_type,udt_name,is_nullable,character_maximum_length,indexname,constraint_type,
  REPLACE(SUBSTRING(indexdef from '\\\\((.*)\\\\)'), '\\"', '') as index_columns
FROM INFORMATION_SCHEMA.COLUMNS
LEFT JOIN pg_indexes
ON
  INFORMATION_SCHEMA.COLUMNS.table_name = pg_indexes.tablename
  AND INFORMATION_SCHEMA.COLUMNS.column_name = ANY(STRING_TO_ARRAY(REPLACE(SUBSTRING(indexdef from '\\\\((.*)\\\\)'), '\\"', ''), ', '))
  LEFT JOIN (
    SELECT
      t.typname AS enum_name,
      ARRAY_AGG(e.enumlabel) as enum_values
    FROM    pg_type t JOIN
      pg_enum e ON t.oid = e.enumtypid JOIN
      pg_catalog.pg_namespace n ON n.oid = t.typnamespace
    WHERE   n.nspname = 'public'
    GROUP BY enum_name
  ) enums
  ON enums.enum_name = INFORMATION_SCHEMA.COLUMNS.udt_name
  LEFT JOIN information_schema.table_constraints
  ON INFORMATION_SCHEMA.table_constraints.constraint_name = indexname
  AND INFORMATION_SCHEMA.COLUMNS.table_name = INFORMATION_SCHEMA.table_constraints.table_name
WHERE INFORMATION_SCHEMA.COLUMNS.table_schema = 'public' AND TINFORMATION_SCHEMA.COLUMNS.TABLE_CATALOG = 'mydb';
"
`;

exports[`testPostgresDataSourceAdapter exclude option should not import the given tables 1`] = `
"type Capital @model {
  id: Int! @primaryKey
  name: String
  countryId: Int @index(name: \\"countryId\\")
}

type Country @model {
  id: Int! @primaryKey
  name: String
}
"
`;

exports[`testPostgresDataSourceAdapter generate schema retains hasMany and belongsTo relationship 1`] = `
"type Blog @model {
  id: Int! @primaryKey
  name: String
  posts: [Post] @hasMany(references: [\\"userId\\"])
}

type Post @model {
  id: Int! @primaryKey
  content: String
  blogId: Int!
  blog: Blog @belongsTo(references: [\\"userId\\"])
}
"
`;

exports[`testPostgresDataSourceAdapter generate schema retains hasOne and belongsTo relationship and removes the non-relational fields added manually 1`] = `
"type Profile @model {
  id: Int! @primaryKey
  content: String
  userId: Int!
  user: User @belongsTo(references: [\\"userId\\"])
}

type User @model {
  id: Int! @primaryKey
  name: String
  profile: Profile @hasOne(references: [\\"userId\\"])
}
"
`;

exports[`testPostgresDataSourceAdapter generates a default directive and optional types for fields with literal default values 1`] = `
"type Account @model {
  id: Int! @primaryKey
  serialNumber: Int @default(value: \\"-1\\")
  ownerName: String @default(value: \\"na\\")
  amount: Float @default(value: \\"101.101\\")
}
"
`;

exports[`testPostgresDataSourceAdapter generates optional type but no default directive for fields with computed default values 1`] = `
"type Account @model {
  id: Int! @primaryKey
  computed: Float
}
"
`;

exports[`testPostgresDataSourceAdapter generates primary key fields as required without the default directive added 1`] = `
"type Account @model {
  id: Int! @primaryKey(sortKeyFields: [\\"serialNumber\\"])
  serialNumber: Int!
  ownerName: String
  amount: Float!
}
"
`;

exports[`testPostgresDataSourceAdapter include option should import only the given tables 1`] = `
"type Task @refersTo(name: \\"Tasks\\") @model {
  id: String! @primaryKey(sortKeyFields: [\\"title\\"])
  title: String @index(name: \\"tasks_title\\") @index(name: \\"tasks_title_description\\", sortKeyFields: [\\"description\\"])
  description: String
  priority: String
}
"
`;

exports[`testPostgresDataSourceAdapter test generate graphql schema from internal reprensentation 1`] = `
"type Capital @model {
  id: Int! @primaryKey
  name: String
  countryId: Int @index(name: \\"countryId\\")
}

type Country @model {
  id: Int! @primaryKey
  name: String
}

type Task @refersTo(name: \\"Tasks\\") @model {
  id: String! @primaryKey(sortKeyFields: [\\"title\\"])
  title: String @index(name: \\"tasks_title\\") @index(name: \\"tasks_title_description\\", sortKeyFields: [\\"description\\"])
  description: String
  priority: String
}
"
`;

exports[`testPostgresDataSourceAdapter test generate graphql schema on model with enum field 1`] = `
"type Profile @model {
  id: Int! @primaryKey
  name: String
  type: Profile_type
}

enum Profile_type {
  Manager
  Employee
}
"
`;
