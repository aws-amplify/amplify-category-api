// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Type name conversions basic models should generate correct typescript data schema 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";

export const schema = a.schema({
    \\"User\\": a.model({
        id: a.string().required(),
        name: a.string()
    }).identifier([
        \\"id\\"
    ]),
    \\"Profile\\": a.model({
        id: a.string().required(),
        details: a.string()
    }).identifier([
        \\"id\\"
    ])
});
"
`;

exports[`Type name conversions check all valid datatypes 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";

export const schema = a.schema({
    \\"Table\\": a.model({
        id: a.string().required(),
        field1: a.string(),
        field2: a.string(),
        field3: a.integer(),
        field4: a.float(),
        field5: a.boolean(),
        field6: a.id(),
        field7: a.date(),
        field8: a.time(),
        field9: a.datetime(),
        field10: a.timestamp(),
        field11: a.json(),
        field12: a.email(),
        field13: a.phone(),
        field14: a.url(),
        field15: a.ipAddress()
    }).identifier([
        \\"id\\"
    ])
});
"
`;

exports[`Type name conversions generate typescript data schema should skip processing tables without primary key 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";
import { configure } from \\"@aws-amplify/data-schema/internals\\";
import { secret } from \\"@aws-amplify/backend\\";

export const schema = configure({
    database: {
        identifier: \\"ID1234567890\\",
        engine: \\"mysql\\",
        connectionUri: secret(\\"CONN_STR\\")
    }
}).schema({
    \\"User\\": a.model({
        id: a.string().required(),
        name: a.string()
    }).identifier([
        \\"id\\"
    ])
});
"
`;

exports[`Type name conversions generates enum imports correctly 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";

export const schema = a.schema({
    \\"User\\": a.model({
        id: a.string().required(),
        name: a.string(),
        status: a.enum([
            \\"ACTIVE\\",
            \\"INACTIVE\\"
        ])
    }).identifier([
        \\"id\\"
    ])
});
"
`;

exports[`Type name conversions postgres schema with database config secret and vpc should generate typescript data schema with configure 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";
import { configure } from \\"@aws-amplify/data-schema/internals\\";
import { secret } from \\"@aws-amplify/backend\\";

export const schema = configure({
    database: {
        identifier: \\"ID1234567890\\",
        engine: \\"postgresql\\",
        connectionUri: secret(\\"CONN_STR\\"),
        vpcConfig: {
            vpcId: \\"123\\",
            securityGroupIds: [
                \\"sb1\\"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: \\"sb1\\",
                    availabilityZone: \\"az1\\"
                }
            ]
        }
    }
}).schema({
    \\"User\\": a.model({
        id: a.string().required(),
        name: a.string()
    }).identifier([
        \\"id\\"
    ])
});
"
`;

exports[`Type name conversions schema with database config secret and vpc should generate typescript data schema with configure 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";
import { configure } from \\"@aws-amplify/data-schema/internals\\";
import { secret } from \\"@aws-amplify/backend\\";

export const schema = configure({
    database: {
        identifier: \\"ID1234567890\\",
        engine: \\"mysql\\",
        connectionUri: secret(\\"CONN_STR\\"),
        vpcConfig: {
            vpcId: \\"123\\",
            securityGroupIds: [
                \\"sb1\\",
                \\"sb2\\",
                \\"sb3\\"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: \\"sb1\\",
                    availabilityZone: \\"az1\\"
                },
                {
                    subnetId: \\"sb2\\",
                    availabilityZone: \\"az2\\"
                },
                {
                    subnetId: \\"sb3\\",
                    availabilityZone: \\"az3\\"
                }
            ]
        }
    }
}).schema({
    \\"User\\": a.model({
        id: a.string().required(),
        name: a.string()
    }).identifier([
        \\"id\\"
    ]),
    \\"Profile\\": a.model({
        id: a.string().required(),
        details: a.string()
    }).identifier([
        \\"id\\"
    ])
});
"
`;

exports[`Type name conversions schema with database config without vpc should generate typescript data schema with configure 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";
import { configure } from \\"@aws-amplify/data-schema/internals\\";
import { secret } from \\"@aws-amplify/backend\\";

export const schema = configure({
    database: {
        identifier: \\"ID1234567890\\",
        engine: \\"mysql\\",
        connectionUri: secret(\\"CONN_STR\\")
    }
}).schema({
    \\"User\\": a.model({
        id: a.string().required(),
        name: a.string()
    }).identifier([
        \\"id\\"
    ]),
    \\"Profile\\": a.model({
        id: a.string().required(),
        details: a.string()
    }).identifier([
        \\"id\\"
    ])
});
"
`;

exports[`Type name conversions ts schema generator should invoke generate schema 1`] = `
"/* eslint-disable */
/* THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. */
import { a } from \\"@aws-amplify/data-schema\\";
import { configure } from \\"@aws-amplify/data-schema/internals\\";
import { secret } from \\"@aws-amplify/backend\\";

export const schema = configure({
    database: {
        identifier: \\"IDNb9LVUQdGlNwNzYAgL6A\\",
        engine: \\"mysql\\",
        connectionUri: secret(\\"secret\\"),
        vpcConfig: {
            vpcId: \\"abc\\",
            securityGroupIds: [
                \\"sg0\\",
                \\"sg1\\",
                \\"sg2\\"
            ],
            subnetAvailabilityZones: [
                {
                    subnetId: \\"sb0\\",
                    availabilityZone: \\"az0\\"
                },
                {
                    subnetId: \\"sb1\\",
                    availabilityZone: \\"az1\\"
                },
                {
                    subnetId: \\"sb2\\",
                    availabilityZone: \\"az2\\"
                }
            ]
        }
    }
}).schema({
    \\"User\\": a.model({
        id: a.string().required(),
        name: a.string()
    }).identifier([
        \\"id\\"
    ])
});
"
`;
