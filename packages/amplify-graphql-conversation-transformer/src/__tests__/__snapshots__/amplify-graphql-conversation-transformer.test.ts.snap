// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConversationTransformer parameterized tests should transform a conversation route $name 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Mutation\\";
  ctx.stash.fieldName = \\"parameterizedChat\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"AWS_LAMBDA\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = \\"",
      Object {
        "Fn::Sub": Array [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          Object {
            "name": "conversation-handler",
          },
        ],
      },
      "\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer parameterized tests should transform a conversation route $name 2`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    const toolDefinitions = {\\"tools\\":[{\\"name\\":\\"getTemperature\\",\\"description\\":\\"does a thing\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"city\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"}},\\"required\\":[\\"city\\"]}},\\"graphqlRequestInputDescriptor\\":{\\"selectionSet\\":\\"value unit\\",\\"propertyTypes\\":{\\"city\\":\\"String!\\"},\\"queryName\\":\\"getTemperature\\"}}]};
    const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
    const graphqlApiEndpoint = '",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

    const messages = prev.result.items;
    const responseMutation = {
      name: 'createAssistantResponseParameterizedChat',
      inputTypeName: 'CreateConversationMessageParameterizedChatAssistantInput',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: \\"You are a helpful chatbot.\\",
  
};

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    const dataTools = toolDefinitions.tools;
 const toolsConfiguration = {
  dataTools,
  clientTools,
};

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }

export function response(ctx) {
  let success = true;
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
    success = false;
  }
  const response = {
      __typename: 'ConversationMessageParameterizedChat',
      id: ctx.stash.defaultValues.id,
      conversationId: ctx.args.conversationId,
      role: 'user',
      content: ctx.args.content,
      createdAt: ctx.stash.defaultValues.createdAt,
      updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}",
    ],
  ],
}
`;

exports[`ConversationTransformer parameterized tests should transform a conversation route $name 3`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Mutation\\";
  ctx.stash.fieldName = \\"parameterizedChat\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"AWS_LAMBDA\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = \\"",
      Object {
        "Fn::Sub": Array [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          Object {
            "name": "conversation-handler",
          },
        ],
      },
      "\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer parameterized tests should transform a conversation route $name 4`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    
    const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
    const graphqlApiEndpoint = '",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

    const messages = prev.result.items;
    const responseMutation = {
      name: 'createAssistantResponseParameterizedChat',
      inputTypeName: 'CreateConversationMessageParameterizedChatAssistantInput',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: \\"You are a helpful chatbot.\\",
  
};

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    const toolsConfiguration = {
  clientTools
};

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }

export function response(ctx) {
  let success = true;
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
    success = false;
  }
  const response = {
      __typename: 'ConversationMessageParameterizedChat',
      id: ctx.stash.defaultValues.id,
      conversationId: ctx.args.conversationId,
      role: 'user',
      content: ctx.args.content,
      createdAt: ctx.stash.defaultValues.createdAt,
      updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}",
    ],
  ],
}
`;

exports[`ConversationTransformer parameterized tests should transform a conversation route $name 5`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Mutation\\";
  ctx.stash.fieldName = \\"parameterizedChat\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"AWS_LAMBDA\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = \\"",
      Object {
        "Fn::Sub": Array [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          Object {
            "name": "conversation-handler",
          },
        ],
      },
      "\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer parameterized tests should transform a conversation route $name 6`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    
    const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
    const graphqlApiEndpoint = '",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

    const messages = prev.result.items;
    const responseMutation = {
      name: 'createAssistantResponseParameterizedChat',
      inputTypeName: 'CreateConversationMessageParameterizedChatAssistantInput',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: \\"You are a helpful chatbot.\\",
  inferenceConfiguration: {\\"temperature\\":0.5,\\"topP\\":0.9,\\"maxTokens\\":100},
};

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    const toolsConfiguration = {
  clientTools
};

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }

export function response(ctx) {
  let success = true;
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
    success = false;
  }
  const response = {
      __typename: 'ConversationMessageParameterizedChat',
      id: ctx.stash.defaultValues.id,
      conversationId: ctx.args.conversationId,
      role: 'user',
      content: ctx.args.content,
      createdAt: ctx.stash.defaultValues.createdAt,
      updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas conversation route with model query tool 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Mutation\\";
  ctx.stash.fieldName = \\"pirateChat\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"AWS_LAMBDA\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = \\"",
      Object {
        "Fn::Sub": Array [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          Object {
            "name": "conversation-handler",
          },
        ],
      },
      "\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas conversation route with model query tool 2`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    const toolDefinitions = {\\"tools\\":[{\\"name\\":\\"listTodos\\",\\"description\\":\\"lists todos\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{},\\"required\\":[]}},\\"graphqlRequestInputDescriptor\\":{\\"selectionSet\\":\\"items { content isDone id createdAt updatedAt owner } nextToken\\",\\"propertyTypes\\":{},\\"queryName\\":\\"listTodos\\"}}]};
    const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
    const graphqlApiEndpoint = '",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

    const messages = prev.result.items;
    const responseMutation = {
      name: 'createAssistantResponsePirateChat',
      inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: \\"You are a helpful chatbot. Answer questions to the best of your ability.\\",
  
};

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    const dataTools = toolDefinitions.tools;
 const toolsConfiguration = {
  dataTools,
  clientTools,
};

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }

export function response(ctx) {
  let success = true;
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
    success = false;
  }
  const response = {
      __typename: 'ConversationMessagePirateChat',
      id: ctx.stash.defaultValues.id,
      conversationId: ctx.args.conversationId,
      role: 'user',
      content: ctx.args.content,
      createdAt: ctx.stash.defaultValues.createdAt,
      updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform a conversation route with a model query tool including relationships 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Mutation\\";
  ctx.stash.fieldName = \\"pirateChat\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"AWS_LAMBDA\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = \\"",
      Object {
        "Fn::Sub": Array [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          Object {
            "name": "conversation-handler",
          },
        ],
      },
      "\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform a conversation route with a model query tool including relationships 2`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    const toolDefinitions = {\\"tools\\":[{\\"name\\":\\"listCustomers\\",\\"description\\":\\"Provides data about the customer sending a message\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{},\\"required\\":[]}},\\"graphqlRequestInputDescriptor\\":{\\"selectionSet\\":\\"items { name email activeCart { products { name price } customerId id createdAt updatedAt owner } orderHistory { items { products { name price } customerId id createdAt updatedAt owner } nextToken } id createdAt updatedAt owner } nextToken\\",\\"propertyTypes\\":{},\\"queryName\\":\\"listCustomers\\"}}]};
    const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
    const graphqlApiEndpoint = '",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

    const messages = prev.result.items;
    const responseMutation = {
      name: 'createAssistantResponsePirateChat',
      inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: \\"You are a helpful chatbot. Answer questions to the best of your ability.\\",
  
};

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    const dataTools = toolDefinitions.tools;
 const toolsConfiguration = {
  dataTools,
  clientTools,
};

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }

export function response(ctx) {
  let success = true;
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
    success = false;
  }
  const response = {
      __typename: 'ConversationMessagePirateChat',
      id: ctx.stash.defaultValues.id,
      conversationId: ctx.args.conversationId,
      role: 'user',
      content: ctx.args.content,
      createdAt: ctx.stash.defaultValues.createdAt,
      updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform a conversation route with inference configuration 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Mutation\\";
  ctx.stash.fieldName = \\"pirateChat\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"AWS_LAMBDA\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = \\"",
      Object {
        "Fn::Sub": Array [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          Object {
            "name": "conversation-handler",
          },
        ],
      },
      "\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform a conversation route with inference configuration 2`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    
    const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
    const graphqlApiEndpoint = '",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

    const messages = prev.result.items;
    const responseMutation = {
      name: 'createAssistantResponsePirateChat',
      inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: \\"You are a helpful chatbot. Answer questions to the best of your ability.\\",
  inferenceConfiguration: {\\"temperature\\":0.5,\\"topP\\":0.9,\\"maxTokens\\":100},
};

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    const toolsConfiguration = {
  clientTools
};

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }

export function response(ctx) {
  let success = true;
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
    success = false;
  }
  const response = {
      __typename: 'ConversationMessagePirateChat',
      id: ctx.stash.defaultValues.id,
      conversationId: ctx.args.conversationId,
      role: 'user',
      content: ctx.args.content,
      createdAt: ctx.stash.defaultValues.createdAt,
      updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform a conversation route with query tools 1`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "export const request = (ctx) => {
  ctx.stash.typeName = \\"Mutation\\";
  ctx.stash.fieldName = \\"pirateChat\\";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = \\"AWS_LAMBDA\\";
  ctx.stash.metadata.apiId = \\"",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "\\";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = \\"",
      Object {
        "Fn::Sub": Array [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          Object {
            "name": "conversation-handler",
          },
        ],
      },
      "\\";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform a conversation route with query tools 2`] = `
Object {
  "Fn::Join": Array [
    "",
    Array [
      "  import { util } from '@aws-appsync/utils';

  export function request(ctx) {
    const { args, identity, request, prev } = ctx;
    const toolDefinitions = {\\"tools\\":[{\\"name\\":\\"getTemperature\\",\\"description\\":\\"does a thing\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"city\\":{\\"type\\":\\"string\\",\\"description\\":\\"A UTF-8 character sequence.\\"}},\\"required\\":[\\"city\\"]}},\\"graphqlRequestInputDescriptor\\":{\\"selectionSet\\":\\"value unit\\",\\"propertyTypes\\":{\\"city\\":\\"String!\\"},\\"queryName\\":\\"getTemperature\\"}},{\\"name\\":\\"plus\\",\\"description\\":\\"does a different thing\\",\\"inputSchema\\":{\\"json\\":{\\"type\\":\\"object\\",\\"properties\\":{\\"a\\":{\\"type\\":\\"number\\",\\"description\\":\\"A signed 32-bit integer value.\\"},\\"b\\":{\\"type\\":\\"number\\",\\"description\\":\\"A signed 32-bit integer value.\\"}},\\"required\\":[]}},\\"graphqlRequestInputDescriptor\\":{\\"selectionSet\\":\\"\\",\\"propertyTypes\\":{\\"a\\":\\"Int\\",\\"b\\":\\"Int\\"},\\"queryName\\":\\"plus\\"}}]};
    const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
    const graphqlApiEndpoint = '",
      Object {
        "Fn::GetAtt": Array [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

    const messages = prev.result.items;
    const responseMutation = {
      name: 'createAssistantResponsePirateChat',
      inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
      selectionSet,
    };
    const currentMessageId = ctx.stash.defaultValues.id;
    const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: \\"You are a helpful chatbot. Answer questions to the best of your ability.\\",
  
};

    const clientTools = args.toolConfiguration?.tools?.map((tool) => { return { ...tool.toolSpec }});
    const dataTools = toolDefinitions.tools;
 const toolsConfiguration = {
  dataTools,
  clientTools,
};

    const authHeader = request.headers['authorization'];
    const payload = {
      conversationId: args.conversationId,
      currentMessageId,
      responseMutation,
      graphqlApiEndpoint,
      modelConfiguration,
      request: { headers: { authorization: authHeader }},
      messages,
      toolsConfiguration,
    };

    return {
      operation: 'Invoke',
      payload,
      invocationType: 'Event'
    };
  }

export function response(ctx) {
  let success = true;
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
    success = false;
  }
  const response = {
      __typename: 'ConversationMessagePirateChat',
      id: ctx.stash.defaultValues.id,
      conversationId: ctx.args.conversationId,
      role: 'user',
      content: ctx.args.content,
      createdAt: ctx.stash.defaultValues.createdAt,
      updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform a conversation route with query tools 3`] = `
"type Temperature {
  value: Int
  unit: String
}

type Query {
  getTemperature(city: String!): Temperature
  plus(a: Int, b: Int): Int
  getConversationPirateChat(id: ID!): ConversationPirateChat
  listConversationPirateChats(filter: ModelConversationPirateChatFilterInput, limit: Int, nextToken: String): ModelConversationPirateChatConnection
  getConversationMessagePirateChat(id: ID!): ConversationMessagePirateChat
  listConversationMessagePirateChats(filter: ModelConversationMessagePirateChatFilterInput, limit: Int, nextToken: String): ModelConversationMessagePirateChatConnection
}

type Mutation {
  pirateChat(conversationId: ID!, content: [ContentBlockInput], aiContext: AWSJSON, toolConfiguration: ToolConfigurationInput): ConversationMessage
  createAssistantResponsePirateChat(input: CreateConversationMessagePirateChatAssistantInput!): ConversationMessagePirateChat @aws_cognito_user_pools
  createConversationPirateChat(input: CreateConversationPirateChatInput!, condition: ModelConversationPirateChatConditionInput): ConversationPirateChat
  deleteConversationPirateChat(input: DeleteConversationPirateChatInput!, condition: ModelConversationPirateChatConditionInput): ConversationPirateChat
  createConversationMessagePirateChat(input: CreateConversationMessagePirateChatInput!, condition: ModelConversationMessagePirateChatConditionInput): ConversationMessagePirateChat
  deleteConversationMessagePirateChat(input: DeleteConversationMessagePirateChatInput!, condition: ModelConversationMessagePirateChatConditionInput): ConversationMessagePirateChat
}

enum ConversationParticipantRole {
  user
  assistant
}

interface ConversationMessage {
  id: ID!
  conversationId: ID!
  role: ConversationParticipantRole
  content: [ContentBlock]
  context: AWSJSON
  toolConfiguration: ToolConfiguration
}

input DocumentBlockSourceInput {
  bytes: String
}

input DocumentBlockInput {
  format: String!
  name: String!
  source: DocumentBlockSourceInput!
}

input ImageBlockSourceInput {
  bytes: String
}

input ImageBlockInput {
  format: String!
  source: ImageBlockSourceInput!
}

input ToolResultContentBlockInput {
  document: DocumentBlockInput
  image: ImageBlockInput
  json: AWSJSON
  text: String
}

input ToolResultBlockInput {
  content: [ToolResultContentBlockInput!]!
  toolUseId: String!
  status: String
}

type DocumentBlockSource {
  bytes: String
}

type DocumentBlock {
  format: String!
  name: String!
  source: DocumentBlockSource!
}

type ImageBlock {
  format: String!
  source: ImageBlockSource!
}

type ImageBlockSource {
  bytes: String
}

type ToolUseBlock {
  toolUseId: String!
  name: String!
  input: AWSJSON!
}

type ToolResultContentBlock {
  document: DocumentBlock
  image: ImageBlock
  json: AWSJSON
  text: String
}

type ToolResultBlock {
  content: [ToolResultContentBlock!]!
  toolUseId: String!
  status: String
}

type ContentBlockText {
  text: String
}

type ContentBlockImage {
  image: ImageBlock
}

type ContentBlockDocument {
  document: DocumentBlock
}

type ContentBlockToolUse {
  toolUse: ToolUseBlock
}

type ContentBlockToolResult {
  toolResult: ToolResultBlock
}

input ContentBlockInput {
  text: String
  document: DocumentBlockInput
  image: ImageBlockInput
  toolResult: ToolResultBlockInput
}

type ContentBlock {
  text: String
  document: DocumentBlock
  image: ImageBlock
  toolResult: ToolResultBlock
  toolUse: ToolUseBlock
}

input ToolConfigurationInput {
  tools: [ToolInput]
}

input ToolInput {
  toolSpec: ToolSpecificationInput
}

input ToolSpecificationInput {
  name: String!
  description: String
  inputSchema: ToolInputSchemaInput!
}

input ToolInputSchemaInput {
  json: AWSJSON
}

type ToolConfiguration {
  tools: [Tool]
}

type Tool {
  toolSpec: ToolSpecification
}

type ToolSpecification {
  name: String!
  description: String
  inputSchema: ToolInputSchema!
}

type ToolInputSchema {
  json: AWSJSON
}

input CreateConversationMessagePirateChatAssistantInput {
  conversationId: ID
  content: [ContentBlockInput]
  associatedUserMessageId: ID
}

type Subscription {
  onCreateAssistantResponsePirateChat(conversationId: ID): ConversationMessagePirateChat @aws_subscribe(mutations: [\\"createAssistantResponsePirateChat\\"]) @aws_cognito_user_pools
  onCreateConversationMessagePirateChat(filter: ModelSubscriptionConversationMessagePirateChatFilterInput, owner: String): ConversationMessagePirateChat @aws_subscribe(mutations: [\\"createConversationMessagePirateChat\\"])
}

type ConversationPirateChat {
  id: ID!
  name: String
  metadata: AWSJSON
  messages(filter: ModelConversationMessagePirateChatFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelConversationMessagePirateChatConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type ConversationMessagePirateChat implements ConversationMessage {
  id: ID!
  conversationId: ID!
  conversation: ConversationPirateChat
  role: ConversationParticipantRole
  content: [ContentBlock]
  aiContext: AWSJSON
  toolConfiguration: ToolConfiguration
  assistantContent: [ContentBlock]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelConversationPirateChatConnection {
  items: [ConversationPirateChat]!
  nextToken: String
}

input ModelConversationPirateChatFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  metadata: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationPirateChatFilterInput]
  or: [ModelConversationPirateChatFilterInput]
  not: ModelConversationPirateChatFilterInput
  owner: ModelStringInput
}

input ModelConversationPirateChatConditionInput {
  name: ModelStringInput
  metadata: ModelStringInput
  and: [ModelConversationPirateChatConditionInput]
  or: [ModelConversationPirateChatConditionInput]
  not: ModelConversationPirateChatConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateConversationPirateChatInput {
  id: ID
  name: String
  metadata: AWSJSON
}

input DeleteConversationPirateChatInput {
  id: ID!
}

type ModelConversationMessagePirateChatConnection {
  items: [ConversationMessagePirateChat]!
  nextToken: String
}

input ModelConversationParticipantRoleInput {
  eq: ConversationParticipantRole
  ne: ConversationParticipantRole
}

input ModelConversationMessagePirateChatFilterInput {
  id: ModelIDInput
  conversationId: ModelIDInput
  role: ModelConversationParticipantRoleInput
  aiContext: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationMessagePirateChatFilterInput]
  or: [ModelConversationMessagePirateChatFilterInput]
  not: ModelConversationMessagePirateChatFilterInput
  owner: ModelStringInput
}

input ModelConversationMessagePirateChatConditionInput {
  conversationId: ModelIDInput
  role: ModelConversationParticipantRoleInput
  aiContext: ModelStringInput
  and: [ModelConversationMessagePirateChatConditionInput]
  or: [ModelConversationMessagePirateChatConditionInput]
  not: ModelConversationMessagePirateChatConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateConversationMessagePirateChatInput {
  id: ID
  conversationId: ID!
  role: ConversationParticipantRole
  content: [ContentBlockInput]
  aiContext: AWSJSON
  toolConfiguration: ToolConfigurationInput
  assistantContent: [ContentBlockInput]
}

input DeleteConversationMessagePirateChatInput {
  id: ID!
}

input ModelSubscriptionConversationMessagePirateChatFilterInput {
  id: ModelSubscriptionIDInput
  conversationId: ModelSubscriptionIDInput
  role: ModelSubscriptionStringInput
  aiContext: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionConversationMessagePirateChatFilterInput]
  or: [ModelSubscriptionConversationMessagePirateChatFilterInput]
  owner: ModelStringInput
}
"
`;
