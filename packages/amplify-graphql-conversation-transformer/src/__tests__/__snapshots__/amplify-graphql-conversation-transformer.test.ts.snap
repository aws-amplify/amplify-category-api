// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`conversation route valid schema 1`] = `
"type Foo {
  bar: Int
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Mutation {
  pirateChat(sessionId: ID, message: String): String
  createFoo(input: CreateFooInput!, condition: ModelFooConditionInput): Foo
  updateFoo(input: UpdateFooInput!, condition: ModelFooConditionInput): Foo
  deleteFoo(input: DeleteFooInput!, condition: ModelFooConditionInput): Foo
  createConversationSessionpirateChat(input: CreateConversationSessionpirateChatInput!, condition: ModelConversationSessionpirateChatConditionInput): ConversationSessionpirateChat
  deleteConversationSessionpirateChat(input: DeleteConversationSessionpirateChatInput!, condition: ModelConversationSessionpirateChatConditionInput): ConversationSessionpirateChat
  createConversationMessagepirateChat(input: CreateConversationMessagepirateChatInput!, condition: ModelConversationMessagepirateChatConditionInput): ConversationMessagepirateChat
  deleteConversationMessagepirateChat(input: DeleteConversationMessagepirateChatInput!, condition: ModelConversationMessagepirateChatConditionInput): ConversationMessagepirateChat
}

enum ConversationMessageSender {
  user
  assistant
}

type ConversationSessionpirateChat {
  id: ID!
  name: String
  metadata: AWSJSON
  messages(filter: ModelConversationMessagepirateChatFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelConversationMessagepirateChatConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type ConversationMessagepirateChat {
  id: ID!
  conversationSessionId: ID!
  session: ConversationSessionpirateChat
  sender: ConversationMessageSender
  content: String
  context: AWSJSON
  uiComponents: [AWSJSON]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFooConnection {
  items: [Foo]!
  nextToken: String
}

input ModelFooFilterInput {
  bar: ModelIntInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelFooFilterInput]
  or: [ModelFooFilterInput]
  not: ModelFooFilterInput
}

type Query {
  getFoo(id: ID!): Foo
  listFoos(filter: ModelFooFilterInput, limit: Int, nextToken: String): ModelFooConnection
  getConversationSessionpirateChat(id: ID!): ConversationSessionpirateChat
  listConversationSessionpirateChats(filter: ModelConversationSessionpirateChatFilterInput, limit: Int, nextToken: String): ModelConversationSessionpirateChatConnection
  getConversationMessagepirateChat(id: ID!): ConversationMessagepirateChat
  listConversationMessagepirateChats(filter: ModelConversationMessagepirateChatFilterInput, limit: Int, nextToken: String): ModelConversationMessagepirateChatConnection
}

input ModelFooConditionInput {
  bar: ModelIntInput
  and: [ModelFooConditionInput]
  or: [ModelFooConditionInput]
  not: ModelFooConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateFooInput {
  bar: Int
  id: ID
}

input UpdateFooInput {
  bar: Int
  id: ID!
}

input DeleteFooInput {
  id: ID!
}

input ModelSubscriptionFooFilterInput {
  bar: ModelSubscriptionIntInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionFooFilterInput]
  or: [ModelSubscriptionFooFilterInput]
}

type Subscription {
  onCreateFoo(filter: ModelSubscriptionFooFilterInput): Foo @aws_subscribe(mutations: [\\"createFoo\\"])
  onUpdateFoo(filter: ModelSubscriptionFooFilterInput): Foo @aws_subscribe(mutations: [\\"updateFoo\\"])
  onDeleteFoo(filter: ModelSubscriptionFooFilterInput): Foo @aws_subscribe(mutations: [\\"deleteFoo\\"])
  onCreateConversationMessagepirateChat(filter: ModelSubscriptionConversationMessagepirateChatFilterInput, owner: String): ConversationMessagepirateChat @aws_subscribe(mutations: [\\"createConversationMessagepirateChat\\"])
}

type ModelConversationSessionpirateChatConnection {
  items: [ConversationSessionpirateChat]!
  nextToken: String
}

input ModelConversationSessionpirateChatFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  metadata: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationSessionpirateChatFilterInput]
  or: [ModelConversationSessionpirateChatFilterInput]
  not: ModelConversationSessionpirateChatFilterInput
  owner: ModelStringInput
}

input ModelConversationSessionpirateChatConditionInput {
  name: ModelStringInput
  metadata: ModelStringInput
  and: [ModelConversationSessionpirateChatConditionInput]
  or: [ModelConversationSessionpirateChatConditionInput]
  not: ModelConversationSessionpirateChatConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateConversationSessionpirateChatInput {
  id: ID
  name: String
  metadata: AWSJSON
}

input DeleteConversationSessionpirateChatInput {
  id: ID!
}

type ModelConversationMessagepirateChatConnection {
  items: [ConversationMessagepirateChat]!
  nextToken: String
}

input ModelConversationMessageSenderInput {
  eq: ConversationMessageSender
  ne: ConversationMessageSender
}

input ModelConversationMessagepirateChatFilterInput {
  id: ModelIDInput
  conversationSessionId: ModelIDInput
  sender: ModelConversationMessageSenderInput
  content: ModelStringInput
  context: ModelStringInput
  uiComponents: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationMessagepirateChatFilterInput]
  or: [ModelConversationMessagepirateChatFilterInput]
  not: ModelConversationMessagepirateChatFilterInput
  owner: ModelStringInput
}

input ModelConversationMessagepirateChatConditionInput {
  conversationSessionId: ModelIDInput
  sender: ModelConversationMessageSenderInput
  content: ModelStringInput
  context: ModelStringInput
  uiComponents: ModelStringInput
  and: [ModelConversationMessagepirateChatConditionInput]
  or: [ModelConversationMessagepirateChatConditionInput]
  not: ModelConversationMessagepirateChatConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateConversationMessagepirateChatInput {
  id: ID
  conversationSessionId: ID!
  sender: ConversationMessageSender
  content: String
  context: AWSJSON
  uiComponents: [AWSJSON]
}

input DeleteConversationMessagepirateChatInput {
  id: ID!
}

input ModelSubscriptionConversationMessagepirateChatFilterInput {
  id: ModelSubscriptionIDInput
  conversationSessionId: ModelSubscriptionIDInput
  sender: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  context: ModelSubscriptionStringInput
  uiComponents: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionConversationMessagepirateChatFilterInput]
  or: [ModelSubscriptionConversationMessagepirateChatFilterInput]
  owner: ModelStringInput
}
"
`;
