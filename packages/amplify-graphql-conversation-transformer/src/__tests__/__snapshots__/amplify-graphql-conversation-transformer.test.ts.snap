// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ConversationTransformer valid schemas should transform conversation route with inference configuration 1`] = `
{
  "Fn::Join": [
    "",
    [
      "export const request = (ctx) => {
  ctx.stash.typeName = "Mutation";
  ctx.stash.fieldName = "pirateChat";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = "AWS_LAMBDA";
  ctx.stash.metadata.apiId = "",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = "",
      {
        "Fn::Sub": [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          {
            "name": "conversation-handler",
          },
        ],
      },
      "";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform conversation route with inference configuration 2`] = `
{
  "Fn::Join": [
    "",
    [
      "import { util } from '@aws-appsync/utils';

export function request(ctx) {
  const { args, request, prev } = ctx;
  
  const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
  const graphqlApiEndpoint = '",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

  const messages = prev.result.items;
  const responseMutation = {
    name: 'createAssistantResponsePirateChat',
    inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
    selectionSet,
  };
  const currentMessageId = ctx.stash.defaultValues.id;
  const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: "You are a helpful chatbot. Answer questions to the best of your ability.",
  inferenceConfiguration: {"temperature":0.5,"topP":0.9,"maxTokens":100},
};

  const clientTools = args.toolConfiguration?.tools?.map((tool) => {
    return { ...tool.toolSpec };
  });
  const toolsConfiguration = {
  clientTools
};

  const authHeader = request.headers['authorization'];
  const payload = {
    conversationId: args.conversationId,
    currentMessageId,
    responseMutation,
    graphqlApiEndpoint,
    modelConfiguration,
    request: { headers: { authorization: authHeader } },
    messages,
    toolsConfiguration,
  };

  return {
    operation: 'Invoke',
    payload,
    invocationType: 'Event',
  };
}

export function response(ctx) {
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
  }
  const response = {
    __typename: 'ConversationMessagePirateChat',
    id: ctx.stash.defaultValues.id,
    conversationId: ctx.args.conversationId,
    role: 'user',
    content: ctx.args.content,
    createdAt: ctx.stash.defaultValues.createdAt,
    updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}
",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform conversation route with model query tool 1`] = `
{
  "Fn::Join": [
    "",
    [
      "export const request = (ctx) => {
  ctx.stash.typeName = "Mutation";
  ctx.stash.fieldName = "pirateChat";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = "AWS_LAMBDA";
  ctx.stash.metadata.apiId = "",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = "",
      {
        "Fn::Sub": [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          {
            "name": "conversation-handler",
          },
        ],
      },
      "";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform conversation route with model query tool 2`] = `
{
  "Fn::Join": [
    "",
    [
      "import { util } from '@aws-appsync/utils';

export function request(ctx) {
  const { args, request, prev } = ctx;
  const toolDefinitions = {"tools":[{"name":"listTodos","description":"lists todos","inputSchema":{"json":{"type":"object","properties":{},"required":[]}},"graphqlRequestInputDescriptor":{"selectionSet":"items { content isDone id createdAt updatedAt owner } nextToken","propertyTypes":{},"queryName":"listTodos"}}]};
  const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
  const graphqlApiEndpoint = '",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

  const messages = prev.result.items;
  const responseMutation = {
    name: 'createAssistantResponsePirateChat',
    inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
    selectionSet,
  };
  const currentMessageId = ctx.stash.defaultValues.id;
  const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: "You are a helpful chatbot. Answer questions to the best of your ability.",
  
};

  const clientTools = args.toolConfiguration?.tools?.map((tool) => {
    return { ...tool.toolSpec };
  });
  const dataTools = toolDefinitions.tools;
 const toolsConfiguration = {
  dataTools,
  clientTools,
};

  const authHeader = request.headers['authorization'];
  const payload = {
    conversationId: args.conversationId,
    currentMessageId,
    responseMutation,
    graphqlApiEndpoint,
    modelConfiguration,
    request: { headers: { authorization: authHeader } },
    messages,
    toolsConfiguration,
  };

  return {
    operation: 'Invoke',
    payload,
    invocationType: 'Event',
  };
}

export function response(ctx) {
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
  }
  const response = {
    __typename: 'ConversationMessagePirateChat',
    id: ctx.stash.defaultValues.id,
    conversationId: ctx.args.conversationId,
    role: 'user',
    content: ctx.args.content,
    createdAt: ctx.stash.defaultValues.createdAt,
    updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}
",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform conversation route with model query tool including relationships 1`] = `
{
  "Fn::Join": [
    "",
    [
      "export const request = (ctx) => {
  ctx.stash.typeName = "Mutation";
  ctx.stash.fieldName = "pirateChat";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = "AWS_LAMBDA";
  ctx.stash.metadata.apiId = "",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = "",
      {
        "Fn::Sub": [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          {
            "name": "conversation-handler",
          },
        ],
      },
      "";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform conversation route with model query tool including relationships 2`] = `
{
  "Fn::Join": [
    "",
    [
      "import { util } from '@aws-appsync/utils';

export function request(ctx) {
  const { args, request, prev } = ctx;
  const toolDefinitions = {"tools":[{"name":"listCustomers","description":"Provides data about the customer sending a message","inputSchema":{"json":{"type":"object","properties":{},"required":[]}},"graphqlRequestInputDescriptor":{"selectionSet":"items { name email activeCart { products { name price } customerId id createdAt updatedAt owner } orderHistory { items { products { name price } customerId id createdAt updatedAt owner } nextToken } id createdAt updatedAt owner } nextToken","propertyTypes":{},"queryName":"listCustomers"}}]};
  const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
  const graphqlApiEndpoint = '",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

  const messages = prev.result.items;
  const responseMutation = {
    name: 'createAssistantResponsePirateChat',
    inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
    selectionSet,
  };
  const currentMessageId = ctx.stash.defaultValues.id;
  const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: "You are a helpful chatbot. Answer questions to the best of your ability.",
  
};

  const clientTools = args.toolConfiguration?.tools?.map((tool) => {
    return { ...tool.toolSpec };
  });
  const dataTools = toolDefinitions.tools;
 const toolsConfiguration = {
  dataTools,
  clientTools,
};

  const authHeader = request.headers['authorization'];
  const payload = {
    conversationId: args.conversationId,
    currentMessageId,
    responseMutation,
    graphqlApiEndpoint,
    modelConfiguration,
    request: { headers: { authorization: authHeader } },
    messages,
    toolsConfiguration,
  };

  return {
    operation: 'Invoke',
    payload,
    invocationType: 'Event',
  };
}

export function response(ctx) {
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
  }
  const response = {
    __typename: 'ConversationMessagePirateChat',
    id: ctx.stash.defaultValues.id,
    conversationId: ctx.args.conversationId,
    role: 'user',
    content: ctx.args.content,
    createdAt: ctx.stash.defaultValues.createdAt,
    updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}
",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform conversation route with query tools 1`] = `
{
  "Fn::Join": [
    "",
    [
      "export const request = (ctx) => {
  ctx.stash.typeName = "Mutation";
  ctx.stash.fieldName = "pirateChat";
  ctx.stash.conditions = [];
  ctx.stash.metadata = {};
  ctx.stash.metadata.dataSourceType = "AWS_LAMBDA";
  ctx.stash.metadata.apiId = "",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "ApiId",
        ],
      },
      "";
  ctx.stash.connectionAttributes = {};
  ctx.stash.lambdaFunctionArn = "",
      {
        "Fn::Sub": [
          "arn:aws:lambda:\${AWS::Region}:\${AWS::AccountId}:function:\${name}",
          {
            "name": "conversation-handler",
          },
        ],
      },
      "";
  ctx.stash.adminRoles = [];
  return {};
}

export const response = (ctx) => {
  return ctx.prev.result;
};",
    ],
  ],
}
`;

exports[`ConversationTransformer valid schemas should transform conversation route with query tools 2`] = `
{
  "Fn::Join": [
    "",
    [
      "import { util } from '@aws-appsync/utils';

export function request(ctx) {
  const { args, request, prev } = ctx;
  const toolDefinitions = {"tools":[{"name":"getTemperature","description":"does a thing","inputSchema":{"json":{"type":"object","properties":{"city":{"type":"string","description":"A UTF-8 character sequence."}},"required":["city"]}},"graphqlRequestInputDescriptor":{"selectionSet":"value unit","propertyTypes":{"city":"String!"},"queryName":"getTemperature"}},{"name":"plus","description":"does a different thing","inputSchema":{"json":{"type":"object","properties":{"a":{"type":"number","description":"A signed 32-bit integer value."},"b":{"type":"number","description":"A signed 32-bit integer value."}},"required":[]}},"graphqlRequestInputDescriptor":{"selectionSet":"","propertyTypes":{"a":"Int","b":"Int"},"queryName":"plus"}}]};
  const selectionSet = 'id conversationId content { image { format source { bytes }} text toolUse { toolUseId name input } toolResult { status toolUseId content { json text image { format source { bytes }} document { format name source { bytes }} }}} role owner createdAt updatedAt';
  const graphqlApiEndpoint = '",
      {
        "Fn::GetAtt": [
          "GraphQLAPI",
          "GraphQLUrl",
        ],
      },
      "';

  const messages = prev.result.items;
  const responseMutation = {
    name: 'createAssistantResponsePirateChat',
    inputTypeName: 'CreateConversationMessagePirateChatAssistantInput',
    selectionSet,
  };
  const currentMessageId = ctx.stash.defaultValues.id;
  const modelConfiguration = {
  modelId: 'anthropic.claude-3-haiku-20240307-v1:0',
  systemPrompt: "You are a helpful chatbot. Answer questions to the best of your ability.",
  
};

  const clientTools = args.toolConfiguration?.tools?.map((tool) => {
    return { ...tool.toolSpec };
  });
  const dataTools = toolDefinitions.tools;
 const toolsConfiguration = {
  dataTools,
  clientTools,
};

  const authHeader = request.headers['authorization'];
  const payload = {
    conversationId: args.conversationId,
    currentMessageId,
    responseMutation,
    graphqlApiEndpoint,
    modelConfiguration,
    request: { headers: { authorization: authHeader } },
    messages,
    toolsConfiguration,
  };

  return {
    operation: 'Invoke',
    payload,
    invocationType: 'Event',
  };
}

export function response(ctx) {
  if (ctx.error) {
    util.appendError(ctx.error.message, ctx.error.type);
  }
  const response = {
    __typename: 'ConversationMessagePirateChat',
    id: ctx.stash.defaultValues.id,
    conversationId: ctx.args.conversationId,
    role: 'user',
    content: ctx.args.content,
    createdAt: ctx.stash.defaultValues.createdAt,
    updatedAt: ctx.stash.defaultValues.updatedAt,
  };
  return response;
}
",
    ],
  ],
}
`;
