// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`conversation route valid schema 1`] = `
"type Mutation {
  pirateChat(sessionId: ID, message: String): String @conversation(aiModel: \\"Claude3Haiku\\")
  angryChat(sessionId: ID, message: String): String @conversation(aiModel: \\"Claude3Haiku\\")
}

enum ConversationMessageSender {
  user
  assistant
}

type ConversationSession @model(subscriptions: {level: off}, mutations: {update: null}) @auth(rules: [{allow: owner, ownerField: \\"owner\\"}]) {
  id: ID!
  name: String
  metadata: AWSJSON
  messages: [ConversationMessage] @hasMany(references: \\"conversationSessionId\\")
}

type ConversationMessage @model(subscriptions: {onUpdate: null, onDelete: null}, mutations: {update: null}) @auth(rules: [{allow: owner, ownerField: \\"owner\\"}]) {
  id: ID!
  conversationSessionId: ID!
  session: ConversationSession @belongsTo(references: \\"conversationSessionId\\")
  sender: ConversationMessageSender
  content: String
  context: AWSJSON
  uiComponents: [AWSJSON]
}
"
`;

exports[`conversation route valid schema 2`] = `
"type Mutation {
  pirateChat(sessionId: ID, message: String): String
  angryChat(sessionId: ID, message: String): String
  createConversationSession(input: CreateConversationSessionInput!, condition: ModelConversationSessionConditionInput): ConversationSession
  deleteConversationSession(input: DeleteConversationSessionInput!, condition: ModelConversationSessionConditionInput): ConversationSession
  createConversationMessage(input: CreateConversationMessageInput!, condition: ModelConversationMessageConditionInput): ConversationMessage
  deleteConversationMessage(input: DeleteConversationMessageInput!, condition: ModelConversationMessageConditionInput): ConversationMessage
}

enum ConversationMessageSender {
  user
  assistant
}

type ConversationSession {
  id: ID!
  name: String
  metadata: AWSJSON
  messages(filter: ModelConversationMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelConversationMessageConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

type ConversationMessage {
  id: ID!
  conversationSessionId: ID!
  session: ConversationSession
  sender: ConversationMessageSender
  content: String
  context: AWSJSON
  uiComponents: [AWSJSON]
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  owner: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelConversationSessionConnection {
  items: [ConversationSession]!
  nextToken: String
}

input ModelConversationSessionFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  metadata: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationSessionFilterInput]
  or: [ModelConversationSessionFilterInput]
  not: ModelConversationSessionFilterInput
  owner: ModelStringInput
}

type Query {
  getConversationSession(id: ID!): ConversationSession
  listConversationSessions(filter: ModelConversationSessionFilterInput, limit: Int, nextToken: String): ModelConversationSessionConnection
  getConversationMessage(id: ID!): ConversationMessage
  listConversationMessages(filter: ModelConversationMessageFilterInput, limit: Int, nextToken: String): ModelConversationMessageConnection
}

input ModelConversationSessionConditionInput {
  name: ModelStringInput
  metadata: ModelStringInput
  and: [ModelConversationSessionConditionInput]
  or: [ModelConversationSessionConditionInput]
  not: ModelConversationSessionConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateConversationSessionInput {
  id: ID
  name: String
  metadata: AWSJSON
}

input DeleteConversationSessionInput {
  id: ID!
}

type Subscription {
  onCreateConversationMessage(filter: ModelSubscriptionConversationMessageFilterInput, owner: String): ConversationMessage @aws_subscribe(mutations: [\\"createConversationMessage\\"])
}

type ModelConversationMessageConnection {
  items: [ConversationMessage]!
  nextToken: String
}

input ModelConversationMessageSenderInput {
  eq: ConversationMessageSender
  ne: ConversationMessageSender
}

input ModelConversationMessageFilterInput {
  id: ModelIDInput
  conversationSessionId: ModelIDInput
  sender: ModelConversationMessageSenderInput
  content: ModelStringInput
  context: ModelStringInput
  uiComponents: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationMessageFilterInput]
  or: [ModelConversationMessageFilterInput]
  not: ModelConversationMessageFilterInput
  owner: ModelStringInput
}

input ModelConversationMessageConditionInput {
  conversationSessionId: ModelIDInput
  sender: ModelConversationMessageSenderInput
  content: ModelStringInput
  context: ModelStringInput
  uiComponents: ModelStringInput
  and: [ModelConversationMessageConditionInput]
  or: [ModelConversationMessageConditionInput]
  not: ModelConversationMessageConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  owner: ModelStringInput
}

input CreateConversationMessageInput {
  id: ID
  conversationSessionId: ID!
  sender: ConversationMessageSender
  content: String
  context: AWSJSON
  uiComponents: [AWSJSON]
}

input DeleteConversationMessageInput {
  id: ID!
}

input ModelSubscriptionConversationMessageFilterInput {
  id: ModelSubscriptionIDInput
  conversationSessionId: ModelSubscriptionIDInput
  sender: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  context: ModelSubscriptionStringInput
  uiComponents: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionConversationMessageFilterInput]
  or: [ModelSubscriptionConversationMessageFilterInput]
  owner: ModelStringInput
}
"
`;
